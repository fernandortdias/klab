/**
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kactors.kactors.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kactors.kactors.ArgumentDeclaration;
import org.integratedmodelling.kactors.kactors.Body;
import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.Match;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Match</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isId <em>Id</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getBody <em>Body</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isRegexp <em>Regexp</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isObservable <em>Observable</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isLiteral <em>Literal</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#isText <em>Text</em>}</li>
 *   <li>{@link org.integratedmodelling.kactors.kactors.impl.MatchImpl#getArguments <em>Arguments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MatchImpl extends MinimalEObjectImpl.Container implements Match
{
  /**
   * The default value of the '{@link #isId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isId()
   * @generated
   * @ordered
   */
  protected static final boolean ID_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isId()
   * @generated
   * @ordered
   */
  protected boolean id = ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected Body body;

  /**
   * The default value of the '{@link #isRegexp() <em>Regexp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRegexp()
   * @generated
   * @ordered
   */
  protected static final boolean REGEXP_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRegexp() <em>Regexp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRegexp()
   * @generated
   * @ordered
   */
  protected boolean regexp = REGEXP_EDEFAULT;

  /**
   * The default value of the '{@link #isObservable() <em>Observable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObservable()
   * @generated
   * @ordered
   */
  protected static final boolean OBSERVABLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isObservable() <em>Observable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObservable()
   * @generated
   * @ordered
   */
  protected boolean observable = OBSERVABLE_EDEFAULT;

  /**
   * The default value of the '{@link #isLiteral() <em>Literal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLiteral()
   * @generated
   * @ordered
   */
  protected static final boolean LITERAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLiteral() <em>Literal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLiteral()
   * @generated
   * @ordered
   */
  protected boolean literal = LITERAL_EDEFAULT;

  /**
   * The default value of the '{@link #isText() <em>Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isText()
   * @generated
   * @ordered
   */
  protected static final boolean TEXT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isText() <em>Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isText()
   * @generated
   * @ordered
   */
  protected boolean text = TEXT_EDEFAULT;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected ArgumentDeclaration arguments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MatchImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KactorsPackage.Literals.MATCH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(boolean newId)
  {
    boolean oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(Body newBody, NotificationChain msgs)
  {
    Body oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(Body newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRegexp()
  {
    return regexp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegexp(boolean newRegexp)
  {
    boolean oldRegexp = regexp;
    regexp = newRegexp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__REGEXP, oldRegexp, regexp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isObservable()
  {
    return observable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObservable(boolean newObservable)
  {
    boolean oldObservable = observable;
    observable = newObservable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__OBSERVABLE, oldObservable, observable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLiteral()
  {
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLiteral(boolean newLiteral)
  {
    boolean oldLiteral = literal;
    literal = newLiteral;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__LITERAL, oldLiteral, literal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isText()
  {
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setText(boolean newText)
  {
    boolean oldText = text;
    text = newText;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__TEXT, oldText, text));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArgumentDeclaration getArguments()
  {
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArguments(ArgumentDeclaration newArguments, NotificationChain msgs)
  {
    ArgumentDeclaration oldArguments = arguments;
    arguments = newArguments;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__ARGUMENTS, oldArguments, newArguments);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArguments(ArgumentDeclaration newArguments)
  {
    if (newArguments != arguments)
    {
      NotificationChain msgs = null;
      if (arguments != null)
        msgs = ((InternalEObject)arguments).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__ARGUMENTS, null, msgs);
      if (newArguments != null)
        msgs = ((InternalEObject)newArguments).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KactorsPackage.MATCH__ARGUMENTS, null, msgs);
      msgs = basicSetArguments(newArguments, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KactorsPackage.MATCH__ARGUMENTS, newArguments, newArguments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__BODY:
        return basicSetBody(null, msgs);
      case KactorsPackage.MATCH__ARGUMENTS:
        return basicSetArguments(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        return isId();
      case KactorsPackage.MATCH__BODY:
        return getBody();
      case KactorsPackage.MATCH__REGEXP:
        return isRegexp();
      case KactorsPackage.MATCH__OBSERVABLE:
        return isObservable();
      case KactorsPackage.MATCH__LITERAL:
        return isLiteral();
      case KactorsPackage.MATCH__TEXT:
        return isText();
      case KactorsPackage.MATCH__ARGUMENTS:
        return getArguments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        setId((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__BODY:
        setBody((Body)newValue);
        return;
      case KactorsPackage.MATCH__REGEXP:
        setRegexp((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__OBSERVABLE:
        setObservable((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__LITERAL:
        setLiteral((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__TEXT:
        setText((Boolean)newValue);
        return;
      case KactorsPackage.MATCH__ARGUMENTS:
        setArguments((ArgumentDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        setId(ID_EDEFAULT);
        return;
      case KactorsPackage.MATCH__BODY:
        setBody((Body)null);
        return;
      case KactorsPackage.MATCH__REGEXP:
        setRegexp(REGEXP_EDEFAULT);
        return;
      case KactorsPackage.MATCH__OBSERVABLE:
        setObservable(OBSERVABLE_EDEFAULT);
        return;
      case KactorsPackage.MATCH__LITERAL:
        setLiteral(LITERAL_EDEFAULT);
        return;
      case KactorsPackage.MATCH__TEXT:
        setText(TEXT_EDEFAULT);
        return;
      case KactorsPackage.MATCH__ARGUMENTS:
        setArguments((ArgumentDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KactorsPackage.MATCH__ID:
        return id != ID_EDEFAULT;
      case KactorsPackage.MATCH__BODY:
        return body != null;
      case KactorsPackage.MATCH__REGEXP:
        return regexp != REGEXP_EDEFAULT;
      case KactorsPackage.MATCH__OBSERVABLE:
        return observable != OBSERVABLE_EDEFAULT;
      case KactorsPackage.MATCH__LITERAL:
        return literal != LITERAL_EDEFAULT;
      case KactorsPackage.MATCH__TEXT:
        return text != TEXT_EDEFAULT;
      case KactorsPackage.MATCH__ARGUMENTS:
        return arguments != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (id: ");
    result.append(id);
    result.append(", regexp: ");
    result.append(regexp);
    result.append(", observable: ");
    result.append(observable);
    result.append(", literal: ");
    result.append(literal);
    result.append(", text: ");
    result.append(text);
    result.append(')');
    return result.toString();
  }

} //MatchImpl
