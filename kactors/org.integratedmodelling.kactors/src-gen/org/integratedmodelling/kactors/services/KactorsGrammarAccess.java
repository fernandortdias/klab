/*
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kactors.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KactorsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPreambleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPreamblePreambleParserRuleCall_1_0 = (RuleCall)cPreambleAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		
		//Model:
		//	{Model} preamble=Preamble?
		//	definitions+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} preamble=Preamble? definitions+=Definition*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//preamble=Preamble?
		public Assignment getPreambleAssignment_1() { return cPreambleAssignment_1; }
		
		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_1_0() { return cPreamblePreambleParserRuleCall_1_0; }
		
		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_2_0() { return cDefinitionsDefinitionParserRuleCall_2_0; }
	}
	public class PreambleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Preamble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreambleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_0_0 = (Alternatives)cGroup_1_0_0_0.eContents().get(0);
		private final Assignment cMobileAssignment_1_0_0_0_0_0 = (Assignment)cAlternatives_1_0_0_0_0.eContents().get(0);
		private final Keyword cMobileMobileKeyword_1_0_0_0_0_0_0 = (Keyword)cMobileAssignment_1_0_0_0_0_0.eContents().get(0);
		private final Assignment cDesktopAssignment_1_0_0_0_0_1 = (Assignment)cAlternatives_1_0_0_0_0.eContents().get(1);
		private final Keyword cDesktopDesktopKeyword_1_0_0_0_0_1_0 = (Keyword)cDesktopAssignment_1_0_0_0_0_1.eContents().get(0);
		private final Assignment cWebAssignment_1_0_0_0_0_2 = (Assignment)cAlternatives_1_0_0_0_0.eContents().get(2);
		private final Keyword cWebWebKeyword_1_0_0_0_0_2_0 = (Keyword)cWebAssignment_1_0_0_0_0_2.eContents().get(0);
		private final Assignment cAppAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cAppAppKeyword_1_0_0_0_1_0 = (Keyword)cAppAssignment_1_0_0_0_1.eContents().get(0);
		private final Assignment cAppAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cAppJobKeyword_1_0_0_1_0 = (Keyword)cAppAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cTestAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cTestTestcaseKeyword_1_0_1_0 = (Keyword)cTestAssignment_1_0_1.eContents().get(0);
		private final Assignment cComponentAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cComponentComponentKeyword_1_0_2_0 = (Keyword)cComponentAssignment_1_0_2.eContents().get(0);
		private final Assignment cUserAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final Keyword cUserUserKeyword_1_0_3_0 = (Keyword)cUserAssignment_1_0_3.eContents().get(0);
		private final Assignment cLibraryAssignment_1_0_4 = (Assignment)cAlternatives_1_0.eContents().get(4);
		private final Alternatives cLibraryAlternatives_1_0_4_0 = (Alternatives)cLibraryAssignment_1_0_4.eContents().get(0);
		private final Keyword cLibraryTraitKeyword_1_0_4_0_0 = (Keyword)cLibraryAlternatives_1_0_4_0.eContents().get(0);
		private final Keyword cLibraryLibraryKeyword_1_0_4_0_1 = (Keyword)cLibraryAlternatives_1_0_4_0.eContents().get(1);
		private final Assignment cBehaviorAssignment_1_0_5 = (Assignment)cAlternatives_1_0.eContents().get(5);
		private final Alternatives cBehaviorAlternatives_1_0_5_0 = (Alternatives)cBehaviorAssignment_1_0_5.eContents().get(0);
		private final Keyword cBehaviorBehaviorKeyword_1_0_5_0_0 = (Keyword)cBehaviorAlternatives_1_0_5_0.eContents().get(0);
		private final Keyword cBehaviorBehaviourKeyword_1_0_5_0_1 = (Keyword)cBehaviorAlternatives_1_0_5_0.eContents().get(1);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamePathNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cImportKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cImportsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cImportsPathNameParserRuleCall_3_0_1_0 = (RuleCall)cImportsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cImportsAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cImportsPathNameParserRuleCall_3_0_2_1_0 = (RuleCall)cImportsAssignment_3_0_2_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cWorldviewKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cWorldviewAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cWorldviewPathNameParserRuleCall_3_1_1_0 = (RuleCall)cWorldviewAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cObservableKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_2_1 = (Alternatives)cGroup_3_2.eContents().get(1);
		private final Assignment cObservableAssignment_3_2_1_0 = (Assignment)cAlternatives_3_2_1.eContents().get(0);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_3_2_1_0_0 = (RuleCall)cObservableAssignment_3_2_1_0.eContents().get(0);
		private final Assignment cObservablesAssignment_3_2_1_1 = (Assignment)cAlternatives_3_2_1.eContents().get(1);
		private final RuleCall cObservablesListParserRuleCall_3_2_1_1_0 = (RuleCall)cObservablesAssignment_3_2_1_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cDescriptionAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cPermissionsKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cPermissionsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cPermissionsSTRINGTerminalRuleCall_3_4_1_0 = (RuleCall)cPermissionsAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cAuthorKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cAuthorsAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cAuthorsSTRINGTerminalRuleCall_3_5_1_0 = (RuleCall)cAuthorsAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cStyleKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cStyleAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cStylePathNameParserRuleCall_3_6_1_0 = (RuleCall)cStyleAssignment_3_6_1.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cLogoKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cLogoAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final Alternatives cLogoAlternatives_3_7_1_0 = (Alternatives)cLogoAssignment_3_7_1.eContents().get(0);
		private final RuleCall cLogoPathParserRuleCall_3_7_1_0_0 = (RuleCall)cLogoAlternatives_3_7_1_0.eContents().get(0);
		private final RuleCall cLogoSTRINGTerminalRuleCall_3_7_1_0_1 = (RuleCall)cLogoAlternatives_3_7_1_0.eContents().get(1);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cVersionKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Assignment cVersionAssignment_3_8_1 = (Assignment)cGroup_3_8.eContents().get(1);
		private final RuleCall cVersionVersionNumberParserRuleCall_3_8_1_0 = (RuleCall)cVersionAssignment_3_8_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cCreatedKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Assignment cCreatedAssignment_3_9_1 = (Assignment)cGroup_3_9.eContents().get(1);
		private final RuleCall cCreatedDateParserRuleCall_3_9_1_0 = (RuleCall)cCreatedAssignment_3_9_1.eContents().get(0);
		private final Assignment cCreatecommentAssignment_3_9_2 = (Assignment)cGroup_3_9.eContents().get(2);
		private final RuleCall cCreatecommentSTRINGTerminalRuleCall_3_9_2_0 = (RuleCall)cCreatecommentAssignment_3_9_2.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cModifiedKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Assignment cModifiedAssignment_3_10_1 = (Assignment)cGroup_3_10.eContents().get(1);
		private final RuleCall cModifiedDateParserRuleCall_3_10_1_0 = (RuleCall)cModifiedAssignment_3_10_1.eContents().get(0);
		private final Assignment cModcommentAssignment_3_10_2 = (Assignment)cGroup_3_10.eContents().get(2);
		private final RuleCall cModcommentSTRINGTerminalRuleCall_3_10_2_0 = (RuleCall)cModcommentAssignment_3_10_2.eContents().get(0);
		
		//Preamble:
		//	{Preamble} ((((mobile?='mobile' | desktop?='desktop' | web?='web')? app?='app' | app?='job') | test?='testcase' |
		//	component?='component' | user?='user' | library?=('trait' | 'library') | behavior?=('behavior' | 'behaviour'))
		//	name=PathName)?
		//	label=STRING? (('import' imports+=PathName (',' imports+=PathName)*)? & ('worldview' worldview=PathName)? &
		//	('observable' (observable=OBSERVABLE | observables=List))? & ('description' description=STRING)? & ('permissions'
		//	permissions=STRING)? & ('author' authors+=STRING)* & ('style' style=PathName)? & ('logo' logo=(Path | STRING))? &
		//	('version' version=VersionNumber)? & ('created' created=Date createcomment=STRING?)? & ('modified' modified=Date
		//	modcomment=STRING?)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{Preamble} ((((mobile?='mobile' | desktop?='desktop' | web?='web')? app?='app' | app?='job') | test?='testcase' |
		//component?='component' | user?='user' | library?=('trait' | 'library') | behavior?=('behavior' | 'behaviour'))
		//name=PathName)? label=STRING? (('import' imports+=PathName (',' imports+=PathName)*)? & ('worldview'
		//worldview=PathName)? & ('observable' (observable=OBSERVABLE | observables=List))? & ('description'
		//description=STRING)? & ('permissions' permissions=STRING)? & ('author' authors+=STRING)* & ('style' style=PathName)? &
		//('logo' logo=(Path | STRING))? & ('version' version=VersionNumber)? & ('created' created=Date createcomment=STRING?)?
		//& ('modified' modified=Date modcomment=STRING?)?)
		public Group getGroup() { return cGroup; }
		
		//{Preamble}
		public Action getPreambleAction_0() { return cPreambleAction_0; }
		
		//((((mobile?='mobile' | desktop?='desktop' | web?='web')? app?='app' | app?='job') | test?='testcase' |
		//component?='component' | user?='user' | library?=('trait' | 'library') | behavior?=('behavior' | 'behaviour'))
		//name=PathName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(((mobile?='mobile' | desktop?='desktop' | web?='web')? app?='app' | app?='job') | test?='testcase' |
		//component?='component' | user?='user' | library?=('trait' | 'library') | behavior?=('behavior' | 'behaviour'))
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//((mobile?='mobile' | desktop?='desktop' | web?='web')? app?='app' | app?='job')
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//(mobile?='mobile' | desktop?='desktop' | web?='web')? app?='app'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//(mobile?='mobile' | desktop?='desktop' | web?='web')?
		public Alternatives getAlternatives_1_0_0_0_0() { return cAlternatives_1_0_0_0_0; }
		
		//mobile?='mobile'
		public Assignment getMobileAssignment_1_0_0_0_0_0() { return cMobileAssignment_1_0_0_0_0_0; }
		
		//'mobile'
		public Keyword getMobileMobileKeyword_1_0_0_0_0_0_0() { return cMobileMobileKeyword_1_0_0_0_0_0_0; }
		
		//desktop?='desktop'
		public Assignment getDesktopAssignment_1_0_0_0_0_1() { return cDesktopAssignment_1_0_0_0_0_1; }
		
		//'desktop'
		public Keyword getDesktopDesktopKeyword_1_0_0_0_0_1_0() { return cDesktopDesktopKeyword_1_0_0_0_0_1_0; }
		
		//web?='web'
		public Assignment getWebAssignment_1_0_0_0_0_2() { return cWebAssignment_1_0_0_0_0_2; }
		
		//'web'
		public Keyword getWebWebKeyword_1_0_0_0_0_2_0() { return cWebWebKeyword_1_0_0_0_0_2_0; }
		
		//app?='app'
		public Assignment getAppAssignment_1_0_0_0_1() { return cAppAssignment_1_0_0_0_1; }
		
		//'app'
		public Keyword getAppAppKeyword_1_0_0_0_1_0() { return cAppAppKeyword_1_0_0_0_1_0; }
		
		//app?='job'
		public Assignment getAppAssignment_1_0_0_1() { return cAppAssignment_1_0_0_1; }
		
		//'job'
		public Keyword getAppJobKeyword_1_0_0_1_0() { return cAppJobKeyword_1_0_0_1_0; }
		
		//test?='testcase'
		public Assignment getTestAssignment_1_0_1() { return cTestAssignment_1_0_1; }
		
		//'testcase'
		public Keyword getTestTestcaseKeyword_1_0_1_0() { return cTestTestcaseKeyword_1_0_1_0; }
		
		//component?='component'
		public Assignment getComponentAssignment_1_0_2() { return cComponentAssignment_1_0_2; }
		
		//'component'
		public Keyword getComponentComponentKeyword_1_0_2_0() { return cComponentComponentKeyword_1_0_2_0; }
		
		//user?='user'
		public Assignment getUserAssignment_1_0_3() { return cUserAssignment_1_0_3; }
		
		//'user'
		public Keyword getUserUserKeyword_1_0_3_0() { return cUserUserKeyword_1_0_3_0; }
		
		//library?=('trait' | 'library')
		public Assignment getLibraryAssignment_1_0_4() { return cLibraryAssignment_1_0_4; }
		
		//('trait' | 'library')
		public Alternatives getLibraryAlternatives_1_0_4_0() { return cLibraryAlternatives_1_0_4_0; }
		
		//'trait'
		public Keyword getLibraryTraitKeyword_1_0_4_0_0() { return cLibraryTraitKeyword_1_0_4_0_0; }
		
		//'library'
		public Keyword getLibraryLibraryKeyword_1_0_4_0_1() { return cLibraryLibraryKeyword_1_0_4_0_1; }
		
		//behavior?=('behavior' | 'behaviour')
		public Assignment getBehaviorAssignment_1_0_5() { return cBehaviorAssignment_1_0_5; }
		
		//('behavior' | 'behaviour')
		public Alternatives getBehaviorAlternatives_1_0_5_0() { return cBehaviorAlternatives_1_0_5_0; }
		
		//'behavior'
		public Keyword getBehaviorBehaviorKeyword_1_0_5_0_0() { return cBehaviorBehaviorKeyword_1_0_5_0_0; }
		
		//'behaviour'
		public Keyword getBehaviorBehaviourKeyword_1_0_5_0_1() { return cBehaviorBehaviourKeyword_1_0_5_0_1; }
		
		//name=PathName
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_1_1_0() { return cNamePathNameParserRuleCall_1_1_0; }
		
		//label=STRING?
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }
		
		//(('import' imports+=PathName (',' imports+=PathName)*)? & ('worldview' worldview=PathName)? & ('observable'
		//(observable=OBSERVABLE | observables=List))? & ('description' description=STRING)? & ('permissions'
		//permissions=STRING)? & ('author' authors+=STRING)* & ('style' style=PathName)? & ('logo' logo=(Path | STRING))? &
		//('version' version=VersionNumber)? & ('created' created=Date createcomment=STRING?)? & ('modified' modified=Date
		//modcomment=STRING?)?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('import' imports+=PathName (',' imports+=PathName)*)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'import'
		public Keyword getImportKeyword_3_0_0() { return cImportKeyword_3_0_0; }
		
		//imports+=PathName
		public Assignment getImportsAssignment_3_0_1() { return cImportsAssignment_3_0_1; }
		
		//PathName
		public RuleCall getImportsPathNameParserRuleCall_3_0_1_0() { return cImportsPathNameParserRuleCall_3_0_1_0; }
		
		//(',' imports+=PathName)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }
		
		//imports+=PathName
		public Assignment getImportsAssignment_3_0_2_1() { return cImportsAssignment_3_0_2_1; }
		
		//PathName
		public RuleCall getImportsPathNameParserRuleCall_3_0_2_1_0() { return cImportsPathNameParserRuleCall_3_0_2_1_0; }
		
		//('worldview' worldview=PathName)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'worldview'
		public Keyword getWorldviewKeyword_3_1_0() { return cWorldviewKeyword_3_1_0; }
		
		//worldview=PathName
		public Assignment getWorldviewAssignment_3_1_1() { return cWorldviewAssignment_3_1_1; }
		
		//PathName
		public RuleCall getWorldviewPathNameParserRuleCall_3_1_1_0() { return cWorldviewPathNameParserRuleCall_3_1_1_0; }
		
		//('observable' (observable=OBSERVABLE | observables=List))?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'observable'
		public Keyword getObservableKeyword_3_2_0() { return cObservableKeyword_3_2_0; }
		
		//(observable=OBSERVABLE | observables=List)
		public Alternatives getAlternatives_3_2_1() { return cAlternatives_3_2_1; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_3_2_1_0() { return cObservableAssignment_3_2_1_0; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_3_2_1_0_0() { return cObservableOBSERVABLETerminalRuleCall_3_2_1_0_0; }
		
		//observables=List
		public Assignment getObservablesAssignment_3_2_1_1() { return cObservablesAssignment_3_2_1_1; }
		
		//List
		public RuleCall getObservablesListParserRuleCall_3_2_1_1_0() { return cObservablesListParserRuleCall_3_2_1_1_0; }
		
		//('description' description=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_3_0() { return cDescriptionKeyword_3_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_3_1() { return cDescriptionAssignment_3_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_3_1_0; }
		
		//('permissions' permissions=STRING)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'permissions'
		public Keyword getPermissionsKeyword_3_4_0() { return cPermissionsKeyword_3_4_0; }
		
		//permissions=STRING
		public Assignment getPermissionsAssignment_3_4_1() { return cPermissionsAssignment_3_4_1; }
		
		//STRING
		public RuleCall getPermissionsSTRINGTerminalRuleCall_3_4_1_0() { return cPermissionsSTRINGTerminalRuleCall_3_4_1_0; }
		
		//('author' authors+=STRING)*
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'author'
		public Keyword getAuthorKeyword_3_5_0() { return cAuthorKeyword_3_5_0; }
		
		//authors+=STRING
		public Assignment getAuthorsAssignment_3_5_1() { return cAuthorsAssignment_3_5_1; }
		
		//STRING
		public RuleCall getAuthorsSTRINGTerminalRuleCall_3_5_1_0() { return cAuthorsSTRINGTerminalRuleCall_3_5_1_0; }
		
		//('style' style=PathName)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'style'
		public Keyword getStyleKeyword_3_6_0() { return cStyleKeyword_3_6_0; }
		
		//style=PathName
		public Assignment getStyleAssignment_3_6_1() { return cStyleAssignment_3_6_1; }
		
		//PathName
		public RuleCall getStylePathNameParserRuleCall_3_6_1_0() { return cStylePathNameParserRuleCall_3_6_1_0; }
		
		//('logo' logo=(Path | STRING))?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'logo'
		public Keyword getLogoKeyword_3_7_0() { return cLogoKeyword_3_7_0; }
		
		//logo=(Path | STRING)
		public Assignment getLogoAssignment_3_7_1() { return cLogoAssignment_3_7_1; }
		
		//(Path | STRING)
		public Alternatives getLogoAlternatives_3_7_1_0() { return cLogoAlternatives_3_7_1_0; }
		
		//Path
		public RuleCall getLogoPathParserRuleCall_3_7_1_0_0() { return cLogoPathParserRuleCall_3_7_1_0_0; }
		
		//STRING
		public RuleCall getLogoSTRINGTerminalRuleCall_3_7_1_0_1() { return cLogoSTRINGTerminalRuleCall_3_7_1_0_1; }
		
		//('version' version=VersionNumber)?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//'version'
		public Keyword getVersionKeyword_3_8_0() { return cVersionKeyword_3_8_0; }
		
		//version=VersionNumber
		public Assignment getVersionAssignment_3_8_1() { return cVersionAssignment_3_8_1; }
		
		//VersionNumber
		public RuleCall getVersionVersionNumberParserRuleCall_3_8_1_0() { return cVersionVersionNumberParserRuleCall_3_8_1_0; }
		
		//('created' created=Date createcomment=STRING?)?
		public Group getGroup_3_9() { return cGroup_3_9; }
		
		//'created'
		public Keyword getCreatedKeyword_3_9_0() { return cCreatedKeyword_3_9_0; }
		
		//created=Date
		public Assignment getCreatedAssignment_3_9_1() { return cCreatedAssignment_3_9_1; }
		
		//Date
		public RuleCall getCreatedDateParserRuleCall_3_9_1_0() { return cCreatedDateParserRuleCall_3_9_1_0; }
		
		//createcomment=STRING?
		public Assignment getCreatecommentAssignment_3_9_2() { return cCreatecommentAssignment_3_9_2; }
		
		//STRING
		public RuleCall getCreatecommentSTRINGTerminalRuleCall_3_9_2_0() { return cCreatecommentSTRINGTerminalRuleCall_3_9_2_0; }
		
		//('modified' modified=Date modcomment=STRING?)?
		public Group getGroup_3_10() { return cGroup_3_10; }
		
		//'modified'
		public Keyword getModifiedKeyword_3_10_0() { return cModifiedKeyword_3_10_0; }
		
		//modified=Date
		public Assignment getModifiedAssignment_3_10_1() { return cModifiedAssignment_3_10_1; }
		
		//Date
		public RuleCall getModifiedDateParserRuleCall_3_10_1_0() { return cModifiedDateParserRuleCall_3_10_1_0; }
		
		//modcomment=STRING?
		public Assignment getModcommentAssignment_3_10_2() { return cModcommentAssignment_3_10_2; }
		
		//STRING
		public RuleCall getModcommentSTRINGTerminalRuleCall_3_10_2_0() { return cModcommentSTRINGTerminalRuleCall_3_10_2_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsArgumentDeclarationParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyMessageBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		///*
		// *  Action defines an action in the behavior;
		// *  Actor is an action that creates a "peer" actor, which remains alive until stopped 
		// *  and whose "main" is the action body (equivalent to importing another behavior and creating
		// *  the actor using new(behavior);
		// *  Component is an actor that has a view, i.e. can be considered a "widget" with view and
		// *  reactive behavior.
		// * 
		// */ Definition:
		//	annotations+=Annotation*
		//	'action' name=LOWERCASE_ID arguments=ArgumentDeclaration? ':' body=MessageBody;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'action' name=LOWERCASE_ID arguments=ArgumentDeclaration? ':' body=MessageBody
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_2_0() { return cNameLOWERCASE_IDTerminalRuleCall_2_0; }
		
		//arguments=ArgumentDeclaration?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }
		
		//ArgumentDeclaration
		public RuleCall getArgumentsArgumentDeclarationParserRuleCall_3_0() { return cArgumentsArgumentDeclarationParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//body=MessageBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//MessageBody
		public RuleCall getBodyMessageBodyParserRuleCall_5_0() { return cBodyMessageBodyParserRuleCall_5_0; }
	}
	public class ArgumentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ArgumentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArgumentDeclaration:
		//	{ArgumentDeclaration}
		//	'(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgumentDeclaration} '(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ArgumentDeclaration}
		public Action getArgumentDeclarationAction_0() { return cArgumentDeclarationAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ids+=LOWERCASE_ID
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_0_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_0_0; }
		
		//(',' ids+=LOWERCASE_ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//ids+=LOWERCASE_ID
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MessageBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MessageBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMessageBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cListsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListsStatementListParserRuleCall_1_0 = (RuleCall)cListsAssignment_1.eContents().get(0);
		
		///**
		// * Message body is as many statements of groups we want, ends at the next message or EOF.
		// */ MessageBody:
		//	{MessageBody} lists+=StatementList*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MessageBody} lists+=StatementList*
		public Group getGroup() { return cGroup; }
		
		//{MessageBody}
		public Action getMessageBodyAction_0() { return cMessageBodyAction_0; }
		
		//lists+=StatementList*
		public Assignment getListsAssignment_1() { return cListsAssignment_1; }
		
		//StatementList
		public RuleCall getListsStatementListParserRuleCall_1_0() { return cListsStatementListParserRuleCall_1_0; }
	}
	public class ActorInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ActorInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBehaviorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorPathNameParserRuleCall_1_0 = (RuleCall)cBehaviorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_3_1_0 = (RuleCall)cActionsAssignment_3_1.eContents().get(0);
		
		//ActorInstantiation:
		//	'new' behavior=PathName ('(' parameters=ParameterList? ')')? (':' actions=Actions)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'new' behavior=PathName ('(' parameters=ParameterList? ')')? (':' actions=Actions)?
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//behavior=PathName
		public Assignment getBehaviorAssignment_1() { return cBehaviorAssignment_1; }
		
		//PathName
		public RuleCall getBehaviorPathNameParserRuleCall_1_0() { return cBehaviorPathNameParserRuleCall_1_0; }
		
		//('(' parameters=ParameterList? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_1_0() { return cParametersParameterListParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//(':' actions=Actions)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_3_1() { return cActionsAssignment_3_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_3_1_0() { return cActionsActionsParserRuleCall_3_1_0; }
	}
	public class MessageCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MessageCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameArgPathNameParserRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_1_0 = (Keyword)cGroup_0_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_0_0_1_1_0 = (RuleCall)cParametersAssignment_0_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_1_2 = (Keyword)cGroup_0_0_1.eContents().get(2);
		private final Assignment cGroupAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cGroupStatementGroupParserRuleCall_0_1_0 = (RuleCall)cGroupAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		
		//MessageCall:
		//	(name=ArgPathName ('(' parameters=ParameterList? ')')? | group=StatementGroup) (':' actions=Actions)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=ArgPathName ('(' parameters=ParameterList? ')')? | group=StatementGroup) (':' actions=Actions)?
		public Group getGroup() { return cGroup; }
		
		//(name=ArgPathName ('(' parameters=ParameterList? ')')? | group=StatementGroup)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//name=ArgPathName ('(' parameters=ParameterList? ')')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//name=ArgPathName
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }
		
		//ArgPathName
		public RuleCall getNameArgPathNameParserRuleCall_0_0_0_0() { return cNameArgPathNameParserRuleCall_0_0_0_0; }
		
		//('(' parameters=ParameterList? ')')?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1_0() { return cLeftParenthesisKeyword_0_0_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_0_0_1_1() { return cParametersAssignment_0_0_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_0_0_1_1_0() { return cParametersParameterListParserRuleCall_0_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_1_2() { return cRightParenthesisKeyword_0_0_1_2; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_0_1() { return cGroupAssignment_0_1; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_0_1_0() { return cGroupStatementGroupParserRuleCall_0_1_0; }
		
		//(':' actions=Actions)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_1_1_0() { return cActionsActionsParserRuleCall_1_1_0; }
	}
	public class StatementGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.StatementGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyMessageBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMetadataAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMetadataMetadataParserRuleCall_4_0 = (RuleCall)cMetadataAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_5_1_0 = (RuleCall)cActionsAssignment_5_1.eContents().get(0);
		
		//StatementGroup:
		//	{StatementGroup} '(' body=MessageBody? ')' metadata=Metadata? (':' actions=Actions)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementGroup} '(' body=MessageBody? ')' metadata=Metadata? (':' actions=Actions)?
		public Group getGroup() { return cGroup; }
		
		//{StatementGroup}
		public Action getStatementGroupAction_0() { return cStatementGroupAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//body=MessageBody?
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//MessageBody
		public RuleCall getBodyMessageBodyParserRuleCall_2_0() { return cBodyMessageBodyParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//metadata=Metadata?
		public Assignment getMetadataAssignment_4() { return cMetadataAssignment_4; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_4_0() { return cMetadataMetadataParserRuleCall_4_0; }
		
		//(':' actions=Actions)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_5_1() { return cActionsAssignment_5_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_5_1_0() { return cActionsActionsParserRuleCall_5_1_0; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Metadata");
		private final Assignment cPairsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPairsMetadataPairParserRuleCall_0 = (RuleCall)cPairsAssignment.eContents().get(0);
		
		//Metadata:
		//	pairs+=MetadataPair+;
		@Override public ParserRule getRule() { return rule; }
		
		//pairs+=MetadataPair+
		public Assignment getPairsAssignment() { return cPairsAssignment; }
		
		//MetadataPair
		public RuleCall getPairsMetadataPairParserRuleCall_0() { return cPairsMetadataPairParserRuleCall_0; }
	}
	public class MetadataPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MetadataPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyKEYTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MetadataPair:
		//	key=KEY value=Value?;
		@Override public ParserRule getRule() { return rule; }
		
		//key=KEY value=Value?
		public Group getGroup() { return cGroup; }
		
		//key=KEY
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_0_0() { return cKeyKEYTerminalRuleCall_0_0; }
		
		//value=Value?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstStatementParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Assignment cNextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNextNextStatementParserRuleCall_1_0 = (RuleCall)cNextAssignment_1.eContents().get(0);
		
		//StatementList:
		//	first=Statement next+=NextStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//first=Statement next+=NextStatement*
		public Group getGroup() { return cGroup; }
		
		//first=Statement
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//Statement
		public RuleCall getFirstStatementParserRuleCall_0_0() { return cFirstStatementParserRuleCall_0_0; }
		
		//next+=NextStatement*
		public Assignment getNextAssignment_1() { return cNextAssignment_1; }
		
		//NextStatement
		public RuleCall getNextNextStatementParserRuleCall_1_0() { return cNextNextStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAssignmentAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0_0_0 = (RuleCall)cAssignmentAssignment_0_0.eContents().get(0);
		private final Assignment cGroupAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cGroupStatementGroupParserRuleCall_0_1_0 = (RuleCall)cGroupAssignment_0_1.eContents().get(0);
		private final Assignment cInstantiationAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cInstantiationActorInstantiationParserRuleCall_0_2_0 = (RuleCall)cInstantiationAssignment_0_2.eContents().get(0);
		private final Assignment cVerbAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cVerbMessageCallParserRuleCall_0_3_0 = (RuleCall)cVerbAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Assignment cTextAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cTextEMBEDDEDTEXTTerminalRuleCall_0_4_0_0 = (RuleCall)cTextAssignment_0_4_0.eContents().get(0);
		private final Assignment cMetadataAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cMetadataMetadataParserRuleCall_0_4_1_0 = (RuleCall)cMetadataAssignment_0_4_1.eContents().get(0);
		private final Assignment cIfAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cIfIfStatementParserRuleCall_0_5_0 = (RuleCall)cIfAssignment_0_5.eContents().get(0);
		private final Assignment cWhileAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final RuleCall cWhileWhileStatementParserRuleCall_0_6_0 = (RuleCall)cWhileAssignment_0_6.eContents().get(0);
		private final Assignment cDoAssignment_0_7 = (Assignment)cAlternatives_0.eContents().get(7);
		private final RuleCall cDoDoStatementParserRuleCall_0_7_0 = (RuleCall)cDoAssignment_0_7.eContents().get(0);
		private final Assignment cForAssignment_0_8 = (Assignment)cAlternatives_0.eContents().get(8);
		private final RuleCall cForForStatementParserRuleCall_0_8_0 = (RuleCall)cForAssignment_0_8.eContents().get(0);
		private final Assignment cValueAssignment_0_9 = (Assignment)cAlternatives_0.eContents().get(9);
		private final RuleCall cValueValueWithMetadataParserRuleCall_0_9_0 = (RuleCall)cValueAssignment_0_9.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagTAGTerminalRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//Statement:
		//	(assignment=Assignment | group=StatementGroup | instantiation=ActorInstantiation | verb=MessageCall |
		//	text=EMBEDDEDTEXT metadata=Metadata? | if=IfStatement | while=WhileStatement | do=DoStatement | for=ForStatement |
		//	value=ValueWithMetadata) tag=TAG?;
		@Override public ParserRule getRule() { return rule; }
		
		//(assignment=Assignment | group=StatementGroup | instantiation=ActorInstantiation | verb=MessageCall | text=EMBEDDEDTEXT
		//metadata=Metadata? | if=IfStatement | while=WhileStatement | do=DoStatement | for=ForStatement |
		//value=ValueWithMetadata) tag=TAG?
		public Group getGroup() { return cGroup; }
		
		//(assignment=Assignment | group=StatementGroup | instantiation=ActorInstantiation | verb=MessageCall | text=EMBEDDEDTEXT
		//metadata=Metadata? | if=IfStatement | while=WhileStatement | do=DoStatement | for=ForStatement |
		//value=ValueWithMetadata)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_0_0() { return cAssignmentAssignment_0_0; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0_0_0() { return cAssignmentAssignmentParserRuleCall_0_0_0; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_0_1() { return cGroupAssignment_0_1; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_0_1_0() { return cGroupStatementGroupParserRuleCall_0_1_0; }
		
		//instantiation=ActorInstantiation
		public Assignment getInstantiationAssignment_0_2() { return cInstantiationAssignment_0_2; }
		
		//ActorInstantiation
		public RuleCall getInstantiationActorInstantiationParserRuleCall_0_2_0() { return cInstantiationActorInstantiationParserRuleCall_0_2_0; }
		
		//verb=MessageCall
		public Assignment getVerbAssignment_0_3() { return cVerbAssignment_0_3; }
		
		//MessageCall
		public RuleCall getVerbMessageCallParserRuleCall_0_3_0() { return cVerbMessageCallParserRuleCall_0_3_0; }
		
		//text=EMBEDDEDTEXT metadata=Metadata?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//text=EMBEDDEDTEXT
		public Assignment getTextAssignment_0_4_0() { return cTextAssignment_0_4_0; }
		
		//EMBEDDEDTEXT
		public RuleCall getTextEMBEDDEDTEXTTerminalRuleCall_0_4_0_0() { return cTextEMBEDDEDTEXTTerminalRuleCall_0_4_0_0; }
		
		//metadata=Metadata?
		public Assignment getMetadataAssignment_0_4_1() { return cMetadataAssignment_0_4_1; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_0_4_1_0() { return cMetadataMetadataParserRuleCall_0_4_1_0; }
		
		//if=IfStatement
		public Assignment getIfAssignment_0_5() { return cIfAssignment_0_5; }
		
		//IfStatement
		public RuleCall getIfIfStatementParserRuleCall_0_5_0() { return cIfIfStatementParserRuleCall_0_5_0; }
		
		//while=WhileStatement
		public Assignment getWhileAssignment_0_6() { return cWhileAssignment_0_6; }
		
		//WhileStatement
		public RuleCall getWhileWhileStatementParserRuleCall_0_6_0() { return cWhileWhileStatementParserRuleCall_0_6_0; }
		
		//do=DoStatement
		public Assignment getDoAssignment_0_7() { return cDoAssignment_0_7; }
		
		//DoStatement
		public RuleCall getDoDoStatementParserRuleCall_0_7_0() { return cDoDoStatementParserRuleCall_0_7_0; }
		
		//for=ForStatement
		public Assignment getForAssignment_0_8() { return cForAssignment_0_8; }
		
		//ForStatement
		public RuleCall getForForStatementParserRuleCall_0_8_0() { return cForForStatementParserRuleCall_0_8_0; }
		
		//// this means "fire this" 
		//value=ValueWithMetadata
		public Assignment getValueAssignment_0_9() { return cValueAssignment_0_9; }
		
		//ValueWithMetadata
		public RuleCall getValueValueWithMetadataParserRuleCall_0_9_0() { return cValueValueWithMetadataParserRuleCall_0_9_0; }
		
		//// all statement may be tagged for reference
		//tag=TAG?
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//TAG
		public RuleCall getTagTAGTerminalRuleCall_1_0() { return cTagTAGTerminalRuleCall_1_0; }
	}
	public class NextStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.NextStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParserRuleCall_1_0_0 = (RuleCall)cAssignmentAssignment_1_0.eContents().get(0);
		private final Assignment cVerbAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVerbMessageCallParserRuleCall_1_1_0 = (RuleCall)cVerbAssignment_1_1.eContents().get(0);
		private final Assignment cGroupAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cGroupStatementGroupParserRuleCall_1_2_0 = (RuleCall)cGroupAssignment_1_2.eContents().get(0);
		private final Assignment cTextAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cTextEMBEDDEDTEXTTerminalRuleCall_1_3_0 = (RuleCall)cTextAssignment_1_3.eContents().get(0);
		private final Assignment cIfAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cIfIfStatementParserRuleCall_1_4_0 = (RuleCall)cIfAssignment_1_4.eContents().get(0);
		private final Assignment cWhileAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cWhileWhileStatementParserRuleCall_1_5_0 = (RuleCall)cWhileAssignment_1_5.eContents().get(0);
		private final Assignment cDoAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cDoDoStatementParserRuleCall_1_6_0 = (RuleCall)cDoAssignment_1_6.eContents().get(0);
		private final Assignment cForAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cForForStatementParserRuleCall_1_7_0 = (RuleCall)cForAssignment_1_7.eContents().get(0);
		private final Assignment cValueAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cValueValueWithMetadataParserRuleCall_1_8_0 = (RuleCall)cValueAssignment_1_8.eContents().get(0);
		private final Assignment cTagAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagTAGTerminalRuleCall_2_0 = (RuleCall)cTagAssignment_2.eContents().get(0);
		
		//NextStatement Statement:
		//	',' (assignment=Assignment | verb=MessageCall | group=StatementGroup | text=EMBEDDEDTEXT | if=IfStatement |
		//	while=WhileStatement | do=DoStatement | for=ForStatement | value=ValueWithMetadata) tag=TAG?;
		@Override public ParserRule getRule() { return rule; }
		
		//',' (assignment=Assignment | verb=MessageCall | group=StatementGroup | text=EMBEDDEDTEXT | if=IfStatement |
		//while=WhileStatement | do=DoStatement | for=ForStatement | value=ValueWithMetadata) tag=TAG?
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//(assignment=Assignment | verb=MessageCall | group=StatementGroup | text=EMBEDDEDTEXT | if=IfStatement |
		//while=WhileStatement | do=DoStatement | for=ForStatement | value=ValueWithMetadata)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//assignment=Assignment
		public Assignment getAssignmentAssignment_1_0() { return cAssignmentAssignment_1_0; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_1_0_0() { return cAssignmentAssignmentParserRuleCall_1_0_0; }
		
		//verb=MessageCall
		public Assignment getVerbAssignment_1_1() { return cVerbAssignment_1_1; }
		
		//MessageCall
		public RuleCall getVerbMessageCallParserRuleCall_1_1_0() { return cVerbMessageCallParserRuleCall_1_1_0; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_1_2() { return cGroupAssignment_1_2; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_1_2_0() { return cGroupStatementGroupParserRuleCall_1_2_0; }
		
		//text=EMBEDDEDTEXT
		public Assignment getTextAssignment_1_3() { return cTextAssignment_1_3; }
		
		//EMBEDDEDTEXT
		public RuleCall getTextEMBEDDEDTEXTTerminalRuleCall_1_3_0() { return cTextEMBEDDEDTEXTTerminalRuleCall_1_3_0; }
		
		//if=IfStatement
		public Assignment getIfAssignment_1_4() { return cIfAssignment_1_4; }
		
		//IfStatement
		public RuleCall getIfIfStatementParserRuleCall_1_4_0() { return cIfIfStatementParserRuleCall_1_4_0; }
		
		//while=WhileStatement
		public Assignment getWhileAssignment_1_5() { return cWhileAssignment_1_5; }
		
		//WhileStatement
		public RuleCall getWhileWhileStatementParserRuleCall_1_5_0() { return cWhileWhileStatementParserRuleCall_1_5_0; }
		
		//do=DoStatement
		public Assignment getDoAssignment_1_6() { return cDoAssignment_1_6; }
		
		//DoStatement
		public RuleCall getDoDoStatementParserRuleCall_1_6_0() { return cDoDoStatementParserRuleCall_1_6_0; }
		
		//for=ForStatement
		public Assignment getForAssignment_1_7() { return cForAssignment_1_7; }
		
		//ForStatement
		public RuleCall getForForStatementParserRuleCall_1_7_0() { return cForForStatementParserRuleCall_1_7_0; }
		
		//// this means "fire this" 
		//value=ValueWithMetadata
		public Assignment getValueAssignment_1_8() { return cValueAssignment_1_8; }
		
		//ValueWithMetadata
		public RuleCall getValueValueWithMetadataParserRuleCall_1_8_0() { return cValueValueWithMetadataParserRuleCall_1_8_0; }
		
		//// all statement may be tagged for reference
		//tag=TAG?
		public Assignment getTagAssignment_2() { return cTagAssignment_2; }
		
		//TAG
		public RuleCall getTagTAGTerminalRuleCall_2_0() { return cTagTAGTerminalRuleCall_2_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLOWERCASE_IDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	'set' variable=LOWERCASE_ID value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' variable=LOWERCASE_ID value=Value
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//variable=LOWERCASE_ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//LOWERCASE_ID
		public RuleCall getVariableLOWERCASE_IDTerminalRuleCall_1_0() { return cVariableLOWERCASE_IDTerminalRuleCall_1_0; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cIfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cElseIfExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElseIfExpressionEXPRTerminalRuleCall_3_2_0 = (RuleCall)cElseIfExpressionAssignment_3_2.eContents().get(0);
		private final Assignment cElseIfBodyAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cElseIfBodyStatementBodyParserRuleCall_3_3_0 = (RuleCall)cElseIfBodyAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseCallAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseCallStatementBodyParserRuleCall_4_1_0 = (RuleCall)cElseCallAssignment_4_1.eContents().get(0);
		
		//IfStatement:
		//	'if' expression=EXPR body=StatementBody ('else' 'if' elseIfExpression+=EXPR elseIfBody+=StatementBody)* ('else'
		//	elseCall=StatementBody)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expression=EXPR body=StatementBody ('else' 'if' elseIfExpression+=EXPR elseIfBody+=StatementBody)* ('else'
		//elseCall=StatementBody)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_0() { return cExpressionEXPRTerminalRuleCall_1_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_2_0() { return cBodyStatementBodyParserRuleCall_2_0; }
		
		//('else' 'if' elseIfExpression+=EXPR elseIfBody+=StatementBody)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//'if'
		public Keyword getIfKeyword_3_1() { return cIfKeyword_3_1; }
		
		//elseIfExpression+=EXPR
		public Assignment getElseIfExpressionAssignment_3_2() { return cElseIfExpressionAssignment_3_2; }
		
		//EXPR
		public RuleCall getElseIfExpressionEXPRTerminalRuleCall_3_2_0() { return cElseIfExpressionEXPRTerminalRuleCall_3_2_0; }
		
		//elseIfBody+=StatementBody
		public Assignment getElseIfBodyAssignment_3_3() { return cElseIfBodyAssignment_3_3; }
		
		//StatementBody
		public RuleCall getElseIfBodyStatementBodyParserRuleCall_3_3_0() { return cElseIfBodyStatementBodyParserRuleCall_3_3_0; }
		
		//('else' elseCall=StatementBody)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseCall=StatementBody
		public Assignment getElseCallAssignment_4_1() { return cElseCallAssignment_4_1; }
		
		//StatementBody
		public RuleCall getElseCallStatementBodyParserRuleCall_4_1_0() { return cElseCallStatementBodyParserRuleCall_4_1_0; }
	}
	public class StatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.StatementBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVerbMessageCallParserRuleCall_0_0 = (RuleCall)cVerbAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cGroupAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGroupStatementGroupParserRuleCall_2_0 = (RuleCall)cGroupAssignment_2.eContents().get(0);
		
		///** 
		// * Body of a statement is either a single message call (or fired value) or a set thereof in a group.
		// * */ StatementBody:
		//	verb=MessageCall | value=Value | group=StatementGroup;
		@Override public ParserRule getRule() { return rule; }
		
		//verb=MessageCall | value=Value | group=StatementGroup
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//verb=MessageCall
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//MessageCall
		public RuleCall getVerbMessageCallParserRuleCall_0_0() { return cVerbMessageCallParserRuleCall_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
		
		//group=StatementGroup
		public Assignment getGroupAssignment_2() { return cGroupAssignment_2; }
		
		//StatementGroup
		public RuleCall getGroupStatementGroupParserRuleCall_2_0() { return cGroupStatementGroupParserRuleCall_2_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//WhileStatement:
		//	'while' expression=EXPR body=StatementBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' expression=EXPR body=StatementBody
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_0() { return cExpressionEXPRTerminalRuleCall_1_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_2_0() { return cBodyStatementBodyParserRuleCall_2_0; }
	}
	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionEXPRTerminalRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//DoStatement:
		//	'do' body=StatementBody 'while' expression=EXPR;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' body=StatementBody 'while' expression=EXPR
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_1_0() { return cBodyStatementBodyParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_3_0() { return cExpressionEXPRTerminalRuleCall_3_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cInKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//ForStatement:
		//	'for' (id=LOWERCASE_ID 'in')? value=Value body=StatementBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' (id=LOWERCASE_ID 'in')? value=Value body=StatementBody
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(id=LOWERCASE_ID 'in')?
		public Group getGroup_1() { return cGroup_1; }
		
		//id=LOWERCASE_ID
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_1_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_1_0_0; }
		
		//'in'
		public Keyword getInKeyword_1_1() { return cInKeyword_1_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
		
		//body=StatementBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//StatementBody
		public RuleCall getBodyStatementBodyParserRuleCall_3_0() { return cBodyStatementBodyParserRuleCall_3_0; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMatchAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMatchMatchParserRuleCall_0_0 = (RuleCall)cMatchAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMatchesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMatchesMatchParserRuleCall_1_1_0 = (RuleCall)cMatchesAssignment_1_1.eContents().get(0);
		private final Assignment cMatchesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMatchesMatchParserRuleCall_1_2_0 = (RuleCall)cMatchesAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsStatementListParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// a sequence of actions after a verb is sequential only if comma-separated. No match mean
		//// "upon successful firing" (i.e. firing not null, false or error).
		//// Don't switch the order or firing statements will take over the matches and not parse
		//Actions:
		//	match=Match |
		//	'(' matches+=Match matches+=Match* ')' | statement=Statement |
		//	'(' statements=StatementList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//match=Match | '(' matches+=Match matches+=Match* ')' | statement=Statement | '(' statements=StatementList ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//match=Match
		public Assignment getMatchAssignment_0() { return cMatchAssignment_0; }
		
		//Match
		public RuleCall getMatchMatchParserRuleCall_0_0() { return cMatchMatchParserRuleCall_0_0; }
		
		//'(' matches+=Match matches+=Match* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//matches+=Match
		public Assignment getMatchesAssignment_1_1() { return cMatchesAssignment_1_1; }
		
		//Match
		public RuleCall getMatchesMatchParserRuleCall_1_1_0() { return cMatchesMatchParserRuleCall_1_1_0; }
		
		//matches+=Match*
		public Assignment getMatchesAssignment_1_2() { return cMatchesAssignment_1_2; }
		
		//Match
		public RuleCall getMatchesMatchParserRuleCall_1_2_0() { return cMatchesMatchParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
		
		//'(' statements=StatementList ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//statements=StatementList
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }
		
		//StatementList
		public RuleCall getStatementsStatementListParserRuleCall_3_1_0() { return cStatementsStatementListParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTreeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTreeTreeParserRuleCall_0_0 = (RuleCall)cTreeAssignment_0.eContents().get(0);
		private final Assignment cArgvalueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_1_0 = (RuleCall)cArgvalueAssignment_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralLiteralParserRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		private final Assignment cUrnAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cUrnUrnIdParserRuleCall_3_0 = (RuleCall)cUrnAssignment_3.eContents().get(0);
		private final Assignment cIdAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIdPathNameParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cListAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cListListParserRuleCall_5_0 = (RuleCall)cListAssignment_5.eContents().get(0);
		private final Assignment cMapAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cMapMapParserRuleCall_6_0 = (RuleCall)cMapAssignment_6.eContents().get(0);
		private final Assignment cObservableAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_7_0 = (RuleCall)cObservableAssignment_7.eContents().get(0);
		private final Assignment cExpressionAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cExpressionEXPRTerminalRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		private final Assignment cTableAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cTableLookupTableParserRuleCall_9_0 = (RuleCall)cTableAssignment_9.eContents().get(0);
		private final Assignment cQuantityAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cQuantityQuantityParserRuleCall_10_0 = (RuleCall)cQuantityAssignment_10.eContents().get(0);
		
		//Value:
		//	tree=Tree | argvalue=ARGVALUE | literal=Literal | urn=UrnId | id=PathName | list=List | map=Map |
		//	observable=OBSERVABLE | expression=EXPR | table=LookupTable | quantity=Quantity;
		@Override public ParserRule getRule() { return rule; }
		
		//tree=Tree | argvalue=ARGVALUE | literal=Literal | urn=UrnId | id=PathName | list=List | map=Map | observable=OBSERVABLE
		//| expression=EXPR | table=LookupTable | quantity=Quantity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tree=Tree
		public Assignment getTreeAssignment_0() { return cTreeAssignment_0; }
		
		//Tree
		public RuleCall getTreeTreeParserRuleCall_0_0() { return cTreeTreeParserRuleCall_0_0; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_1() { return cArgvalueAssignment_1; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_1_0() { return cArgvalueARGVALUETerminalRuleCall_1_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_2_0() { return cLiteralLiteralParserRuleCall_2_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_3() { return cUrnAssignment_3; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_3_0() { return cUrnUrnIdParserRuleCall_3_0; }
		
		//id=PathName
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_4_0() { return cIdPathNameParserRuleCall_4_0; }
		
		//list=List
		public Assignment getListAssignment_5() { return cListAssignment_5; }
		
		//List
		public RuleCall getListListParserRuleCall_5_0() { return cListListParserRuleCall_5_0; }
		
		//map=Map
		public Assignment getMapAssignment_6() { return cMapAssignment_6; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_6_0() { return cMapMapParserRuleCall_6_0; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_7() { return cObservableAssignment_7; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_7_0() { return cObservableOBSERVABLETerminalRuleCall_7_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_8_0() { return cExpressionEXPRTerminalRuleCall_8_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_9() { return cTableAssignment_9; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_9_0() { return cTableLookupTableParserRuleCall_9_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_10() { return cQuantityAssignment_10; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_10_0() { return cQuantityQuantityParserRuleCall_10_0; }
	}
	public class ValueWithMetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ValueWithMetadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTreeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTreeTreeParserRuleCall_0_0_0 = (RuleCall)cTreeAssignment_0_0.eContents().get(0);
		private final Assignment cArgvalueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_0_1_0 = (RuleCall)cArgvalueAssignment_0_1.eContents().get(0);
		private final Assignment cLiteralAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cLiteralLiteralParserRuleCall_0_2_0 = (RuleCall)cLiteralAssignment_0_2.eContents().get(0);
		private final Assignment cUrnAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cUrnUrnIdParserRuleCall_0_3_0 = (RuleCall)cUrnAssignment_0_3.eContents().get(0);
		private final Assignment cIdAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cIdPathNameParserRuleCall_0_4_0 = (RuleCall)cIdAssignment_0_4.eContents().get(0);
		private final Assignment cListAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cListListParserRuleCall_0_5_0 = (RuleCall)cListAssignment_0_5.eContents().get(0);
		private final Assignment cMapAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final RuleCall cMapMapParserRuleCall_0_6_0 = (RuleCall)cMapAssignment_0_6.eContents().get(0);
		private final Assignment cObservableAssignment_0_7 = (Assignment)cAlternatives_0.eContents().get(7);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_0_7_0 = (RuleCall)cObservableAssignment_0_7.eContents().get(0);
		private final Assignment cExpressionAssignment_0_8 = (Assignment)cAlternatives_0.eContents().get(8);
		private final RuleCall cExpressionEXPRTerminalRuleCall_0_8_0 = (RuleCall)cExpressionAssignment_0_8.eContents().get(0);
		private final Assignment cTableAssignment_0_9 = (Assignment)cAlternatives_0.eContents().get(9);
		private final RuleCall cTableLookupTableParserRuleCall_0_9_0 = (RuleCall)cTableAssignment_0_9.eContents().get(0);
		private final Assignment cQuantityAssignment_0_10 = (Assignment)cAlternatives_0.eContents().get(10);
		private final RuleCall cQuantityQuantityParserRuleCall_0_10_0 = (RuleCall)cQuantityAssignment_0_10.eContents().get(0);
		private final Assignment cMetadataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetadataMetadataParserRuleCall_1_0 = (RuleCall)cMetadataAssignment_1.eContents().get(0);
		
		//ValueWithMetadata Value:
		//	(tree=Tree | argvalue=ARGVALUE | literal=Literal | urn=UrnId | id=PathName | list=List | map=Map |
		//	observable=OBSERVABLE | expression=EXPR | table=LookupTable | quantity=Quantity) metadata=Metadata?;
		@Override public ParserRule getRule() { return rule; }
		
		//(tree=Tree | argvalue=ARGVALUE | literal=Literal | urn=UrnId | id=PathName | list=List | map=Map | observable=OBSERVABLE
		//| expression=EXPR | table=LookupTable | quantity=Quantity) metadata=Metadata?
		public Group getGroup() { return cGroup; }
		
		//(tree=Tree | argvalue=ARGVALUE | literal=Literal | urn=UrnId | id=PathName | list=List | map=Map | observable=OBSERVABLE
		//| expression=EXPR | table=LookupTable | quantity=Quantity)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//tree=Tree
		public Assignment getTreeAssignment_0_0() { return cTreeAssignment_0_0; }
		
		//Tree
		public RuleCall getTreeTreeParserRuleCall_0_0_0() { return cTreeTreeParserRuleCall_0_0_0; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_0_1() { return cArgvalueAssignment_0_1; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_0_1_0() { return cArgvalueARGVALUETerminalRuleCall_0_1_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0_2() { return cLiteralAssignment_0_2; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_2_0() { return cLiteralLiteralParserRuleCall_0_2_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_0_3() { return cUrnAssignment_0_3; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_0_3_0() { return cUrnUrnIdParserRuleCall_0_3_0; }
		
		//id=PathName
		public Assignment getIdAssignment_0_4() { return cIdAssignment_0_4; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_0_4_0() { return cIdPathNameParserRuleCall_0_4_0; }
		
		//list=List
		public Assignment getListAssignment_0_5() { return cListAssignment_0_5; }
		
		//List
		public RuleCall getListListParserRuleCall_0_5_0() { return cListListParserRuleCall_0_5_0; }
		
		//map=Map
		public Assignment getMapAssignment_0_6() { return cMapAssignment_0_6; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_0_6_0() { return cMapMapParserRuleCall_0_6_0; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_0_7() { return cObservableAssignment_0_7; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_0_7_0() { return cObservableOBSERVABLETerminalRuleCall_0_7_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_0_8() { return cExpressionAssignment_0_8; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_0_8_0() { return cExpressionEXPRTerminalRuleCall_0_8_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_0_9() { return cTableAssignment_0_9; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_0_9_0() { return cTableLookupTableParserRuleCall_0_9_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_0_10() { return cQuantityAssignment_0_10; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_0_10_0() { return cQuantityQuantityParserRuleCall_0_10_0; }
		
		//metadata=Metadata?
		public Assignment getMetadataAssignment_1() { return cMetadataAssignment_1; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_1_0() { return cMetadataMetadataParserRuleCall_1_0; }
	}
	public class ValueWithoutTreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ValueWithoutTree");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cArgvalueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_0_0 = (RuleCall)cArgvalueAssignment_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdPathNameParserRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cUrnAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cUrnUrnIdParserRuleCall_3_0 = (RuleCall)cUrnAssignment_3.eContents().get(0);
		private final Assignment cListAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cListListParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Assignment cMapAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMapMapParserRuleCall_5_0 = (RuleCall)cMapAssignment_5.eContents().get(0);
		private final Assignment cObservableAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_6_0 = (RuleCall)cObservableAssignment_6.eContents().get(0);
		private final Assignment cExpressionAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cExpressionEXPRTerminalRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		private final Assignment cTableAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cTableLookupTableParserRuleCall_8_0 = (RuleCall)cTableAssignment_8.eContents().get(0);
		private final Assignment cQuantityAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cQuantityQuantityParserRuleCall_9_0 = (RuleCall)cQuantityAssignment_9.eContents().get(0);
		
		//ValueWithoutTree Value:
		//	argvalue=ARGVALUE | literal=Literal | id=PathName | urn=UrnId | list=List | map=Map | observable=OBSERVABLE |
		//	expression=EXPR | table=LookupTable | quantity=Quantity;
		@Override public ParserRule getRule() { return rule; }
		
		//argvalue=ARGVALUE | literal=Literal | id=PathName | urn=UrnId | list=List | map=Map | observable=OBSERVABLE |
		//expression=EXPR | table=LookupTable | quantity=Quantity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_0() { return cArgvalueAssignment_0; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_0_0() { return cArgvalueARGVALUETerminalRuleCall_0_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0() { return cLiteralLiteralParserRuleCall_1_0; }
		
		//id=PathName
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_2_0() { return cIdPathNameParserRuleCall_2_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_3() { return cUrnAssignment_3; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_3_0() { return cUrnUrnIdParserRuleCall_3_0; }
		
		//list=List
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//List
		public RuleCall getListListParserRuleCall_4_0() { return cListListParserRuleCall_4_0; }
		
		//map=Map
		public Assignment getMapAssignment_5() { return cMapAssignment_5; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_5_0() { return cMapMapParserRuleCall_5_0; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_6() { return cObservableAssignment_6; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_6_0() { return cObservableOBSERVABLETerminalRuleCall_6_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_7_0() { return cExpressionEXPRTerminalRuleCall_7_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_8() { return cTableAssignment_8; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_8_0() { return cTableLookupTableParserRuleCall_8_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_9() { return cQuantityAssignment_9; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_9_0() { return cQuantityQuantityParserRuleCall_9_0; }
	}
	public class ValueWithMetadataWithoutTreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ValueWithMetadataWithoutTree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cArgvalueAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_0_0_0 = (RuleCall)cArgvalueAssignment_0_0.eContents().get(0);
		private final Assignment cLiteralAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_0_1_0 = (RuleCall)cLiteralAssignment_0_1.eContents().get(0);
		private final Assignment cIdAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cIdPathNameParserRuleCall_0_2_0 = (RuleCall)cIdAssignment_0_2.eContents().get(0);
		private final Assignment cUrnAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cUrnUrnIdParserRuleCall_0_3_0 = (RuleCall)cUrnAssignment_0_3.eContents().get(0);
		private final Assignment cListAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cListListParserRuleCall_0_4_0 = (RuleCall)cListAssignment_0_4.eContents().get(0);
		private final Assignment cMapAssignment_0_5 = (Assignment)cAlternatives_0.eContents().get(5);
		private final RuleCall cMapMapParserRuleCall_0_5_0 = (RuleCall)cMapAssignment_0_5.eContents().get(0);
		private final Assignment cObservableAssignment_0_6 = (Assignment)cAlternatives_0.eContents().get(6);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_0_6_0 = (RuleCall)cObservableAssignment_0_6.eContents().get(0);
		private final Assignment cExpressionAssignment_0_7 = (Assignment)cAlternatives_0.eContents().get(7);
		private final RuleCall cExpressionEXPRTerminalRuleCall_0_7_0 = (RuleCall)cExpressionAssignment_0_7.eContents().get(0);
		private final Assignment cTableAssignment_0_8 = (Assignment)cAlternatives_0.eContents().get(8);
		private final RuleCall cTableLookupTableParserRuleCall_0_8_0 = (RuleCall)cTableAssignment_0_8.eContents().get(0);
		private final Assignment cQuantityAssignment_0_9 = (Assignment)cAlternatives_0.eContents().get(9);
		private final RuleCall cQuantityQuantityParserRuleCall_0_9_0 = (RuleCall)cQuantityAssignment_0_9.eContents().get(0);
		private final Assignment cMetadataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetadataMetadataParserRuleCall_1_0 = (RuleCall)cMetadataAssignment_1.eContents().get(0);
		
		//ValueWithMetadataWithoutTree Value:
		//	(argvalue=ARGVALUE | literal=Literal | id=PathName | urn=UrnId | list=List | map=Map | observable=OBSERVABLE |
		//	expression=EXPR | table=LookupTable | quantity=Quantity) metadata=Metadata?;
		@Override public ParserRule getRule() { return rule; }
		
		//(argvalue=ARGVALUE | literal=Literal | id=PathName | urn=UrnId | list=List | map=Map | observable=OBSERVABLE |
		//expression=EXPR | table=LookupTable | quantity=Quantity) metadata=Metadata?
		public Group getGroup() { return cGroup; }
		
		//(argvalue=ARGVALUE | literal=Literal | id=PathName | urn=UrnId | list=List | map=Map | observable=OBSERVABLE |
		//expression=EXPR | table=LookupTable | quantity=Quantity)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_0_0() { return cArgvalueAssignment_0_0; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_0_0_0() { return cArgvalueARGVALUETerminalRuleCall_0_0_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0_1() { return cLiteralAssignment_0_1; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_1_0() { return cLiteralLiteralParserRuleCall_0_1_0; }
		
		//id=PathName
		public Assignment getIdAssignment_0_2() { return cIdAssignment_0_2; }
		
		//PathName
		public RuleCall getIdPathNameParserRuleCall_0_2_0() { return cIdPathNameParserRuleCall_0_2_0; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_0_3() { return cUrnAssignment_0_3; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_0_3_0() { return cUrnUrnIdParserRuleCall_0_3_0; }
		
		//list=List
		public Assignment getListAssignment_0_4() { return cListAssignment_0_4; }
		
		//List
		public RuleCall getListListParserRuleCall_0_4_0() { return cListListParserRuleCall_0_4_0; }
		
		//map=Map
		public Assignment getMapAssignment_0_5() { return cMapAssignment_0_5; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_0_5_0() { return cMapMapParserRuleCall_0_5_0; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_0_6() { return cObservableAssignment_0_6; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_0_6_0() { return cObservableOBSERVABLETerminalRuleCall_0_6_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_0_7() { return cExpressionAssignment_0_7; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_0_7_0() { return cExpressionEXPRTerminalRuleCall_0_7_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_0_8() { return cTableAssignment_0_8; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_0_8_0() { return cTableLookupTableParserRuleCall_0_8_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_0_9() { return cQuantityAssignment_0_9; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_0_9_0() { return cQuantityQuantityParserRuleCall_0_9_0; }
		
		//metadata=Metadata?
		public Assignment getMetadataAssignment_1() { return cMetadataAssignment_1; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_1_0() { return cMetadataMetadataParserRuleCall_1_0; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Match");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBodyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_0_2_0 = (RuleCall)cBodyAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBooleanAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cBooleanAlternatives_1_0_0 = (Alternatives)cBooleanAssignment_1_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_1_0_0_0 = (Keyword)cBooleanAlternatives_1_0_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_1_0_0_1 = (Keyword)cBooleanAlternatives_1_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBodyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_1_2_0 = (RuleCall)cBodyAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTypeCAMELCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cTypeAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cRegexpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRegexpREGEXPTerminalRuleCall_3_0_0 = (RuleCall)cRegexpAssignment_3_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cBodyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_3_2_0 = (RuleCall)cBodyAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cObservableAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_4_0_0 = (RuleCall)cObservableAssignment_4_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBodyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_4_2_0 = (RuleCall)cBodyAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cLiteralAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_5_0_0 = (RuleCall)cLiteralAssignment_5_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cBodyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_5_2_0 = (RuleCall)cBodyAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cListAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cListListParserRuleCall_6_0_0 = (RuleCall)cListAssignment_6_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cBodyAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_6_2_0 = (RuleCall)cBodyAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cInKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSetAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_7_1_0 = (RuleCall)cSetAssignment_7_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cBodyAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cBodyStatementListParserRuleCall_7_3_0 = (RuleCall)cBodyAssignment_7_3.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cQuantityAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cQuantityQuantityParserRuleCall_8_0_0 = (RuleCall)cQuantityAssignment_8_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cBodyAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_8_2_0 = (RuleCall)cBodyAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cExprAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_9_0_0 = (RuleCall)cExprAssignment_9_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cBodyAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_9_2_0 = (RuleCall)cBodyAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cNodataAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cNodataUnknownKeyword_10_0_0 = (Keyword)cNodataAssignment_10_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cBodyAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_10_2_0 = (RuleCall)cBodyAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cStarAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cStarAsteriskKeyword_11_0_0 = (Keyword)cStarAssignment_11_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cBodyAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_11_2_0 = (RuleCall)cBodyAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cAnythingAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cAnythingNumberSignKeyword_12_0_0 = (Keyword)cAnythingAssignment_12_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cBodyAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cBodyStatementListParserRuleCall_12_2_0 = (RuleCall)cBodyAssignment_12_2.eContents().get(0);
		
		//Match:
		//	id=LOWERCASE_ID '->' body=StatementList | boolean=('true' | 'false') '->' body=StatementList | type=CAMELCASE_ID '->'
		//	body=StatementList | regexp=REGEXP '->' body=StatementList | observable=OBSERVABLE '->' body=StatementList |
		//	literal=Literal '->' body=StatementList | list=List '->' body=StatementList |
		//	'in' set=List '->' body=StatementList | quantity=Quantity '->' body=StatementList | expr=EXPR '->' body=StatementList
		//	| nodata='unknown' '->' body=StatementList | star?='*' '->' body=StatementList | anything?='#' '->'
		//	body=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//id=LOWERCASE_ID '->' body=StatementList | boolean=('true' | 'false') '->' body=StatementList | type=CAMELCASE_ID '->'
		//body=StatementList | regexp=REGEXP '->' body=StatementList | observable=OBSERVABLE '->' body=StatementList |
		//literal=Literal '->' body=StatementList | list=List '->' body=StatementList | 'in' set=List '->' body=StatementList |
		//quantity=Quantity '->' body=StatementList | expr=EXPR '->' body=StatementList | nodata='unknown' '->'
		//body=StatementList | star?='*' '->' body=StatementList | anything?='#' '->' body=StatementList
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=LOWERCASE_ID '->' body=StatementList
		public Group getGroup_0() { return cGroup_0; }
		
		//id=LOWERCASE_ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_0_2() { return cBodyAssignment_0_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_0_2_0() { return cBodyStatementListParserRuleCall_0_2_0; }
		
		//boolean=('true' | 'false') '->' body=StatementList
		public Group getGroup_1() { return cGroup_1; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_1_0() { return cBooleanAssignment_1_0; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_1_0_0() { return cBooleanAlternatives_1_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_1_0_0_0() { return cBooleanTrueKeyword_1_0_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_1_0_0_1() { return cBooleanFalseKeyword_1_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_1_2() { return cBodyAssignment_1_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_1_2_0() { return cBodyStatementListParserRuleCall_1_2_0; }
		
		//type=CAMELCASE_ID '->' body=StatementList
		public Group getGroup_2() { return cGroup_2; }
		
		//type=CAMELCASE_ID
		public Assignment getTypeAssignment_2_0() { return cTypeAssignment_2_0; }
		
		//CAMELCASE_ID
		public RuleCall getTypeCAMELCASE_IDTerminalRuleCall_2_0_0() { return cTypeCAMELCASE_IDTerminalRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_2_2_0() { return cBodyStatementListParserRuleCall_2_2_0; }
		
		//regexp=REGEXP '->' body=StatementList
		public Group getGroup_3() { return cGroup_3; }
		
		//regexp=REGEXP
		public Assignment getRegexpAssignment_3_0() { return cRegexpAssignment_3_0; }
		
		//REGEXP
		public RuleCall getRegexpREGEXPTerminalRuleCall_3_0_0() { return cRegexpREGEXPTerminalRuleCall_3_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_1() { return cHyphenMinusGreaterThanSignKeyword_3_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_3_2() { return cBodyAssignment_3_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_3_2_0() { return cBodyStatementListParserRuleCall_3_2_0; }
		
		//observable=OBSERVABLE '->' body=StatementList
		public Group getGroup_4() { return cGroup_4; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_4_0() { return cObservableAssignment_4_0; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_4_0_0() { return cObservableOBSERVABLETerminalRuleCall_4_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_1() { return cHyphenMinusGreaterThanSignKeyword_4_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_4_2() { return cBodyAssignment_4_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_4_2_0() { return cBodyStatementListParserRuleCall_4_2_0; }
		
		//literal=Literal '->' body=StatementList
		public Group getGroup_5() { return cGroup_5; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_5_0() { return cLiteralAssignment_5_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_5_0_0() { return cLiteralLiteralParserRuleCall_5_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_1() { return cHyphenMinusGreaterThanSignKeyword_5_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_5_2() { return cBodyAssignment_5_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_5_2_0() { return cBodyStatementListParserRuleCall_5_2_0; }
		
		//list=List '->' body=StatementList
		public Group getGroup_6() { return cGroup_6; }
		
		//list=List
		public Assignment getListAssignment_6_0() { return cListAssignment_6_0; }
		
		//List
		public RuleCall getListListParserRuleCall_6_0_0() { return cListListParserRuleCall_6_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6_1() { return cHyphenMinusGreaterThanSignKeyword_6_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_6_2() { return cBodyAssignment_6_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_6_2_0() { return cBodyStatementListParserRuleCall_6_2_0; }
		
		//'in' set=List '->' body=StatementList
		public Group getGroup_7() { return cGroup_7; }
		
		//'in'
		public Keyword getInKeyword_7_0() { return cInKeyword_7_0; }
		
		//set=List
		public Assignment getSetAssignment_7_1() { return cSetAssignment_7_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_7_1_0() { return cSetListParserRuleCall_7_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7_2() { return cHyphenMinusGreaterThanSignKeyword_7_2; }
		
		//body=StatementList
		public Assignment getBodyAssignment_7_3() { return cBodyAssignment_7_3; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_7_3_0() { return cBodyStatementListParserRuleCall_7_3_0; }
		
		//quantity=Quantity '->' body=StatementList
		public Group getGroup_8() { return cGroup_8; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_8_0() { return cQuantityAssignment_8_0; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_8_0_0() { return cQuantityQuantityParserRuleCall_8_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_8_1() { return cHyphenMinusGreaterThanSignKeyword_8_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_8_2() { return cBodyAssignment_8_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_8_2_0() { return cBodyStatementListParserRuleCall_8_2_0; }
		
		//expr=EXPR '->' body=StatementList
		public Group getGroup_9() { return cGroup_9; }
		
		//expr=EXPR
		public Assignment getExprAssignment_9_0() { return cExprAssignment_9_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_9_0_0() { return cExprEXPRTerminalRuleCall_9_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_9_1() { return cHyphenMinusGreaterThanSignKeyword_9_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_9_2() { return cBodyAssignment_9_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_9_2_0() { return cBodyStatementListParserRuleCall_9_2_0; }
		
		//nodata='unknown' '->' body=StatementList
		public Group getGroup_10() { return cGroup_10; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_10_0() { return cNodataAssignment_10_0; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_10_0_0() { return cNodataUnknownKeyword_10_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_10_1() { return cHyphenMinusGreaterThanSignKeyword_10_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_10_2() { return cBodyAssignment_10_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_10_2_0() { return cBodyStatementListParserRuleCall_10_2_0; }
		
		//star?='*' '->' body=StatementList
		public Group getGroup_11() { return cGroup_11; }
		
		//star?='*'
		public Assignment getStarAssignment_11_0() { return cStarAssignment_11_0; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_11_0_0() { return cStarAsteriskKeyword_11_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_11_1() { return cHyphenMinusGreaterThanSignKeyword_11_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_11_2() { return cBodyAssignment_11_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_11_2_0() { return cBodyStatementListParserRuleCall_11_2_0; }
		
		//anything?='#' '->' body=StatementList
		public Group getGroup_12() { return cGroup_12; }
		
		//anything?='#'
		public Assignment getAnythingAssignment_12_0() { return cAnythingAssignment_12_0; }
		
		//'#'
		public Keyword getAnythingNumberSignKeyword_12_0_0() { return cAnythingNumberSignKeyword_12_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_12_1() { return cHyphenMinusGreaterThanSignKeyword_12_1; }
		
		//body=StatementList
		public Assignment getBodyAssignment_12_2() { return cBodyAssignment_12_2; }
		
		//StatementList
		public RuleCall getBodyStatementListParserRuleCall_12_2_0() { return cBodyStatementListParserRuleCall_12_2_0; }
	}
	public class UrnIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UrnId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrnKlabKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPathNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPathNameParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final RuleCall cPathParserRuleCall_7_0 = (RuleCall)cAlternatives_7.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_7_1 = (RuleCall)cAlternatives_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cVersionNumberParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cNumberSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Alternatives cAlternatives_9_1 = (Alternatives)cGroup_9.eContents().get(1);
		private final RuleCall cPathParserRuleCall_9_1_0 = (RuleCall)cAlternatives_9_1.eContents().get(0);
		private final RuleCall cUrnKvpParserRuleCall_9_1_1 = (RuleCall)cAlternatives_9_1.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cAmpersandKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Alternatives cAlternatives_9_2_1 = (Alternatives)cGroup_9_2.eContents().get(1);
		private final RuleCall cPathParserRuleCall_9_2_1_0 = (RuleCall)cAlternatives_9_2_1.eContents().get(0);
		private final RuleCall cUrnKvpParserRuleCall_9_2_1_1 = (RuleCall)cAlternatives_9_2_1.eContents().get(1);
		
		///**
		// * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
		// * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
		// * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
		// * integer.
		// */ UrnId:
		//	'urn:klab:'? PathName ':' PathName ':' PathName ':' (Path | INT) (':' VersionNumber)? ('#' (Path | UrnKvp) ('&' (Path
		//	| UrnKvp))*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'urn:klab:'? PathName ':' PathName ':' PathName ':' (Path | INT) (':' VersionNumber)? ('#' (Path | UrnKvp) ('&' (Path |
		//UrnKvp))*)?
		public Group getGroup() { return cGroup; }
		
		//'urn:klab:'?
		public Keyword getUrnKlabKeyword_0() { return cUrnKlabKeyword_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_1() { return cPathNameParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_3() { return cPathNameParserRuleCall_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_5() { return cPathNameParserRuleCall_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//(Path | INT)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//Path
		public RuleCall getPathParserRuleCall_7_0() { return cPathParserRuleCall_7_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7_1() { return cINTTerminalRuleCall_7_1; }
		
		//(':' VersionNumber)?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//VersionNumber
		public RuleCall getVersionNumberParserRuleCall_8_1() { return cVersionNumberParserRuleCall_8_1; }
		
		//('#' (Path | UrnKvp) ('&' (Path | UrnKvp))*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'#'
		public Keyword getNumberSignKeyword_9_0() { return cNumberSignKeyword_9_0; }
		
		//(Path | UrnKvp)
		public Alternatives getAlternatives_9_1() { return cAlternatives_9_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_9_1_0() { return cPathParserRuleCall_9_1_0; }
		
		//UrnKvp
		public RuleCall getUrnKvpParserRuleCall_9_1_1() { return cUrnKvpParserRuleCall_9_1_1; }
		
		//('&' (Path | UrnKvp))*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_9_2_0() { return cAmpersandKeyword_9_2_0; }
		
		//(Path | UrnKvp)
		public Alternatives getAlternatives_9_2_1() { return cAlternatives_9_2_1; }
		
		//Path
		public RuleCall getPathParserRuleCall_9_2_1_0() { return cPathParserRuleCall_9_2_1_0; }
		
		//UrnKvp
		public RuleCall getUrnKvpParserRuleCall_9_2_1_1() { return cUrnKvpParserRuleCall_9_2_1_1; }
	}
	public class UrnKvpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UrnKvp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cPathParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//UrnKvp:
		//	PathName '=' (Path | INT);
		@Override public ParserRule getRule() { return rule; }
		
		//PathName '=' (Path | INT)
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(Path | INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//Path
		public RuleCall getPathParserRuleCall_2_0() { return cPathParserRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsValueWithMetadataParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//	{List} '(' contents+=ValueWithMetadata* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{List} '(' contents+=ValueWithMetadata* ')'
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contents+=ValueWithMetadata*
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }
		
		//ValueWithMetadata
		public RuleCall getContentsValueWithMetadataParserRuleCall_2_0() { return cContentsValueWithMetadataParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Map:
		//	{Map} '#{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Map} '#{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }
		
		//'#{'
		public Keyword getNumberSignLeftCurlyBracketKeyword_1() { return cNumberSignLeftCurlyBracketKeyword_1; }
		
		//(entries+=MapEntry (=> (',') entries+=MapEntry)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_0_0() { return cEntriesMapEntryParserRuleCall_2_0_0; }
		
		//(=> (',') entries+=MapEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> (',')
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_0_0() { return cCommaKeyword_2_1_0_0; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_1_1_0() { return cEntriesMapEntryParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Tree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRootAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRootValueWithMetadataWithoutTreeParserRuleCall_0_0 = (RuleCall)cRootAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cValueValueWithMetadataWithoutTreeParserRuleCall_1_1_0_0 = (RuleCall)cValueAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cValueTreeParserRuleCall_1_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		
		//Tree:
		//	root=ValueWithMetadataWithoutTree (=> '<-' (value+=ValueWithMetadataWithoutTree | '(' value+=Tree ')'))+;
		@Override public ParserRule getRule() { return rule; }
		
		//root=ValueWithMetadataWithoutTree (=> '<-' (value+=ValueWithMetadataWithoutTree | '(' value+=Tree ')'))+
		public Group getGroup() { return cGroup; }
		
		//root=ValueWithMetadataWithoutTree
		public Assignment getRootAssignment_0() { return cRootAssignment_0; }
		
		//ValueWithMetadataWithoutTree
		public RuleCall getRootValueWithMetadataWithoutTreeParserRuleCall_0_0() { return cRootValueWithMetadataWithoutTreeParserRuleCall_0_0; }
		
		//(=> '<-' (value+=ValueWithMetadataWithoutTree | '(' value+=Tree ')'))+
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1_0() { return cLessThanSignHyphenMinusKeyword_1_0; }
		
		//(value+=ValueWithMetadataWithoutTree | '(' value+=Tree ')')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//value+=ValueWithMetadataWithoutTree
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }
		
		//ValueWithMetadataWithoutTree
		public RuleCall getValueValueWithMetadataWithoutTreeParserRuleCall_1_1_0_0() { return cValueValueWithMetadataWithoutTreeParserRuleCall_1_1_0_0; }
		
		//'(' value+=Tree ')'
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_1_0() { return cLeftParenthesisKeyword_1_1_1_0; }
		
		//value+=Tree
		public Assignment getValueAssignment_1_1_1_1() { return cValueAssignment_1_1_1_1; }
		
		//Tree
		public RuleCall getValueTreeParserRuleCall_1_1_1_1_0() { return cValueTreeParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1_2() { return cRightParenthesisKeyword_1_1_1_2; }
	}
	public class MapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifierClassifierParserRuleCall_0_0 = (RuleCall)cClassifierAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueWithMetadataParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MapEntry:
		//	classifier=Classifier ':' value=ValueWithMetadata;
		@Override public ParserRule getRule() { return rule; }
		
		//classifier=Classifier ':' value=ValueWithMetadata
		public Group getGroup() { return cGroup; }
		
		//classifier=Classifier
		public Assignment getClassifierAssignment_0() { return cClassifierAssignment_0; }
		
		//Classifier
		public RuleCall getClassifierClassifierParserRuleCall_0_0() { return cClassifierClassifierParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=ValueWithMetadata
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ValueWithMetadata
		public RuleCall getValueValueWithMetadataParserRuleCall_2_0() { return cValueValueWithMetadataParserRuleCall_2_0; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Classifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cObservableAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_5_0 = (RuleCall)cObservableAssignment_5.eContents().get(0);
		private final Assignment cIdAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_6_0 = (RuleCall)cIdAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_7_0_0 = (RuleCall)cOpAssignment_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cNodataAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNodataUnknownKeyword_8_0 = (Keyword)cNodataAssignment_8.eContents().get(0);
		private final Assignment cStarAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cStarAsteriskKeyword_9_0 = (Keyword)cStarAssignment_9.eContents().get(0);
		
		//Classifier:
		//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//	(rightLimit='inclusive' | 'exclusive')? | num=Number |
		//	'in' set=List | string=STRING | observable=OBSERVABLE | id=LOWERCASE_ID | op=REL_OPERATOR expression=Number |
		//	nodata='unknown' | star?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | observable=OBSERVABLE |
		//id=LOWERCASE_ID | op=REL_OPERATOR expression=Number | nodata='unknown' | star?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_5() { return cObservableAssignment_5; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_5_0() { return cObservableOBSERVABLETerminalRuleCall_5_0; }
		
		//id=LOWERCASE_ID
		public Assignment getIdAssignment_6() { return cIdAssignment_6; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_6_0() { return cIdLOWERCASE_IDTerminalRuleCall_6_0; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_7() { return cGroup_7; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_7_0_0() { return cOpREL_OPERATORParserRuleCall_7_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_7_1_0() { return cExpressionNumberParserRuleCall_7_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_8() { return cNodataAssignment_8; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_8_0() { return cNodataUnknownKeyword_8_0; }
		
		//star?='*'
		public Assignment getStarAssignment_9() { return cStarAssignment_9; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_9_0() { return cStarAsteriskKeyword_9_0; }
	}
	public class LookupTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.LookupTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLookupTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableTableParserRuleCall_2_0 = (RuleCall)cTableAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Lookup table literal. May be overkill.
		//LookupTable:
		//	{LookupTable}
		//	'{{' table=Table? '}}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LookupTable} '{{' table=Table? '}}'
		public Group getGroup() { return cGroup; }
		
		//{LookupTable}
		public Action getLookupTableAction_0() { return cLookupTableAction_0; }
		
		//'{{'
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }
		
		//table=Table?
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_2_0() { return cTableTableParserRuleCall_2_0; }
		
		//'}}'
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cHeadersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cHeadersHeaderRowParserRuleCall_0_0_0 = (RuleCall)cHeadersAssignment_0_0.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cRowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_1_0 = (RuleCall)cRowsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRowsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_2_1_0 = (RuleCall)cRowsAssignment_2_1.eContents().get(0);
		
		//Table:
		//	(headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*
		public Group getGroup() { return cGroup; }
		
		//(headers=HeaderRow SEPARATOR)?
		public Group getGroup_0() { return cGroup_0; }
		
		//headers=HeaderRow
		public Assignment getHeadersAssignment_0_0() { return cHeadersAssignment_0_0; }
		
		//HeaderRow
		public RuleCall getHeadersHeaderRowParserRuleCall_0_0_0() { return cHeadersHeaderRowParserRuleCall_0_0_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_0_1() { return cSEPARATORTerminalRuleCall_0_1; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_1() { return cRowsAssignment_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_1_0() { return cRowsTableRowParserRuleCall_1_0; }
		
		//(',' rows+=TableRow)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_2_1() { return cRowsAssignment_2_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_2_1_0() { return cRowsTableRowParserRuleCall_2_1_0; }
	}
	public class HeaderRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.HeaderRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cElementsAlternatives_0_0 = (Alternatives)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cElementsLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cElementsAlternatives_0_0.eContents().get(0);
		private final RuleCall cElementsSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cElementsAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cElementsAlternatives_1_1_0 = (Alternatives)cElementsAssignment_1_1.eContents().get(0);
		private final RuleCall cElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0 = (RuleCall)cElementsAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cElementsSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cElementsAlternatives_1_1_0.eContents().get(1);
		
		//HeaderRow:
		//	elements+=(LOWERCASE_ID | STRING) ('|' elements+=(LOWERCASE_ID | STRING))*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=(LOWERCASE_ID | STRING) ('|' elements+=(LOWERCASE_ID | STRING))*
		public Group getGroup() { return cGroup; }
		
		//elements+=(LOWERCASE_ID | STRING)
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//(LOWERCASE_ID | STRING)
		public Alternatives getElementsAlternatives_0_0() { return cElementsAlternatives_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getElementsLOWERCASE_IDTerminalRuleCall_0_0_0() { return cElementsLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_0_0_1() { return cElementsSTRINGTerminalRuleCall_0_0_1; }
		
		//('|' elements+=(LOWERCASE_ID | STRING))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=(LOWERCASE_ID | STRING)
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//(LOWERCASE_ID | STRING)
		public Alternatives getElementsAlternatives_1_1_0() { return cElementsAlternatives_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0() { return cElementsLOWERCASE_IDTerminalRuleCall_1_1_0_0; }
		
		//STRING
		public RuleCall getElementsSTRINGTerminalRuleCall_1_1_0_1() { return cElementsSTRINGTerminalRuleCall_1_1_0_1; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsTableClassifierParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsTableClassifierParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//TableRow:
		//	elements+=TableClassifier ('|' elements+=TableClassifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=TableClassifier ('|' elements+=TableClassifier)*
		public Group getGroup() { return cGroup; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_0_0() { return cElementsTableClassifierParserRuleCall_0_0; }
		
		//('|' elements+=TableClassifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_1_1_0() { return cElementsTableClassifierParserRuleCall_1_1_0; }
	}
	public class TableClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.TableClassifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumNumberParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cObservableAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_3_0 = (RuleCall)cObservableAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_4_0_0 = (RuleCall)cOpAssignment_4_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cInt0Assignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_5_0_0 = (RuleCall)cInt0Assignment_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cLeftLimitAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_5_1_0_0 = (Keyword)cLeftLimitAssignment_5_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Keyword cToKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cInt1Assignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_5_3_0 = (RuleCall)cInt1Assignment_5_3.eContents().get(0);
		private final Alternatives cAlternatives_5_4 = (Alternatives)cGroup_5.eContents().get(4);
		private final Assignment cRightLimitAssignment_5_4_0 = (Assignment)cAlternatives_5_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_5_4_0_0 = (Keyword)cRightLimitAssignment_5_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_5_4_1 = (Keyword)cAlternatives_5_4.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cInKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSetAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_6_1_0 = (RuleCall)cSetAssignment_6_1.eContents().get(0);
		private final Assignment cQuantityAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cQuantityQuantityParserRuleCall_7_0 = (RuleCall)cQuantityAssignment_7.eContents().get(0);
		private final Assignment cDateAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cDateDateParserRuleCall_8_0 = (RuleCall)cDateAssignment_8.eContents().get(0);
		private final Assignment cExprAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cExprEXPRTerminalRuleCall_9_0 = (RuleCall)cExprAssignment_9.eContents().get(0);
		private final Assignment cNodataAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cNodataUnknownKeyword_10_0 = (Keyword)cNodataAssignment_10.eContents().get(0);
		private final Assignment cStarAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cStarAsteriskKeyword_11_0 = (Keyword)cStarAssignment_11.eContents().get(0);
		private final Assignment cAnythingAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cAnythingNumberSignKeyword_12_0 = (Keyword)cAnythingAssignment_12.eContents().get(0);
		
		//TableClassifier:
		//	(boolean='true' | boolean='false') | num=Number | string=STRING | observable=OBSERVABLE | op=REL_OPERATOR
		//	expression=Number | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive'
		//	| 'exclusive')? |
		//	'in' set=List | quantity=Quantity | date=Date | expr=EXPR | nodata='unknown' | star?='*' | anything?='#';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') | num=Number | string=STRING | observable=OBSERVABLE | op=REL_OPERATOR
		//expression=Number | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive'
		//| 'exclusive')? | 'in' set=List | quantity=Quantity | date=Date | expr=EXPR | nodata='unknown' | star?='*' |
		//anything?='#'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//num=Number
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_1_0() { return cNumNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_3() { return cObservableAssignment_3; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_3_0() { return cObservableOBSERVABLETerminalRuleCall_3_0; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_4() { return cGroup_4; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_4_0_0() { return cOpREL_OPERATORParserRuleCall_4_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_4_1_0() { return cExpressionNumberParserRuleCall_4_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_5() { return cGroup_5; }
		
		//int0=Number
		public Assignment getInt0Assignment_5_0() { return cInt0Assignment_5_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_5_0_0() { return cInt0NumberParserRuleCall_5_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_5_1_0() { return cLeftLimitAssignment_5_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_5_1_0_0() { return cLeftLimitInclusiveKeyword_5_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_5_1_1() { return cExclusiveKeyword_5_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_5_2() { return cToKeyword_5_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_5_3() { return cInt1Assignment_5_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_5_3_0() { return cInt1NumberParserRuleCall_5_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_5_4() { return cAlternatives_5_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_5_4_0() { return cRightLimitAssignment_5_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_5_4_0_0() { return cRightLimitInclusiveKeyword_5_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_5_4_1() { return cExclusiveKeyword_5_4_1; }
		
		//'in' set=List
		public Group getGroup_6() { return cGroup_6; }
		
		//'in'
		public Keyword getInKeyword_6_0() { return cInKeyword_6_0; }
		
		//set=List
		public Assignment getSetAssignment_6_1() { return cSetAssignment_6_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_6_1_0() { return cSetListParserRuleCall_6_1_0; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_7() { return cQuantityAssignment_7; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_7_0() { return cQuantityQuantityParserRuleCall_7_0; }
		
		//date=Date
		public Assignment getDateAssignment_8() { return cDateAssignment_8; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_8_0() { return cDateDateParserRuleCall_8_0; }
		
		//expr=EXPR
		public Assignment getExprAssignment_9() { return cExprAssignment_9; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_9_0() { return cExprEXPRTerminalRuleCall_9_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_10() { return cNodataAssignment_10; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_10_0() { return cNodataUnknownKeyword_10_0; }
		
		//star?='*'
		public Assignment getStarAssignment_11() { return cStarAssignment_11; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_11_0() { return cStarAsteriskKeyword_11_0; }
		
		//anything?='#'
		public Assignment getAnythingAssignment_12() { return cAnythingAssignment_12; }
		
		//'#'
		public Keyword getAnythingNumberSignKeyword_12_0() { return cAnythingNumberSignKeyword_12_0; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueNumberParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOverAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOverSolidusKeyword_1_0_0 = (Keyword)cOverAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_2_0_0 = (RuleCall)cUnitAssignment_2_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_2_1_0 = (RuleCall)cCurrencyAssignment_2_1.eContents().get(0);
		
		//Quantity:
		//	value=Number (over?='/' | '.') (unit=Unit | currency=Currency);
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
		public Group getGroup() { return cGroup; }
		
		//value=Number
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0_0() { return cValueNumberParserRuleCall_0_0; }
		
		//(over?='/' | '.')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//over?='/'
		public Assignment getOverAssignment_1_0() { return cOverAssignment_1_0; }
		
		//'/'
		public Keyword getOverSolidusKeyword_1_0_0() { return cOverSolidusKeyword_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//(unit=Unit | currency=Currency)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_0() { return cUnitAssignment_2_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_0_0() { return cUnitUnitParserRuleCall_2_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_2_1() { return cCurrencyAssignment_2_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_2_1_0() { return cCurrencyCurrencyParserRuleCall_2_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANNOTATION_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Annotation:
		//	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ANNOTATION_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ANNOTATION_ID
		public RuleCall getNameANNOTATION_IDTerminalRuleCall_0_0() { return cNameANNOTATION_IDTerminalRuleCall_0_0; }
		
		//('(' parameters=ParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFromAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_1_0_0 = (RuleCall)cFromAssignment_1_0.eContents().get(0);
		private final Keyword cToKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cToAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_1_2_0 = (RuleCall)cToAssignment_1_2.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cDateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDateDateParserRuleCall_3_0 = (RuleCall)cDateAssignment_3.eContents().get(0);
		private final Assignment cBooleanAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Alternatives cBooleanAlternatives_4_0 = (Alternatives)cBooleanAssignment_4.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_4_0_0 = (Keyword)cBooleanAlternatives_4_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_4_0_1 = (Keyword)cBooleanAlternatives_4_0.eContents().get(1);
		
		//Literal:
		//	number=Number | from=Number 'to' to=Number | string=STRING | date=Date | boolean=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | from=Number 'to' to=Number | string=STRING | date=Date | boolean=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//from=Number 'to' to=Number
		public Group getGroup_1() { return cGroup_1; }
		
		//from=Number
		public Assignment getFromAssignment_1_0() { return cFromAssignment_1_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_1_0_0() { return cFromNumberParserRuleCall_1_0_0; }
		
		//'to'
		public Keyword getToKeyword_1_1() { return cToKeyword_1_1; }
		
		//to=Number
		public Assignment getToAssignment_1_2() { return cToAssignment_1_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_1_2_0() { return cToNumberParserRuleCall_1_2_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//date=Date
		public Assignment getDateAssignment_3() { return cDateAssignment_3; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_3_0() { return cDateDateParserRuleCall_3_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_4() { return cBooleanAssignment_4; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_4_0() { return cBooleanAlternatives_4_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_4_0_0() { return cBooleanTrueKeyword_4_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_4_0_1() { return cBooleanFalseKeyword_4_0_1; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPairsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPairsKeyValuePairParserRuleCall_0_0 = (RuleCall)cPairsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPairsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_1_0 = (RuleCall)cPairsAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	pairs+=KeyValuePair (=> (',')? pairs+=KeyValuePair)*;
		@Override public ParserRule getRule() { return rule; }
		
		//pairs+=KeyValuePair (=> (',')? pairs+=KeyValuePair)*
		public Group getGroup() { return cGroup; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_0() { return cPairsAssignment_0; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_0_0() { return cPairsKeyValuePairParserRuleCall_0_0; }
		
		//(=> (',')? pairs+=KeyValuePair)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> (',')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_1() { return cPairsAssignment_1_1; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_1_0() { return cPairsKeyValuePairParserRuleCall_1_1_0; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.KeyValuePair");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0_0_0 = (RuleCall)cNameAssignment_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1 = (Alternatives)cGroup_0_0.eContents().get(1);
		private final Assignment cInteractiveAssignment_0_0_1_0 = (Assignment)cAlternatives_0_0_1.eContents().get(0);
		private final Keyword cInteractiveQuestionMarkEqualsSignKeyword_0_0_1_0_0 = (Keyword)cInteractiveAssignment_0_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1_1 = (Keyword)cAlternatives_0_0_1.eContents().get(1);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKeyKEYTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cTagAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTagTAGTerminalRuleCall_2_0 = (RuleCall)cTagAssignment_2.eContents().get(0);
		
		//KeyValuePair:
		//	(name=LOWERCASE_ID (interactive?='?=' | '='))?
		//	value=Value | key=KEY | tag=TAG;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=LOWERCASE_ID (interactive?='?=' | '='))? value=Value | key=KEY | tag=TAG
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(name=LOWERCASE_ID (interactive?='?=' | '='))? value=Value
		public Group getGroup_0() { return cGroup_0; }
		
		//(name=LOWERCASE_ID (interactive?='?=' | '='))?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_0_0_0() { return cNameAssignment_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_0_0_0; }
		
		//(interactive?='?=' | '=')
		public Alternatives getAlternatives_0_0_1() { return cAlternatives_0_0_1; }
		
		//interactive?='?='
		public Assignment getInteractiveAssignment_0_0_1_0() { return cInteractiveAssignment_0_0_1_0; }
		
		//'?='
		public Keyword getInteractiveQuestionMarkEqualsSignKeyword_0_0_1_0_0() { return cInteractiveQuestionMarkEqualsSignKeyword_0_0_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_1_1() { return cEqualsSignKeyword_0_0_1_1; }
		
		//value=Value
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0_1_0() { return cValueValueParserRuleCall_0_1_0; }
		
		//key=KEY
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_1_0() { return cKeyKEYTerminalRuleCall_1_0; }
		
		//tag=TAG
		public Assignment getTagAssignment_2() { return cTagAssignment_2; }
		
		//TAG
		public RuleCall getTagTAGTerminalRuleCall_2_0() { return cTagTAGTerminalRuleCall_2_0; }
	}
	public class UnitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UnitElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cIdAlternatives_0_0.eContents().get(1);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_0_0_2 = (RuleCall)cIdAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_1_0 = (RuleCall)cUnitAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//UnitElement:
		//	id=(CAMELCASE_ID | LOWERCASE_ID | UPPERCASE_ID) |
		//	'(' unit=Unit ')';
		@Override public ParserRule getRule() { return rule; }
		
		//id=(CAMELCASE_ID | LOWERCASE_ID | UPPERCASE_ID) | '(' unit=Unit ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=(CAMELCASE_ID | LOWERCASE_ID | UPPERCASE_ID)
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//(CAMELCASE_ID | LOWERCASE_ID | UPPERCASE_ID)
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_0_0_0() { return cIdCAMELCASE_IDTerminalRuleCall_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_1() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_1; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_0_0_2() { return cIdUPPERCASE_IDTerminalRuleCall_0_0_2; }
		
		//'(' unit=Unit ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1_1() { return cUnitAssignment_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_1_0() { return cUnitUnitParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootUnitElementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cConnectorsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cConnectorsUnitOpEnumRuleCall_2_0_0_0 = (RuleCall)cConnectorsAssignment_2_0_0.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Unit:
		//	{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//root=UnitElement?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//UnitElement
		public RuleCall getRootUnitElementParserRuleCall_1_0() { return cRootUnitElementParserRuleCall_1_0; }
		
		//(=> (connectors+=UnitOp) units+=UnitElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> (connectors+=UnitOp)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//connectors+=UnitOp
		public Assignment getConnectorsAssignment_2_0_0() { return cConnectorsAssignment_2_0_0; }
		
		//UnitOp
		public RuleCall getConnectorsUnitOpEnumRuleCall_2_0_0_0() { return cConnectorsUnitOpEnumRuleCall_2_0_0_0; }
		
		//units+=UnitElement
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0() { return cUnitsUnitElementParserRuleCall_2_1_0; }
	}
	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Currency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cYearAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cYearINTTerminalRuleCall_1_1_0 = (RuleCall)cYearAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Currency:
		//	id=UPPERCASE_ID ('@' year=INT) (=> '/' units+=UnitElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//id=UPPERCASE_ID ('@' year=INT) (=> '/' units+=UnitElement)*
		public Group getGroup() { return cGroup; }
		
		//id=UPPERCASE_ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_0_0() { return cIdUPPERCASE_IDTerminalRuleCall_0_0; }
		
		//('@' year=INT)
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//year=INT
		public Assignment getYearAssignment_1_1() { return cYearAssignment_1_1; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_1_1_0() { return cYearINTTerminalRuleCall_1_1_0; }
		
		//(=> '/' units+=UnitElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> '/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//units+=UnitElement
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0() { return cUnitsUnitElementParserRuleCall_2_1_0; }
	}
	public class REL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.REL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cGtGreaterThanSignKeyword_0_0 = (Keyword)cGtAssignment_0.eContents().get(0);
		private final Assignment cLtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLtLessThanSignKeyword_1_0 = (Keyword)cLtAssignment_1.eContents().get(0);
		private final Assignment cEqAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cEqEqualsSignKeyword_2_0 = (Keyword)cEqAssignment_2.eContents().get(0);
		private final Assignment cNeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNeExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNeAssignment_3.eContents().get(0);
		private final Assignment cLeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cLeLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLeAssignment_4.eContents().get(0);
		private final Assignment cGeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cGeGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeAssignment_5.eContents().get(0);
		
		//REL_OPERATOR:
		//	gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>=';
		@Override public ParserRule getRule() { return rule; }
		
		//gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gt?='>'
		public Assignment getGtAssignment_0() { return cGtAssignment_0; }
		
		//'>'
		public Keyword getGtGreaterThanSignKeyword_0_0() { return cGtGreaterThanSignKeyword_0_0; }
		
		//lt?='<'
		public Assignment getLtAssignment_1() { return cLtAssignment_1; }
		
		//'<'
		public Keyword getLtLessThanSignKeyword_1_0() { return cLtLessThanSignKeyword_1_0; }
		
		//eq?='='
		public Assignment getEqAssignment_2() { return cEqAssignment_2; }
		
		//'='
		public Keyword getEqEqualsSignKeyword_2_0() { return cEqEqualsSignKeyword_2_0; }
		
		//ne?='!='
		public Assignment getNeAssignment_3() { return cNeAssignment_3; }
		
		//'!='
		public Keyword getNeExclamationMarkEqualsSignKeyword_3_0() { return cNeExclamationMarkEqualsSignKeyword_3_0; }
		
		//le?='<='
		public Assignment getLeAssignment_4() { return cLeAssignment_4; }
		
		//'<='
		public Keyword getLeLessThanSignEqualsSignKeyword_4_0() { return cLeLessThanSignEqualsSignKeyword_4_0; }
		
		//ge?='>='
		public Assignment getGeAssignment_5() { return cGeAssignment_5; }
		
		//'>='
		public Keyword getGeGreaterThanSignEqualsSignKeyword_5_0() { return cGeGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cNegativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_0_1_0 = (Keyword)cNegativeAssignment_0_1.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRealINTTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		private final Assignment cLongAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLongLKeyword_2_0 = (Keyword)cLongAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cDecimalAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cDecimalFullStopKeyword_3_0_0_0 = (Keyword)cDecimalAssignment_3_0_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_3_0_1_0 = (RuleCall)cDecimalPartAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cExponentialAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Alternatives cExponentialAlternatives_4_0_0_0 = (Alternatives)cExponentialAssignment_4_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_0 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_1 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_0_1_0 = (Keyword)cAlternatives_4_0_1.eContents().get(0);
		private final Assignment cExpNegativeAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final Keyword cExpNegativeHyphenMinusKeyword_4_0_1_1_0 = (Keyword)cExpNegativeAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cExpAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cExpINTTerminalRuleCall_4_0_2_0 = (RuleCall)cExpAssignment_4_0_2.eContents().get(0);
		
		//Number:
		//	('+' | negative?='-')? => real=INT => long?='l'? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+'
		//	| expNegative?='-')? exp=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | negative?='-')? => real=INT => long?='l'? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
		//expNegative?='-')? exp=INT)?
		public Group getGroup() { return cGroup; }
		
		//('+' | negative?='-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//negative?='-'
		public Assignment getNegativeAssignment_0_1() { return cNegativeAssignment_0_1; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_0_1_0() { return cNegativeHyphenMinusKeyword_0_1_0; }
		
		//=> real=INT
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//INT
		public RuleCall getRealINTTerminalRuleCall_1_0() { return cRealINTTerminalRuleCall_1_0; }
		
		//=> long?='l'?
		public Assignment getLongAssignment_2() { return cLongAssignment_2; }
		
		//'l'
		public Keyword getLongLKeyword_2_0() { return cLongLKeyword_2_0; }
		
		//=> (decimal?='.' decimalPart=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//(decimal?='.' decimalPart=INT)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//decimal?='.'
		public Assignment getDecimalAssignment_3_0_0() { return cDecimalAssignment_3_0_0; }
		
		//'.'
		public Keyword getDecimalFullStopKeyword_3_0_0_0() { return cDecimalFullStopKeyword_3_0_0_0; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_3_0_1() { return cDecimalPartAssignment_3_0_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_3_0_1_0() { return cDecimalPartINTTerminalRuleCall_3_0_1_0; }
		
		//=> (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//(exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//exponential?=('e' | 'E')
		public Assignment getExponentialAssignment_4_0_0() { return cExponentialAssignment_4_0_0; }
		
		//('e' | 'E')
		public Alternatives getExponentialAlternatives_4_0_0_0() { return cExponentialAlternatives_4_0_0_0; }
		
		//'e'
		public Keyword getExponentialEKeyword_4_0_0_0_0() { return cExponentialEKeyword_4_0_0_0_0; }
		
		//'E'
		public Keyword getExponentialEKeyword_4_0_0_0_1() { return cExponentialEKeyword_4_0_0_0_1; }
		
		//('+' | expNegative?='-')?
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_0_1_0() { return cPlusSignKeyword_4_0_1_0; }
		
		//expNegative?='-'
		public Assignment getExpNegativeAssignment_4_0_1_1() { return cExpNegativeAssignment_4_0_1_1; }
		
		//'-'
		public Keyword getExpNegativeHyphenMinusKeyword_4_0_1_1_0() { return cExpNegativeHyphenMinusKeyword_4_0_1_1_0; }
		
		//exp=INT
		public Assignment getExpAssignment_4_0_2() { return cExpAssignment_4_0_2; }
		
		//INT
		public RuleCall getExpINTTerminalRuleCall_4_0_2_0() { return cExpINTTerminalRuleCall_4_0_2_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cYearAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cYearINTTerminalRuleCall_0_0 = (RuleCall)cYearAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cADKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cBcAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cBcBCKeyword_1_2_0 = (Keyword)cBcAssignment_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayINTTerminalRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHourAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_6_0_0 = (RuleCall)cHourAssignment_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_6_2_0 = (RuleCall)cMinAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cColonKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cSecAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cSecINTTerminalRuleCall_6_3_1_0 = (RuleCall)cSecAssignment_6_3_1.eContents().get(0);
		private final Group cGroup_6_3_2 = (Group)cGroup_6_3.eContents().get(2);
		private final Keyword cFullStopKeyword_6_3_2_0 = (Keyword)cGroup_6_3_2.eContents().get(0);
		private final Assignment cMsAssignment_6_3_2_1 = (Assignment)cGroup_6_3_2.eContents().get(1);
		private final RuleCall cMsINTTerminalRuleCall_6_3_2_1_0 = (RuleCall)cMsAssignment_6_3_2_1.eContents().get(0);
		
		//Date:
		//	year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup() { return cGroup; }
		
		//year=INT
		public Assignment getYearAssignment_0() { return cYearAssignment_0; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_0_0() { return cYearINTTerminalRuleCall_0_0; }
		
		//('AD' | 'CE' | bc?='BC')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'AD'
		public Keyword getADKeyword_1_0() { return cADKeyword_1_0; }
		
		//'CE'
		public Keyword getCEKeyword_1_1() { return cCEKeyword_1_1; }
		
		//bc?='BC'
		public Assignment getBcAssignment_1_2() { return cBcAssignment_1_2; }
		
		//'BC'
		public Keyword getBcBCKeyword_1_2_0() { return cBcBCKeyword_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//month=INT
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_3_0() { return cMonthINTTerminalRuleCall_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//day=INT
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_5_0() { return cDayINTTerminalRuleCall_5_0; }
		
		//(hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//hour=INT
		public Assignment getHourAssignment_6_0() { return cHourAssignment_6_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_6_0_0() { return cHourINTTerminalRuleCall_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//min=INT
		public Assignment getMinAssignment_6_2() { return cMinAssignment_6_2; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_6_2_0() { return cMinINTTerminalRuleCall_6_2_0; }
		
		//(':' sec=INT ('.' ms=INT)?)?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//':'
		public Keyword getColonKeyword_6_3_0() { return cColonKeyword_6_3_0; }
		
		//sec=INT
		public Assignment getSecAssignment_6_3_1() { return cSecAssignment_6_3_1; }
		
		//INT
		public RuleCall getSecINTTerminalRuleCall_6_3_1_0() { return cSecINTTerminalRuleCall_6_3_1_0; }
		
		//('.' ms=INT)?
		public Group getGroup_6_3_2() { return cGroup_6_3_2; }
		
		//'.'
		public Keyword getFullStopKeyword_6_3_2_0() { return cFullStopKeyword_6_3_2_0; }
		
		//ms=INT
		public Assignment getMsAssignment_6_3_2_1() { return cMsAssignment_6_3_2_1; }
		
		//INT
		public RuleCall getMsINTTerminalRuleCall_6_3_2_1_0() { return cMsINTTerminalRuleCall_6_3_2_1_0; }
	}
	public class PathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.PathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PathName:
		//	LOWERCASE_ID ('.' LOWERCASE_ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWERCASE_ID ('.' LOWERCASE_ID)*
		public Group getGroup() { return cGroup; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0() { return cLOWERCASE_IDTerminalRuleCall_0; }
		
		//('.' LOWERCASE_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class ArgPathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ArgPathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cARGVALUETerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ArgPathName:
		//	(ARGVALUE | LOWERCASE_ID) ('.' LOWERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ARGVALUE | LOWERCASE_ID) ('.' LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//(ARGVALUE | LOWERCASE_ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ARGVALUE
		public RuleCall getARGVALUETerminalRuleCall_0_0() { return cARGVALUETerminalRuleCall_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_1() { return cLOWERCASE_IDTerminalRuleCall_0_1; }
		
		//('.' LOWERCASE_ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//Path:
		//	(LOWERCASE_ID | UPPERCASE_ID) (('.' | '/') (LOWERCASE_ID | UPPERCASE_ID))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(LOWERCASE_ID | UPPERCASE_ID) (('.' | '/') (LOWERCASE_ID | UPPERCASE_ID))*
		public Group getGroup() { return cGroup; }
		
		//(LOWERCASE_ID | UPPERCASE_ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_0() { return cLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_0_1() { return cUPPERCASE_IDTerminalRuleCall_0_1; }
		
		//(('.' | '/') (LOWERCASE_ID | UPPERCASE_ID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//('.' | '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }
		
		//(LOWERCASE_ID | UPPERCASE_ID)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_0() { return cLOWERCASE_IDTerminalRuleCall_1_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_1_1_1() { return cUPPERCASE_IDTerminalRuleCall_1_1_1; }
	}
	public class VersionNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.VersionNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//VersionNumber:
		//	INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT ('.' INT)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//('.' INT)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//(LOWERCASE_ID | UPPERCASE_ID)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_0() { return cLOWERCASE_IDTerminalRuleCall_3_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_3_1() { return cUPPERCASE_IDTerminalRuleCall_3_1; }
	}
	
	public class UnitOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UnitOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOVEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOVERSolidusKeyword_0_0 = (Keyword)cOVEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCARETEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCARETCircumflexAccentKeyword_1_0 = (Keyword)cCARETEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTARAsteriskKeyword_2_0 = (Keyword)cSTAREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnitOp:
		//	OVER='/' | CARET='^' | STAR='*';
		public EnumRule getRule() { return rule; }
		
		//OVER='/' | CARET='^' | STAR='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OVER='/'
		public EnumLiteralDeclaration getOVEREnumLiteralDeclaration_0() { return cOVEREnumLiteralDeclaration_0; }
		
		//'/'
		public Keyword getOVERSolidusKeyword_0_0() { return cOVERSolidusKeyword_0_0; }
		
		//CARET='^'
		public EnumLiteralDeclaration getCARETEnumLiteralDeclaration_1() { return cCARETEnumLiteralDeclaration_1; }
		
		//'^'
		public Keyword getCARETCircumflexAccentKeyword_1_0() { return cCARETCircumflexAccentKeyword_1_0; }
		
		//STAR='*'
		public EnumLiteralDeclaration getSTAREnumLiteralDeclaration_2() { return cSTAREnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getSTARAsteriskKeyword_2_0() { return cSTARAsteriskKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final PreambleElements pPreamble;
	private final DefinitionElements pDefinition;
	private final ArgumentDeclarationElements pArgumentDeclaration;
	private final MessageBodyElements pMessageBody;
	private final ActorInstantiationElements pActorInstantiation;
	private final MessageCallElements pMessageCall;
	private final StatementGroupElements pStatementGroup;
	private final MetadataElements pMetadata;
	private final MetadataPairElements pMetadataPair;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final NextStatementElements pNextStatement;
	private final AssignmentElements pAssignment;
	private final IfStatementElements pIfStatement;
	private final StatementBodyElements pStatementBody;
	private final WhileStatementElements pWhileStatement;
	private final DoStatementElements pDoStatement;
	private final ForStatementElements pForStatement;
	private final ActionsElements pActions;
	private final ValueElements pValue;
	private final ValueWithMetadataElements pValueWithMetadata;
	private final ValueWithoutTreeElements pValueWithoutTree;
	private final ValueWithMetadataWithoutTreeElements pValueWithMetadataWithoutTree;
	private final MatchElements pMatch;
	private final UrnIdElements pUrnId;
	private final UrnKvpElements pUrnKvp;
	private final ListElements pList;
	private final MapElements pMap;
	private final TreeElements pTree;
	private final MapEntryElements pMapEntry;
	private final ClassifierElements pClassifier;
	private final LookupTableElements pLookupTable;
	private final TableElements pTable;
	private final HeaderRowElements pHeaderRow;
	private final TableRowElements pTableRow;
	private final TableClassifierElements pTableClassifier;
	private final QuantityElements pQuantity;
	private final AnnotationElements pAnnotation;
	private final LiteralElements pLiteral;
	private final ParameterListElements pParameterList;
	private final KeyValuePairElements pKeyValuePair;
	private final UnitElementElements pUnitElement;
	private final UnitOpElements eUnitOp;
	private final UnitElements pUnit;
	private final CurrencyElements pCurrency;
	private final REL_OPERATORElements pREL_OPERATOR;
	private final NumberElements pNumber;
	private final DateElements pDate;
	private final PathNameElements pPathName;
	private final ArgPathNameElements pArgPathName;
	private final PathElements pPath;
	private final TerminalRule tKEY;
	private final TerminalRule tTAG;
	private final TerminalRule tUPPERCASE_ID;
	private final TerminalRule tUPPERCASE_PATH;
	private final TerminalRule tCAMELCASE_ID;
	private final VersionNumberElements pVersionNumber;
	private final TerminalRule tLOWERCASE_ID;
	private final TerminalRule tARGVALUE;
	private final TerminalRule tEXPR;
	private final TerminalRule tEMBEDDEDTEXT;
	private final TerminalRule tREGEXP;
	private final TerminalRule tOBSERVABLE;
	private final TerminalRule tSEPARATOR;
	private final TerminalRule tANNOTATION_ID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KactorsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPreamble = new PreambleElements();
		this.pDefinition = new DefinitionElements();
		this.pArgumentDeclaration = new ArgumentDeclarationElements();
		this.pMessageBody = new MessageBodyElements();
		this.pActorInstantiation = new ActorInstantiationElements();
		this.pMessageCall = new MessageCallElements();
		this.pStatementGroup = new StatementGroupElements();
		this.pMetadata = new MetadataElements();
		this.pMetadataPair = new MetadataPairElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pNextStatement = new NextStatementElements();
		this.pAssignment = new AssignmentElements();
		this.pIfStatement = new IfStatementElements();
		this.pStatementBody = new StatementBodyElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pDoStatement = new DoStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pActions = new ActionsElements();
		this.pValue = new ValueElements();
		this.pValueWithMetadata = new ValueWithMetadataElements();
		this.pValueWithoutTree = new ValueWithoutTreeElements();
		this.pValueWithMetadataWithoutTree = new ValueWithMetadataWithoutTreeElements();
		this.pMatch = new MatchElements();
		this.pUrnId = new UrnIdElements();
		this.pUrnKvp = new UrnKvpElements();
		this.pList = new ListElements();
		this.pMap = new MapElements();
		this.pTree = new TreeElements();
		this.pMapEntry = new MapEntryElements();
		this.pClassifier = new ClassifierElements();
		this.pLookupTable = new LookupTableElements();
		this.pTable = new TableElements();
		this.pHeaderRow = new HeaderRowElements();
		this.pTableRow = new TableRowElements();
		this.pTableClassifier = new TableClassifierElements();
		this.pQuantity = new QuantityElements();
		this.pAnnotation = new AnnotationElements();
		this.pLiteral = new LiteralElements();
		this.pParameterList = new ParameterListElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pUnitElement = new UnitElementElements();
		this.eUnitOp = new UnitOpElements();
		this.pUnit = new UnitElements();
		this.pCurrency = new CurrencyElements();
		this.pREL_OPERATOR = new REL_OPERATORElements();
		this.pNumber = new NumberElements();
		this.pDate = new DateElements();
		this.pPathName = new PathNameElements();
		this.pArgPathName = new ArgPathNameElements();
		this.pPath = new PathElements();
		this.tKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.KEY");
		this.tTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.TAG");
		this.tUPPERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UPPERCASE_ID");
		this.tUPPERCASE_PATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.UPPERCASE_PATH");
		this.tCAMELCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.CAMELCASE_ID");
		this.pVersionNumber = new VersionNumberElements();
		this.tLOWERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.LOWERCASE_ID");
		this.tARGVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ARGVALUE");
		this.tEXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.EXPR");
		this.tEMBEDDEDTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.EMBEDDEDTEXT");
		this.tREGEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.REGEXP");
		this.tOBSERVABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.OBSERVABLE");
		this.tSEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.SEPARATOR");
		this.tANNOTATION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kactors.Kactors.ANNOTATION_ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.integratedmodelling.kactors.Kactors".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} preamble=Preamble?
	//	definitions+=Definition*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Preamble:
	//	{Preamble} ((((mobile?='mobile' | desktop?='desktop' | web?='web')? app?='app' | app?='job') | test?='testcase' |
	//	component?='component' | user?='user' | library?=('trait' | 'library') | behavior?=('behavior' | 'behaviour'))
	//	name=PathName)?
	//	label=STRING? (('import' imports+=PathName (',' imports+=PathName)*)? & ('worldview' worldview=PathName)? &
	//	('observable' (observable=OBSERVABLE | observables=List))? & ('description' description=STRING)? & ('permissions'
	//	permissions=STRING)? & ('author' authors+=STRING)* & ('style' style=PathName)? & ('logo' logo=(Path | STRING))? &
	//	('version' version=VersionNumber)? & ('created' created=Date createcomment=STRING?)? & ('modified' modified=Date
	//	modcomment=STRING?)?);
	public PreambleElements getPreambleAccess() {
		return pPreamble;
	}
	
	public ParserRule getPreambleRule() {
		return getPreambleAccess().getRule();
	}
	
	///*
	// *  Action defines an action in the behavior;
	// *  Actor is an action that creates a "peer" actor, which remains alive until stopped 
	// *  and whose "main" is the action body (equivalent to importing another behavior and creating
	// *  the actor using new(behavior);
	// *  Component is an actor that has a view, i.e. can be considered a "widget" with view and
	// *  reactive behavior.
	// * 
	// */ Definition:
	//	annotations+=Annotation*
	//	'action' name=LOWERCASE_ID arguments=ArgumentDeclaration? ':' body=MessageBody;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//ArgumentDeclaration:
	//	{ArgumentDeclaration}
	//	'(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')';
	public ArgumentDeclarationElements getArgumentDeclarationAccess() {
		return pArgumentDeclaration;
	}
	
	public ParserRule getArgumentDeclarationRule() {
		return getArgumentDeclarationAccess().getRule();
	}
	
	///**
	// * Message body is as many statements of groups we want, ends at the next message or EOF.
	// */ MessageBody:
	//	{MessageBody} lists+=StatementList*;
	public MessageBodyElements getMessageBodyAccess() {
		return pMessageBody;
	}
	
	public ParserRule getMessageBodyRule() {
		return getMessageBodyAccess().getRule();
	}
	
	//ActorInstantiation:
	//	'new' behavior=PathName ('(' parameters=ParameterList? ')')? (':' actions=Actions)?;
	public ActorInstantiationElements getActorInstantiationAccess() {
		return pActorInstantiation;
	}
	
	public ParserRule getActorInstantiationRule() {
		return getActorInstantiationAccess().getRule();
	}
	
	//MessageCall:
	//	(name=ArgPathName ('(' parameters=ParameterList? ')')? | group=StatementGroup) (':' actions=Actions)?;
	public MessageCallElements getMessageCallAccess() {
		return pMessageCall;
	}
	
	public ParserRule getMessageCallRule() {
		return getMessageCallAccess().getRule();
	}
	
	//StatementGroup:
	//	{StatementGroup} '(' body=MessageBody? ')' metadata=Metadata? (':' actions=Actions)?;
	public StatementGroupElements getStatementGroupAccess() {
		return pStatementGroup;
	}
	
	public ParserRule getStatementGroupRule() {
		return getStatementGroupAccess().getRule();
	}
	
	//Metadata:
	//	pairs+=MetadataPair+;
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//MetadataPair:
	//	key=KEY value=Value?;
	public MetadataPairElements getMetadataPairAccess() {
		return pMetadataPair;
	}
	
	public ParserRule getMetadataPairRule() {
		return getMetadataPairAccess().getRule();
	}
	
	//StatementList:
	//	first=Statement next+=NextStatement*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Statement:
	//	(assignment=Assignment | group=StatementGroup | instantiation=ActorInstantiation | verb=MessageCall |
	//	text=EMBEDDEDTEXT metadata=Metadata? | if=IfStatement | while=WhileStatement | do=DoStatement | for=ForStatement |
	//	value=ValueWithMetadata) tag=TAG?;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//NextStatement Statement:
	//	',' (assignment=Assignment | verb=MessageCall | group=StatementGroup | text=EMBEDDEDTEXT | if=IfStatement |
	//	while=WhileStatement | do=DoStatement | for=ForStatement | value=ValueWithMetadata) tag=TAG?;
	public NextStatementElements getNextStatementAccess() {
		return pNextStatement;
	}
	
	public ParserRule getNextStatementRule() {
		return getNextStatementAccess().getRule();
	}
	
	//Assignment:
	//	'set' variable=LOWERCASE_ID value=Value;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//IfStatement:
	//	'if' expression=EXPR body=StatementBody ('else' 'if' elseIfExpression+=EXPR elseIfBody+=StatementBody)* ('else'
	//	elseCall=StatementBody)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	///** 
	// * Body of a statement is either a single message call (or fired value) or a set thereof in a group.
	// * */ StatementBody:
	//	verb=MessageCall | value=Value | group=StatementGroup;
	public StatementBodyElements getStatementBodyAccess() {
		return pStatementBody;
	}
	
	public ParserRule getStatementBodyRule() {
		return getStatementBodyAccess().getRule();
	}
	
	//WhileStatement:
	//	'while' expression=EXPR body=StatementBody;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//DoStatement:
	//	'do' body=StatementBody 'while' expression=EXPR;
	public DoStatementElements getDoStatementAccess() {
		return pDoStatement;
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}
	
	//ForStatement:
	//	'for' (id=LOWERCASE_ID 'in')? value=Value body=StatementBody;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//// a sequence of actions after a verb is sequential only if comma-separated. No match mean
	//// "upon successful firing" (i.e. firing not null, false or error).
	//// Don't switch the order or firing statements will take over the matches and not parse
	//Actions:
	//	match=Match |
	//	'(' matches+=Match matches+=Match* ')' | statement=Statement |
	//	'(' statements=StatementList ')';
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//Value:
	//	tree=Tree | argvalue=ARGVALUE | literal=Literal | urn=UrnId | id=PathName | list=List | map=Map |
	//	observable=OBSERVABLE | expression=EXPR | table=LookupTable | quantity=Quantity;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//ValueWithMetadata Value:
	//	(tree=Tree | argvalue=ARGVALUE | literal=Literal | urn=UrnId | id=PathName | list=List | map=Map |
	//	observable=OBSERVABLE | expression=EXPR | table=LookupTable | quantity=Quantity) metadata=Metadata?;
	public ValueWithMetadataElements getValueWithMetadataAccess() {
		return pValueWithMetadata;
	}
	
	public ParserRule getValueWithMetadataRule() {
		return getValueWithMetadataAccess().getRule();
	}
	
	//ValueWithoutTree Value:
	//	argvalue=ARGVALUE | literal=Literal | id=PathName | urn=UrnId | list=List | map=Map | observable=OBSERVABLE |
	//	expression=EXPR | table=LookupTable | quantity=Quantity;
	public ValueWithoutTreeElements getValueWithoutTreeAccess() {
		return pValueWithoutTree;
	}
	
	public ParserRule getValueWithoutTreeRule() {
		return getValueWithoutTreeAccess().getRule();
	}
	
	//ValueWithMetadataWithoutTree Value:
	//	(argvalue=ARGVALUE | literal=Literal | id=PathName | urn=UrnId | list=List | map=Map | observable=OBSERVABLE |
	//	expression=EXPR | table=LookupTable | quantity=Quantity) metadata=Metadata?;
	public ValueWithMetadataWithoutTreeElements getValueWithMetadataWithoutTreeAccess() {
		return pValueWithMetadataWithoutTree;
	}
	
	public ParserRule getValueWithMetadataWithoutTreeRule() {
		return getValueWithMetadataWithoutTreeAccess().getRule();
	}
	
	//Match:
	//	id=LOWERCASE_ID '->' body=StatementList | boolean=('true' | 'false') '->' body=StatementList | type=CAMELCASE_ID '->'
	//	body=StatementList | regexp=REGEXP '->' body=StatementList | observable=OBSERVABLE '->' body=StatementList |
	//	literal=Literal '->' body=StatementList | list=List '->' body=StatementList |
	//	'in' set=List '->' body=StatementList | quantity=Quantity '->' body=StatementList | expr=EXPR '->' body=StatementList
	//	| nodata='unknown' '->' body=StatementList | star?='*' '->' body=StatementList | anything?='#' '->'
	//	body=StatementList;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	///**
	// * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
	// * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
	// * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
	// * integer.
	// */ UrnId:
	//	'urn:klab:'? PathName ':' PathName ':' PathName ':' (Path | INT) (':' VersionNumber)? ('#' (Path | UrnKvp) ('&' (Path
	//	| UrnKvp))*)?;
	public UrnIdElements getUrnIdAccess() {
		return pUrnId;
	}
	
	public ParserRule getUrnIdRule() {
		return getUrnIdAccess().getRule();
	}
	
	//UrnKvp:
	//	PathName '=' (Path | INT);
	public UrnKvpElements getUrnKvpAccess() {
		return pUrnKvp;
	}
	
	public ParserRule getUrnKvpRule() {
		return getUrnKvpAccess().getRule();
	}
	
	//List:
	//	{List} '(' contents+=ValueWithMetadata* ')';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Map:
	//	{Map} '#{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}';
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//Tree:
	//	root=ValueWithMetadataWithoutTree (=> '<-' (value+=ValueWithMetadataWithoutTree | '(' value+=Tree ')'))+;
	public TreeElements getTreeAccess() {
		return pTree;
	}
	
	public ParserRule getTreeRule() {
		return getTreeAccess().getRule();
	}
	
	//MapEntry:
	//	classifier=Classifier ':' value=ValueWithMetadata;
	public MapEntryElements getMapEntryAccess() {
		return pMapEntry;
	}
	
	public ParserRule getMapEntryRule() {
		return getMapEntryAccess().getRule();
	}
	
	//Classifier:
	//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
	//	(rightLimit='inclusive' | 'exclusive')? | num=Number |
	//	'in' set=List | string=STRING | observable=OBSERVABLE | id=LOWERCASE_ID | op=REL_OPERATOR expression=Number |
	//	nodata='unknown' | star?='*';
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//// Lookup table literal. May be overkill.
	//LookupTable:
	//	{LookupTable}
	//	'{{' table=Table? '}}';
	public LookupTableElements getLookupTableAccess() {
		return pLookupTable;
	}
	
	public ParserRule getLookupTableRule() {
		return getLookupTableAccess().getRule();
	}
	
	//Table:
	//	(headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//HeaderRow:
	//	elements+=(LOWERCASE_ID | STRING) ('|' elements+=(LOWERCASE_ID | STRING))*;
	public HeaderRowElements getHeaderRowAccess() {
		return pHeaderRow;
	}
	
	public ParserRule getHeaderRowRule() {
		return getHeaderRowAccess().getRule();
	}
	
	//TableRow:
	//	elements+=TableClassifier ('|' elements+=TableClassifier)*;
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//TableClassifier:
	//	(boolean='true' | boolean='false') | num=Number | string=STRING | observable=OBSERVABLE | op=REL_OPERATOR
	//	expression=Number | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive'
	//	| 'exclusive')? |
	//	'in' set=List | quantity=Quantity | date=Date | expr=EXPR | nodata='unknown' | star?='*' | anything?='#';
	public TableClassifierElements getTableClassifierAccess() {
		return pTableClassifier;
	}
	
	public ParserRule getTableClassifierRule() {
		return getTableClassifierAccess().getRule();
	}
	
	//Quantity:
	//	value=Number (over?='/' | '.') (unit=Unit | currency=Currency);
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//Annotation:
	//	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//Literal:
	//	number=Number | from=Number 'to' to=Number | string=STRING | date=Date | boolean=('true' | 'false');
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//ParameterList:
	//	pairs+=KeyValuePair (=> (',')? pairs+=KeyValuePair)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//KeyValuePair:
	//	(name=LOWERCASE_ID (interactive?='?=' | '='))?
	//	value=Value | key=KEY | tag=TAG;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//UnitElement:
	//	id=(CAMELCASE_ID | LOWERCASE_ID | UPPERCASE_ID) |
	//	'(' unit=Unit ')';
	public UnitElementElements getUnitElementAccess() {
		return pUnitElement;
	}
	
	public ParserRule getUnitElementRule() {
		return getUnitElementAccess().getRule();
	}
	
	//enum UnitOp:
	//	OVER='/' | CARET='^' | STAR='*';
	public UnitOpElements getUnitOpAccess() {
		return eUnitOp;
	}
	
	public EnumRule getUnitOpRule() {
		return getUnitOpAccess().getRule();
	}
	
	//Unit:
	//	{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Currency:
	//	id=UPPERCASE_ID ('@' year=INT) (=> '/' units+=UnitElement)*;
	public CurrencyElements getCurrencyAccess() {
		return pCurrency;
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}
	
	//REL_OPERATOR:
	//	gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>=';
	public REL_OPERATORElements getREL_OPERATORAccess() {
		return pREL_OPERATOR;
	}
	
	public ParserRule getREL_OPERATORRule() {
		return getREL_OPERATORAccess().getRule();
	}
	
	//Number:
	//	('+' | negative?='-')? => real=INT => long?='l'? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+'
	//	| expNegative?='-')? exp=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Date:
	//	year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//PathName:
	//	LOWERCASE_ID ('.' LOWERCASE_ID)*;
	public PathNameElements getPathNameAccess() {
		return pPathName;
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	//ArgPathName:
	//	(ARGVALUE | LOWERCASE_ID) ('.' LOWERCASE_ID)?;
	public ArgPathNameElements getArgPathNameAccess() {
		return pArgPathName;
	}
	
	public ParserRule getArgPathNameRule() {
		return getArgPathNameAccess().getRule();
	}
	
	//Path:
	//	(LOWERCASE_ID | UPPERCASE_ID) (('.' | '/') (LOWERCASE_ID | UPPERCASE_ID))*;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//terminal KEY:
	//	(':' | '!') 'a'..'z' ('a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getKEYRule() {
		return tKEY;
	}
	
	//terminal TAG:
	//	'#' 'a'..'z' ('a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getTAGRule() {
		return tTAG;
	}
	
	//terminal UPPERCASE_ID:
	//	'A'..'Z' ('A'..'Z' | '_')*;
	public TerminalRule getUPPERCASE_IDRule() {
		return tUPPERCASE_ID;
	}
	
	//terminal UPPERCASE_PATH:
	//	UPPERCASE_ID ('.' UPPERCASE_ID)*;
	public TerminalRule getUPPERCASE_PATHRule() {
		return tUPPERCASE_PATH;
	}
	
	//terminal CAMELCASE_ID:
	//	'A'..'Z' ('A'..'z' | '0'..'9')*;
	public TerminalRule getCAMELCASE_IDRule() {
		return tCAMELCASE_ID;
	}
	
	//VersionNumber:
	//	INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?;
	public VersionNumberElements getVersionNumberAccess() {
		return pVersionNumber;
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//terminal LOWERCASE_ID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getLOWERCASE_IDRule() {
		return tLOWERCASE_ID;
	}
	
	//terminal ARGVALUE:
	//	'$' ('$' | '0'..'9'*);
	public TerminalRule getARGVALUERule() {
		return tARGVALUE;
	}
	
	//terminal EXPR:
	//	'[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	public TerminalRule getEXPRRule() {
		return tEXPR;
	}
	
	//terminal EMBEDDEDTEXT:
	//	'%%%' ' '? '-'* ('\r' | '\n')->'%%%' ' '? '-'*;
	public TerminalRule getEMBEDDEDTEXTRule() {
		return tEMBEDDEDTEXT;
	}
	
	//terminal REGEXP:
	//	'%' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '%' | '\\') | !('\\' | '%'))* '%';
	public TerminalRule getREGEXPRule() {
		return tREGEXP;
	}
	
	//terminal OBSERVABLE:
	//	'{' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '\\') | !('\\' | '}'))* '}';
	public TerminalRule getOBSERVABLERule() {
		return tOBSERVABLE;
	}
	
	//terminal SEPARATOR:
	//	'---' '-'*;
	public TerminalRule getSEPARATORRule() {
		return tSEPARATOR;
	}
	
	//terminal ANNOTATION_ID:
	//	'@' LOWERCASE_ID;
	public TerminalRule getANNOTATION_IDRule() {
		return tANNOTATION_ID;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
