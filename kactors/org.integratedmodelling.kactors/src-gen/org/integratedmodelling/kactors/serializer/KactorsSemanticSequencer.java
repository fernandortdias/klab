/*
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kactors.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.integratedmodelling.kactors.kactors.Actions;
import org.integratedmodelling.kactors.kactors.ArgumentDeclaration;
import org.integratedmodelling.kactors.kactors.Body;
import org.integratedmodelling.kactors.kactors.Call;
import org.integratedmodelling.kactors.kactors.Date;
import org.integratedmodelling.kactors.kactors.Definition;
import org.integratedmodelling.kactors.kactors.IfBody;
import org.integratedmodelling.kactors.kactors.IfStatement;
import org.integratedmodelling.kactors.kactors.KactorsPackage;
import org.integratedmodelling.kactors.kactors.KeyValuePair;
import org.integratedmodelling.kactors.kactors.Literal;
import org.integratedmodelling.kactors.kactors.Match;
import org.integratedmodelling.kactors.kactors.Model;
import org.integratedmodelling.kactors.kactors.ParameterList;
import org.integratedmodelling.kactors.kactors.Preamble;
import org.integratedmodelling.kactors.kactors.Statement;
import org.integratedmodelling.kactors.kactors.Value;
import org.integratedmodelling.kactors.services.KactorsGrammarAccess;

@SuppressWarnings("all")
public class KactorsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KactorsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KactorsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KactorsPackage.ACTIONS:
				sequence_Actions(context, (Actions) semanticObject); 
				return; 
			case KactorsPackage.ARGUMENT_DECLARATION:
				sequence_ArgumentDeclaration(context, (ArgumentDeclaration) semanticObject); 
				return; 
			case KactorsPackage.BODY:
				sequence_Body(context, (Body) semanticObject); 
				return; 
			case KactorsPackage.CALL:
				sequence_Call(context, (Call) semanticObject); 
				return; 
			case KactorsPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case KactorsPackage.DEFINITION:
				sequence_Definition(context, (Definition) semanticObject); 
				return; 
			case KactorsPackage.IF_BODY:
				sequence_IfBody(context, (IfBody) semanticObject); 
				return; 
			case KactorsPackage.IF_STATEMENT:
				sequence_IfStatement(context, (IfStatement) semanticObject); 
				return; 
			case KactorsPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case KactorsPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case KactorsPackage.MATCH:
				sequence_Match(context, (Match) semanticObject); 
				return; 
			case KactorsPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case KactorsPackage.NUMBER:
				sequence_Number(context, (org.integratedmodelling.kactors.kactors.Number) semanticObject); 
				return; 
			case KactorsPackage.PARAMETER_LIST:
				sequence_ParameterList(context, (ParameterList) semanticObject); 
				return; 
			case KactorsPackage.PREAMBLE:
				sequence_Preamble(context, (Preamble) semanticObject); 
				return; 
			case KactorsPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case KactorsPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actions returns Actions
	 *
	 * Constraint:
	 *     (call=Call | body=Body | match=Match | (matches+=Match matches+=Match*))
	 */
	protected void sequence_Actions(ISerializationContext context, Actions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArgumentDeclaration returns ArgumentDeclaration
	 *
	 * Constraint:
	 *     (ids+=LOWERCASE_ID ids+=LOWERCASE_ID*)?
	 */
	protected void sequence_ArgumentDeclaration(ISerializationContext context, ArgumentDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Body returns Body
	 *
	 * Constraint:
	 *     ((list+=Statement list+=Statement*) | (isgroup?='(' (group+=Statement group+=Statement*)?))
	 */
	protected void sequence_Body(ISerializationContext context, Body semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Call returns Call
	 *
	 * Constraint:
	 *     (name=LOWERCASE_ID parameters=ParameterList? actions=Actions?)
	 */
	protected void sequence_Call(ISerializationContext context, Call semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Date returns Date
	 *
	 * Constraint:
	 *     (year=INT bc?='BC'? month=INT day=INT (hour=INT min=INT (sec=INT ms=INT?)?)?)
	 */
	protected void sequence_Date(ISerializationContext context, Date semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Definition returns Definition
	 *
	 * Constraint:
	 *     (name=LOWERCASE_ID arguments=ArgumentDeclaration? body=Body)
	 */
	protected void sequence_Definition(ISerializationContext context, Definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IfBody returns IfBody
	 *
	 * Constraint:
	 *     (call=Call | body=Body)
	 */
	protected void sequence_IfBody(ISerializationContext context, IfBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IfStatement returns IfStatement
	 *
	 * Constraint:
	 *     (expression=EXPR body=IfBody (elseIfExpression+=EXPR elseIfCall+=IfBody)* elseCall=IfBody?)
	 */
	protected void sequence_IfStatement(ISerializationContext context, IfStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     ((name=LOWERCASE_ID interactive?='=?'?)? value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     (
	 *         number=Number | 
	 *         (from=Number to=Number) | 
	 *         string=STRING | 
	 *         date=Date | 
	 *         boolean='true' | 
	 *         boolean='false'
	 *     )
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Match returns Match
	 *
	 * Constraint:
	 *     (
	 *         (id?=LOWERCASE_ID body=Body) | 
	 *         (regexp?=REGEXP body=Body) | 
	 *         (observable?=OBSERVABLE body=Body) | 
	 *         (literal?=Literal body=Body) | 
	 *         (text?=STRING body=Body) | 
	 *         (arguments=ArgumentDeclaration body=Body)
	 *     )
	 */
	protected void sequence_Match(ISerializationContext context, Match semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (preamble=Preamble? definitions+=Definition*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Number returns Number
	 *
	 * Constraint:
	 *     (negative?='-'? real=INT long?='l'? (decimal?='.' decimalPart=INT)? ((exponential?='e' | exponential?='E') expNegative?='-'? exp=INT)?)
	 */
	protected void sequence_Number(ISerializationContext context, org.integratedmodelling.kactors.kactors.Number semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterList returns ParameterList
	 *
	 * Constraint:
	 *     (pairs+=KeyValuePair pairs+=KeyValuePair*)
	 */
	protected void sequence_ParameterList(ISerializationContext context, ParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Preamble returns Preamble
	 *
	 * Constraint:
	 *     (name=LOWERCASE_ID (worldview=LOWERCASE_ID | permissions=STRING | authors=STRING | version=LOWERCASE_ID)*)
	 */
	protected void sequence_Preamble(ISerializationContext context, Preamble semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     (call=Call | text=EMBEDDEDTEXT | if=IfStatement | (group+=Statement group+=Statement*))
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (argvalue=ARGVALUE | literal=Literal | id=LOWERCASE_ID | observable=OBSERVABLE | expression=EXPR)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
