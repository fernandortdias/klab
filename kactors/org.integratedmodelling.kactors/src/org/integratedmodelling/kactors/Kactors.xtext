grammar org.integratedmodelling.kactors.Kactors with org.eclipse.xtext.common.Terminals

generate kactors "http://www.integratedmodelling.org/kactors/Kactors"

Model: {Model}
	(preamble=Preamble)?
	definitions+=Definition*;

Preamble: {Preamble}
	// name, if there, must be first. Can be an actor (which may select an observable),
	// or a message library that may be imported by other actors, as long as the type 
	// is compatible or not given. An app is an actor that represents a
	// session, a user represents the user and gets any messages we don't recognize. Apps
	// can be called jobs (for automation w/o a view) or testcases (same for testing, in which case they will
	// identify test actions with @test and execute them with assertions enabled).
	(
		(   
			((public?='public')? (mobile?='mobile' |  desktop?='desktop' | web?='web')? app?='app') | 
			// scripts and test cases run in synchronous mode
			test?='testcase' | 
			script?='script' |
			// ? syn with script? remove?
			task?='task' |
			component?='component' | 
			user?='user' | 
			library?=('trait'|'library') |
			behavior?=('behavior'|'behaviour')
		) name=PathName
	)?
	label=(STRING|LOCALIZED_STRING_REFERENCE)?
	(
		('import' imports+=PathName (',' imports+=PathName)*)? &
		('worldview' worldview=PathName)? &
		('observable' (observable=Observable | observables=List))? &
		('description' description=(STRING|LOCALIZED_STRING_REFERENCE))? &
		('permissions' permissions=(STRING|LOCALIZED_STRING_REFERENCE))? &
		('author' authors+=(STRING|LOCALIZED_STRING_REFERENCE))* &
		('style' (style=PathName ('with' inlineStyle=Map)? | inlineStyle=Map)?)? &
		('logo' logo=(Path|(STRING|LOCALIZED_STRING_REFERENCE)))? &
		('version' version=VersionNumber)? & 
		('versionstring' versionString=STRING)? & 
		('locale' locale=LOCALE)? & 
		('output' output=STRING)? & 
		('created' created=Date (createcomment=STRING)?)? &
		('modified' modified=Date (modcomment=STRING)?)? 
	)
;

/*
 *  Action defines an action in the behavior;
 *  Actor is an action that creates a "peer" actor, which remains alive until stopped 
 *  and whose "main" is the action body (equivalent to importing another behavior and creating
 *  the actor using new(behavior);
 *  Component is an actor that has a view, i.e. can be considered a "widget" with view and
 *  reactive behavior.
 * 
 */
Definition:
	annotations+=Annotation*
	 ('action' | function?='function') name=LOWERCASE_ID (arguments=ArgumentDeclaration)? ':' body=MessageBody;

ArgumentDeclaration: {ArgumentDeclaration}
	'(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')'
;

/**
 * Message body is as many statements of groups we want, ends at the next message or EOF.
 */
MessageBody: {MessageBody} lists+=StatementList*;

ActorInstantiation:
	'create' behavior=PathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)? metadata=Metadata?
;

MessageCall:
	(methodCalls+=MethodCall '.')* (name=ArgPathName ('(' (parameters=ParameterList)? ')')? |  group=StatementGroup) (':' actions=Actions)?
;

StatementGroup: {StatementGroup} '(' body=MessageBody? ')' metadata=Metadata? (':' actions=Actions)?
;

Metadata:
	pairs+=MetadataPair+
;

MetadataPair:
	key=KEY (value=Literal)?
;

StatementList:
	first=Statement next+=NextStatement*
;

Statement:
	(assignment=Assignment |
	 group=StatementGroup |
	 instantiation=ActorInstantiation |
	 verb=MessageCall |
	 text=EMBEDDEDTEXT (metadata=Metadata)? |
	 if=IfStatement |
	 while=WhileStatement |
	 assert=AssertStatement |
	 do=DoStatement |
	 for=ForStatement |
	 // this means "fire this" or "return this"
	 value=ValueWithMetadata) 
	 // all statement may be tagged for reference
	 (tag=TAG)?
;

MethodCall returns MessageCall:
	name=ArgPathName ('(' (parameters=ParameterList)? ')')?
;

ParenthesizedMethodCall returns MessageCall:
	name=ArgPathName => '(' (parameters=ParameterList)? ')'
;

MethodCallWithActions returns MessageCall:
	name=ArgPathName ('(' (parameters=ParameterList)? ')')? (':' actions=Actions)?
;

AssertStatement:
	'assert' 
		assertions+=Assertion (',' assertions+=Assertion)*;

Assertion:
		(expression=EXPR | 
		(methodCalls+=MethodCall '.')* methodCalls+=MethodCallWithActions) 
		('is' (ok='ok' | value=Value))?
;

NextStatement returns Statement:
	',' (
		assignment=Assignment |
		verb=MessageCall |
		group=StatementGroup |
		text=EMBEDDEDTEXT |
		if=IfStatement |
		while=WhileStatement |
		do=DoStatement |
		for=ForStatement |
		// this means "fire this" 
		value=ValueWithMetadata
	)
	// all statement may be tagged for reference
	(tag=TAG)?
;

Assignment:
	'set' (recipient=LOWERCASE_ID '.')? variable=LOWERCASE_ID value=ValueWithConstructor
;

IfStatement:
	'if' (literal=Literal | expression=EXPR | variable=LOWERCASE_ID) 
		body=StatementBody	
		('else' 'if' elseIfBody+=ElseIfStatementBody)* 
		('else' elseCall=StatementBody)?
;

ElseIfStatementBody:
	(literal=Literal | expression=EXPR | variable=LOWERCASE_ID) body=StatementBody
;

/** 
 * Body of a statement is either a single message call (or fired value) or a set thereof in a group.
 * */
StatementBody: verb=MessageCall | value=Value | group=StatementGroup;

WhileStatement:
	'while' expression=EXPR body=StatementBody
;

DoStatement:
	'do' body=StatementBody 'while' expression=EXPR
;

ForStatement:
	'for' (id=LOWERCASE_ID 'in')? value=Value body=StatementBody
;

// a sequence of actions after a verb is sequential only if comma-separated. No match mean
// "upon successful firing" (i.e. firing not null, false or error).
// Don't switch the order or firing statements will take over the matches and not parse
Actions: 
	match=Match |
	'(' matches+=Match (matches+=Match)* ')' |
	statement=Statement |
	'(' statements=StatementList ')' 
;


Value:
	(deferred?='`')? (tree=Tree |
	empty?='empty' |
	argvalue=ARGVALUE |
	urn=UrnId | 
	literal=Literal |
	id=PathName |
	list=List |
	map=Map |
	constant=UPPERCASE_ID |
	observable=Observable | 
	expression=EXPR |
	table=LookupTable |
	quantity=Quantity) ('?' then=Value ':' else=Value)?
;

ValueWithConstructor returns Value:
	(deferred?='`')? (constructor=Constructor |
	(methodCalls+=ParenthesizedMethodCall '.')* methodCalls+=ParenthesizedMethodCall |
	tree=Tree |
	empty?='empty' |
	argvalue=ARGVALUE |
	literal=Literal |
	urn=UrnId | 
	id=PathName |
	list=List |
	map=Map |
	constant=UPPERCASE_ID |
	observable=Observable | 
	expression=EXPR |
	table=LookupTable |
	quantity=Quantity  |
	component?='new' behavior=PathName ('(' (parameters=ParameterList)? ')')? )
	 ('?' then=ValueWithConstructor ':' else=ValueWithConstructor)?
	;

Constructor:
	(path=QuotablePathName '.')? classid=CAMELCASE_ID ('(' (parameters=ParameterList)? ')')?
;

ValueWithMetadata returns Value:
	(deferred?='`')? (tree=Tree |
	 argvalue=ARGVALUE |
	 literal=Literal |
	 urn=UrnId | 
	 constant=UPPERCASE_ID |
	 id=PathName |
	 list=List |
	 map=Map |
	 observable=Observable | 
	 expression=EXPR |
	 table=LookupTable |
	 quantity=Quantity) 
	 (metadata=Metadata)?
	;

//ValueWithoutTree returns Value:
//	argvalue=ARGVALUE |
//	literal=Literal |
//	id=PathName |
//	urn=UrnId | 
//	list=List |
//	map=Map |
//	observable=Observable | 
//	expression=EXPR |
//	table=LookupTable |
//	quantity=Quantity
//	;
//	
ValueWithMetadataWithoutTree returns Value:
	(deferred?='`')? ((argvalue=ARGVALUE |
	literal=Literal |
	id=PathName |
	urn=UrnId | 
	list=List |
	map=Map |
	observable=Observable | 
	expression=EXPR |
	table=LookupTable |
	quantity=Quantity)) ('?' then=Value ':' else=Value)? 
	(metadata=Metadata)?
	;


Match:
	id=LOWERCASE_ID '->' body=StatementList  |
	annotation=ANNOTATION_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	constant=UPPERCASE_ID '->' body=StatementList  |
	boolean=('true'|'false') '->' body=StatementList  |
	type=CAMELCASE_ID ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	regexp=REGEXP ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	observable=Observable ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	literal=Literal '->' body=StatementList |
	list=List '->' body=StatementList |
	'in' set=List ('as' formalName=LOWERCASE_ID)? '->' body=StatementList | 
	quantity=Quantity '->' body=StatementList |
	expr=EXPR ('as' formalName=LOWERCASE_ID)? '->' body=StatementList |
	nodata='unknown' '->' body=StatementList |
	star?='*' '->' body=StatementList |
	anything?='#''->' body=StatementList |
	empty?='empty' '->' body=StatementList |
	exception?='exception' ('as' formalName=LOWERCASE_ID)? '->' body=StatementList
;

/**
 * URN is 4 sections: node (or 'klab' for internal resources), catalog (or adapter for internal resources), namespace and
 * resource ID. Admits a version number and a fragment (with only lowercase_id chars in it). It is
 * legal, but not required, to start with the default prefix urn:klab:. The 4th path element (the ID) may be
 * integer.
 */
UrnId:
	('urn:klab:')? PathName ':'  PathName ':' PathName ':' (Path|INT) (':' VersionNumber)? ('#' (Path|UrnKvp) ('&' (Path|UrnKvp))*)?;
	
UrnKvp:
	PathName '=' (Path|INT)
;	
	
List:
	{List} '(' contents+=ListElement* ')';
	
ListElement:
	value=ValueWithMetadata |
	tag=TAG	
;	
	
Map:
	{Map} '#{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}'
;

Tree:
	root=ValueWithMetadataWithoutTree (=> '<-' (value+=ValueWithMetadataWithoutTree | => ('(' value+=Tree ')')))+
;

MapEntry:
	classifier=Classifier ':' value=ValueWithMetadata
;	

Classifier:
	(boolean='true' | boolean='false') | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	num=Number | 
	'in' set=List | 
	string=STRING | 
	observable=Observable | 
	id = (LOWERCASE_ID | LOWERCASE_ID_DASH) |
	op=REL_OPERATOR expression=Number | 
	nodata='unknown' |
	map=Map |
	star?='*';	

Observable:
	'{' observable=ObservableSemantics '}'
;

// Lookup table literal. May be overkill.
LookupTable: {LookupTable}
	'{{' table=Table? '}}'
;

Table:
	(headers=HeaderRow SEPARATOR)? rows+=TableRow (',' rows+=TableRow)*;

HeaderRow:
	elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)) ('|' elements+=(LOWERCASE_ID|(STRING|LOCALIZED_STRING_REFERENCE)))*
;

TableRow:
	elements+=TableClassifier ('|' elements+=TableClassifier)*
;

TableClassifier:
	(boolean='true' | boolean='false') | 
	num=Number | 
	string=STRING | 
	observable=Observable | 
	op=REL_OPERATOR expression=Number | 
	int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')? |
	'in' set=List | 
	quantity=Quantity |
	date=Date |
	expr=EXPR |
	nodata='unknown' |
	star?='*' |
	anything?='#';

Quantity:
	value=Number (over?='/' | '.') (unit=Unit | currency=Currency)
;
Annotation:
	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
	
Literal:
	number=Number | from=Number 'to' to=Number | string=(STRING|LOCALIZED_STRING_REFERENCE) | date=Date | boolean=('true' | 'false');
	
ParameterList:
	pairs+=KeyValuePair (=> (',')? pairs+=KeyValuePair)*;
	
KeyValuePair:
    tag=TAG |
	(name=(LOWERCASE_ID) (interactive?='?=' | '='))? value=ValueWithConstructor |
    key=KEY 
;

UnitElement:
	id=(CAMELCASE_ID|LOWERCASE_ID|UPPERCASE_ID) |
	'(' unit=Unit ')';

enum UnitOp:
	OVER='/' | CARET='^' | STAR='*';

Unit:
	{Unit} (root=UnitElement)? (=> (connectors+=UnitOp) (units+=UnitElement))*;

Currency:
	id=UPPERCASE_ID ('@' year=INT) (=> '/' (units+=UnitElement))*;
		
REL_OPERATOR:
	(gt?='>' |
	lt?='<' |
	eq?='=' |
	ne?='!=' |
	le?='<=' |
	ge?='>=');
	
Number:
	('+' | negative?='-')? => real=INT (=> long?='l')? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?;

Date:
	year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
;

PathName:
	LOWERCASE_ID ('.' LOWERCASE_ID)*
;

QuotablePathName:
	(LOWERCASE_ID|QUOTED_LOWERCASE_ID) ('.' (LOWERCASE_ID|QUOTED_LOWERCASE_ID))*
;

ArgPathName:
	(ARGVALUE | LOWERCASE_ID) ('.' LOWERCASE_ID)?
;

Path:
	(LOWERCASE_ID|UPPERCASE_ID) (('.' | '/') (LOWERCASE_ID|UPPERCASE_ID))*
;

/*
 * Observable semantics rules from k.IM. Syntax peers for concepts are exclusively to allow syntax highlighting 
 * and validation of observables through the imported k.IM validator (as behaviors are read after model files).
 * Concepts can only be referenced in full notation for obvious reasons.
 * ------------------------------------------------------------------------------------------------------------
 */

ObservableSemantics:
	declaration=ConceptDeclaration
	(
		(
			('in' (unit=Unit | currency=Currency)) |
			('per' unit=Unit)
		)? &
		(valueOperators+=ValueOperator (valueOperators+=ValueOperator)*)? &
		(optional?='optional' | 'required')? &
		(from=Number 'to' to=Number)? &
		('named' name=(LOWERCASE_ID|STRING))?
	);
	
ValueOperator:
	(modifier=VALUE_OPERATOR | downTo='down' 'to') 
		(comparisonValue=Number| comparisonQuantity=Quantity | comparisonConcept+=ConceptDeclaration (',' comparisonConcept+=ConceptDeclaration)* | ('(' comparisonObservable=ObservableSemantics ')')) |
	total='total' | 
	averaged='averaged' | 
	summed='summed'
;

ConceptDeclaration:
	
	main+=Concept+ 
		// binary semantic operators; also 'as', 'by' and 'follows' handled in other rules
		(
			// primary inherency (when secondary is given using 'within')
			('of' ((distributedOfInherency?='each')? inherency=SimpleConceptDeclaration))? &
			// purpose (achievement event created from target)
			('for' ((distributedForInherency?='each')? motivation=SimpleConceptDeclaration))? &
			// compresence (subject, process, event, presence or partitioned quality)
			('with' compresent=SimpleConceptDeclaration)? &
			// cause towards self - causant can be anything (?)
			('caused' 'by' causant=SimpleConceptDeclaration)? &
			// spatial adjacency (see 'follows' operator for temporal adjacency in events) - subject, event or relationship
			('adjacent' 'to' adjacent=SimpleConceptDeclaration)? &
			// being contained - subject
			('contained' 'in' container=SimpleConceptDeclaration)? &
			// containing - subject
			('containing' contained=SimpleConceptDeclaration)? &
			// cause towards event (?)
			('causing'   caused=SimpleConceptDeclaration)? &
			// concomitant with event (?)
			('during'   ((distributedTemporalInherency?='each')? during=SimpleConceptDeclaration))? &
			// context or secondary inherency
			('within' ((distributedWithinInherency?='each')? context=SimpleConceptDeclaration))? &
			// for relationships: specialize source and target types
			('linking' relationshipSource=SimpleConceptDeclaration 'to' relationshipTarget=SimpleConceptDeclaration)?
		)?
;	

VALUE_OPERATOR:
	'>'  |
	'>=' |
	'<='|
	'<'|
	'where'|
	'=='|
	'='|
	'without'|
	'!='|
	'plus'|
	'minus'|
	'times'|
	'over' |
	'by' 
;
	
Concept:
	(negated?=('not'|'no'))? name=NamespaceId 
		// if the following is there, the name becomes an alias for the authority concept
		(authConcept?='identified' 'as' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH))? |
	// unary operators
	presence?='presence' 'of' concept=SimpleConceptDeclaration |
	count?='count' 'of' concept=SimpleConceptDeclaration |
	distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration |
	probability?='probability' 'of' concept=SimpleConceptDeclaration |
	assessment?='assessment' 'of' concept=SimpleConceptDeclaration |
	('change' (change?='in' | rate?='rate' 'of') | change?='changed') concept=SimpleConceptDeclaration |
	uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration |
	magnitude?='magnitude' 'of' concept=SimpleConceptDeclaration |
	level?='level' 'of' concept=SimpleConceptDeclaration |
	type?='type' 'of' concept=SimpleConceptDeclaration |
	observability?='observability' 'of' concept=SimpleConceptDeclaration |
	proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	percentage?='percentage' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? |
	ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration |
	(monetary?='monetary')? value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? |
	occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration |
	// this form specifies an authority concept with no alias (the authority may provide a default label)
	authConcept?='identity' (stringIdentifier=(ID|STRING|UPPERCASE_ID|CAMELCASE_ID) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID|UPPERCASE_PATH) |
	'(' declaration=Expression ')';
	

// backtick allows quoting namespaces that have the same names as keywords. If the keyword is inside the namespace,
// use a string.
NamespaceId:
	QuotablePathName ':' CAMELCASE_ID;
	
Expression returns ConceptDeclaration:
	Term
;

Term returns ConceptDeclaration:
	Factor (operators+='or' operands+=Factor)*
;
Factor returns ConceptDeclaration:
	// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
	ConceptDeclaration (operators+=('and'|'follows') operands+=Term)*
;

/*
 * Declaration without inherency and context, used in Concept to ensure that
 * the 'within' and 'of' remain outer-level unless parenthesesized.
 */
SimpleConceptDeclaration returns ConceptDeclaration:
	(name=STRING)? main+=Concept+
;

/**
 * ----- end concept stuff from k.IM grammar
 */

terminal KEY:
	(':'|'!')('a'..'z') ('a'..'z' | '0'..'9'| '_')*;

terminal TAG:
	('#')('a'..'z') ('a'..'z' | '0'..'9'| '_')*;

terminal LOCALIZED_STRING_REFERENCE:
	('#')('A'..'Z') ('A'..'Z' | '0'..'9'| '_')*;

terminal UPPERCASE_ID:
	('A'..'Z') ('A'..'Z' | '_')*;

terminal UPPERCASE_PATH:
	UPPERCASE_ID ('.' UPPERCASE_ID)*;

terminal CAMELCASE_ID:
	('A'..'Z') ('A'..'z'|'0'..'9')*;

VersionNumber:
	INT ('.' INT ('.' INT)?)? ('-')? ((LOWERCASE_ID|UPPERCASE_ID))?;

terminal LOWERCASE_ID:
	('a'..'z') ('a'..'z' | '0'..'9'| '_')*;

terminal LOCALE:
	('a'..'z')('a'..'z')('-' ('A'..'Z')('A'..'Z'))*
;

terminal QUOTED_LOWERCASE_ID:
	('`')('a'..'z')('a'..'z' | '0'..'9'| '_')*;

terminal LOWERCASE_ID_DASH:
	('a'..'z') ('a'..'z' | '0'..'9'| '_' | '-')*;

terminal ARGVALUE:
	'$' ('$' | ('0'..'9')*);

terminal EXPR:
	'[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	
terminal EMBEDDEDTEXT:
	'%%%'(' ')?('-')*('\r'|'\n') -> '%%%'(' ')?('-')*;

terminal REGEXP:
	'%' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '%' | '\\') | !('\\' | '%'))* '%';
	
//terminal OBSERVABLE:
//	'{' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '\\') | !('\\' | '}'))* '}';
		
terminal SEPARATOR:
	'---' ('-')*;

terminal ANNOTATION_ID:
	'@' LOWERCASE_ID;