/*
 * generated by Xtext 2.18.0
 */
package org.integratedmodelling.kactors.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.integratedmodelling.kactors.ide.contentassist.antlr.internal.InternalKactorsParser;
import org.integratedmodelling.kactors.services.KactorsGrammarAccess;

public class KactorsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(KactorsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, KactorsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getKeyValuePairAccess().getAlternatives_0_1(), "rule__KeyValuePair__Alternatives_0_1");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getBooleanAlternatives_4_0(), "rule__Literal__BooleanAlternatives_4_0");
			builder.put(grammarAccess.getBodyAccess().getAlternatives(), "rule__Body__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getIfBodyAccess().getAlternatives(), "rule__IfBody__Alternatives");
			builder.put(grammarAccess.getCallAccess().getAlternatives_2(), "rule__Call__Alternatives_2");
			builder.put(grammarAccess.getActionsAccess().getAlternatives(), "rule__Actions__Alternatives");
			builder.put(grammarAccess.getMatchAccess().getAlternatives(), "rule__Match__Alternatives");
			builder.put(grammarAccess.getNumberAccess().getAlternatives_0(), "rule__Number__Alternatives_0");
			builder.put(grammarAccess.getNumberAccess().getExponentialAlternatives_4_0_0_0(), "rule__Number__ExponentialAlternatives_4_0_0_0");
			builder.put(grammarAccess.getNumberAccess().getAlternatives_4_0_1(), "rule__Number__Alternatives_4_0_1");
			builder.put(grammarAccess.getDateAccess().getAlternatives_1(), "rule__Date__Alternatives_1");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getPreambleAccess().getGroup(), "rule__Preamble__Group__0");
			builder.put(grammarAccess.getPreambleAccess().getGroup_2_0(), "rule__Preamble__Group_2_0__0");
			builder.put(grammarAccess.getPreambleAccess().getGroup_2_1(), "rule__Preamble__Group_2_1__0");
			builder.put(grammarAccess.getPreambleAccess().getGroup_2_2(), "rule__Preamble__Group_2_2__0");
			builder.put(grammarAccess.getPreambleAccess().getGroup_2_3(), "rule__Preamble__Group_2_3__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
			builder.put(grammarAccess.getArgumentDeclarationAccess().getGroup(), "rule__ArgumentDeclaration__Group__0");
			builder.put(grammarAccess.getArgumentDeclarationAccess().getGroup_2(), "rule__ArgumentDeclaration__Group_2__0");
			builder.put(grammarAccess.getArgumentDeclarationAccess().getGroup_2_1(), "rule__ArgumentDeclaration__Group_2_1__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getKeyValuePairAccess().getGroup(), "rule__KeyValuePair__Group__0");
			builder.put(grammarAccess.getKeyValuePairAccess().getGroup_0(), "rule__KeyValuePair__Group_0__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
			builder.put(grammarAccess.getBodyAccess().getGroup_0(), "rule__Body__Group_0__0");
			builder.put(grammarAccess.getBodyAccess().getGroup_1(), "rule__Body__Group_1__0");
			builder.put(grammarAccess.getBodyAccess().getGroup_1_1(), "rule__Body__Group_1_1__0");
			builder.put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup_3(), "rule__IfStatement__Group_3__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup_4(), "rule__IfStatement__Group_4__0");
			builder.put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
			builder.put(grammarAccess.getCallAccess().getGroup_1(), "rule__Call__Group_1__0");
			builder.put(grammarAccess.getCallAccess().getGroup_2_0(), "rule__Call__Group_2_0__0");
			builder.put(grammarAccess.getActionsAccess().getGroup_3(), "rule__Actions__Group_3__0");
			builder.put(grammarAccess.getMatchAccess().getGroup_0(), "rule__Match__Group_0__0");
			builder.put(grammarAccess.getMatchAccess().getGroup_1(), "rule__Match__Group_1__0");
			builder.put(grammarAccess.getMatchAccess().getGroup_2(), "rule__Match__Group_2__0");
			builder.put(grammarAccess.getMatchAccess().getGroup_3(), "rule__Match__Group_3__0");
			builder.put(grammarAccess.getMatchAccess().getGroup_4(), "rule__Match__Group_4__0");
			builder.put(grammarAccess.getMatchAccess().getGroup_5(), "rule__Match__Group_5__0");
			builder.put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_3(), "rule__Number__Group_3__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_3_0(), "rule__Number__Group_3_0__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_4(), "rule__Number__Group_4__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_4_0(), "rule__Number__Group_4_0__0");
			builder.put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
			builder.put(grammarAccess.getDateAccess().getGroup_6(), "rule__Date__Group_6__0");
			builder.put(grammarAccess.getDateAccess().getGroup_6_3(), "rule__Date__Group_6_3__0");
			builder.put(grammarAccess.getDateAccess().getGroup_6_3_2(), "rule__Date__Group_6_3_2__0");
			builder.put(grammarAccess.getModelAccess().getPreambleAssignment_1(), "rule__Model__PreambleAssignment_1");
			builder.put(grammarAccess.getModelAccess().getDefinitionsAssignment_2(), "rule__Model__DefinitionsAssignment_2");
			builder.put(grammarAccess.getPreambleAccess().getNameAssignment_1(), "rule__Preamble__NameAssignment_1");
			builder.put(grammarAccess.getPreambleAccess().getWorldviewAssignment_2_0_1(), "rule__Preamble__WorldviewAssignment_2_0_1");
			builder.put(grammarAccess.getPreambleAccess().getPermissionsAssignment_2_1_1(), "rule__Preamble__PermissionsAssignment_2_1_1");
			builder.put(grammarAccess.getPreambleAccess().getAuthorsAssignment_2_2_1(), "rule__Preamble__AuthorsAssignment_2_2_1");
			builder.put(grammarAccess.getPreambleAccess().getVersionAssignment_2_3_1(), "rule__Preamble__VersionAssignment_2_3_1");
			builder.put(grammarAccess.getDefinitionAccess().getNameAssignment_1(), "rule__Definition__NameAssignment_1");
			builder.put(grammarAccess.getDefinitionAccess().getArgumentsAssignment_2(), "rule__Definition__ArgumentsAssignment_2");
			builder.put(grammarAccess.getDefinitionAccess().getBodyAssignment_4(), "rule__Definition__BodyAssignment_4");
			builder.put(grammarAccess.getArgumentDeclarationAccess().getIdsAssignment_2_0(), "rule__ArgumentDeclaration__IdsAssignment_2_0");
			builder.put(grammarAccess.getArgumentDeclarationAccess().getIdsAssignment_2_1_1(), "rule__ArgumentDeclaration__IdsAssignment_2_1_1");
			builder.put(grammarAccess.getParameterListAccess().getPairsAssignment_0(), "rule__ParameterList__PairsAssignment_0");
			builder.put(grammarAccess.getParameterListAccess().getPairsAssignment_1_1(), "rule__ParameterList__PairsAssignment_1_1");
			builder.put(grammarAccess.getKeyValuePairAccess().getNameAssignment_0_0(), "rule__KeyValuePair__NameAssignment_0_0");
			builder.put(grammarAccess.getKeyValuePairAccess().getInteractiveAssignment_0_1_0(), "rule__KeyValuePair__InteractiveAssignment_0_1_0");
			builder.put(grammarAccess.getKeyValuePairAccess().getValueAssignment_1(), "rule__KeyValuePair__ValueAssignment_1");
			builder.put(grammarAccess.getValueAccess().getArgvalueAssignment_0(), "rule__Value__ArgvalueAssignment_0");
			builder.put(grammarAccess.getValueAccess().getLiteralAssignment_1(), "rule__Value__LiteralAssignment_1");
			builder.put(grammarAccess.getValueAccess().getIdAssignment_2(), "rule__Value__IdAssignment_2");
			builder.put(grammarAccess.getValueAccess().getObservableAssignment_3(), "rule__Value__ObservableAssignment_3");
			builder.put(grammarAccess.getValueAccess().getExpressionAssignment_4(), "rule__Value__ExpressionAssignment_4");
			builder.put(grammarAccess.getLiteralAccess().getNumberAssignment_0(), "rule__Literal__NumberAssignment_0");
			builder.put(grammarAccess.getLiteralAccess().getFromAssignment_1_0(), "rule__Literal__FromAssignment_1_0");
			builder.put(grammarAccess.getLiteralAccess().getToAssignment_1_2(), "rule__Literal__ToAssignment_1_2");
			builder.put(grammarAccess.getLiteralAccess().getStringAssignment_2(), "rule__Literal__StringAssignment_2");
			builder.put(grammarAccess.getLiteralAccess().getDateAssignment_3(), "rule__Literal__DateAssignment_3");
			builder.put(grammarAccess.getLiteralAccess().getBooleanAssignment_4(), "rule__Literal__BooleanAssignment_4");
			builder.put(grammarAccess.getBodyAccess().getListAssignment_0_1(), "rule__Body__ListAssignment_0_1");
			builder.put(grammarAccess.getBodyAccess().getListAssignment_0_2(), "rule__Body__ListAssignment_0_2");
			builder.put(grammarAccess.getBodyAccess().getIsgroupAssignment_1_0(), "rule__Body__IsgroupAssignment_1_0");
			builder.put(grammarAccess.getBodyAccess().getGroupAssignment_1_1_0(), "rule__Body__GroupAssignment_1_1_0");
			builder.put(grammarAccess.getBodyAccess().getGroupAssignment_1_1_1(), "rule__Body__GroupAssignment_1_1_1");
			builder.put(grammarAccess.getStatementAccess().getCallAssignment_0(), "rule__Statement__CallAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getTextAssignment_1(), "rule__Statement__TextAssignment_1");
			builder.put(grammarAccess.getStatementAccess().getIfAssignment_2(), "rule__Statement__IfAssignment_2");
			builder.put(grammarAccess.getStatementAccess().getGroupAssignment_3_1(), "rule__Statement__GroupAssignment_3_1");
			builder.put(grammarAccess.getStatementAccess().getGroupAssignment_3_2(), "rule__Statement__GroupAssignment_3_2");
			builder.put(grammarAccess.getIfStatementAccess().getExpressionAssignment_1(), "rule__IfStatement__ExpressionAssignment_1");
			builder.put(grammarAccess.getIfStatementAccess().getBodyAssignment_2(), "rule__IfStatement__BodyAssignment_2");
			builder.put(grammarAccess.getIfStatementAccess().getElseIfExpressionAssignment_3_2(), "rule__IfStatement__ElseIfExpressionAssignment_3_2");
			builder.put(grammarAccess.getIfStatementAccess().getElseIfCallAssignment_3_3(), "rule__IfStatement__ElseIfCallAssignment_3_3");
			builder.put(grammarAccess.getIfStatementAccess().getElseCallAssignment_4_1(), "rule__IfStatement__ElseCallAssignment_4_1");
			builder.put(grammarAccess.getIfBodyAccess().getCallAssignment_0(), "rule__IfBody__CallAssignment_0");
			builder.put(grammarAccess.getIfBodyAccess().getBodyAssignment_1(), "rule__IfBody__BodyAssignment_1");
			builder.put(grammarAccess.getCallAccess().getNameAssignment_0(), "rule__Call__NameAssignment_0");
			builder.put(grammarAccess.getCallAccess().getParametersAssignment_1_1(), "rule__Call__ParametersAssignment_1_1");
			builder.put(grammarAccess.getCallAccess().getActionsAssignment_2_0_1(), "rule__Call__ActionsAssignment_2_0_1");
			builder.put(grammarAccess.getActionsAccess().getCallAssignment_0(), "rule__Actions__CallAssignment_0");
			builder.put(grammarAccess.getActionsAccess().getBodyAssignment_1(), "rule__Actions__BodyAssignment_1");
			builder.put(grammarAccess.getActionsAccess().getMatchAssignment_2(), "rule__Actions__MatchAssignment_2");
			builder.put(grammarAccess.getActionsAccess().getMatchesAssignment_3_1(), "rule__Actions__MatchesAssignment_3_1");
			builder.put(grammarAccess.getActionsAccess().getMatchesAssignment_3_2(), "rule__Actions__MatchesAssignment_3_2");
			builder.put(grammarAccess.getMatchAccess().getIdAssignment_0_0(), "rule__Match__IdAssignment_0_0");
			builder.put(grammarAccess.getMatchAccess().getBodyAssignment_0_2(), "rule__Match__BodyAssignment_0_2");
			builder.put(grammarAccess.getMatchAccess().getRegexpAssignment_1_0(), "rule__Match__RegexpAssignment_1_0");
			builder.put(grammarAccess.getMatchAccess().getBodyAssignment_1_2(), "rule__Match__BodyAssignment_1_2");
			builder.put(grammarAccess.getMatchAccess().getObservableAssignment_2_0(), "rule__Match__ObservableAssignment_2_0");
			builder.put(grammarAccess.getMatchAccess().getBodyAssignment_2_2(), "rule__Match__BodyAssignment_2_2");
			builder.put(grammarAccess.getMatchAccess().getLiteralAssignment_3_0(), "rule__Match__LiteralAssignment_3_0");
			builder.put(grammarAccess.getMatchAccess().getBodyAssignment_3_2(), "rule__Match__BodyAssignment_3_2");
			builder.put(grammarAccess.getMatchAccess().getTextAssignment_4_0(), "rule__Match__TextAssignment_4_0");
			builder.put(grammarAccess.getMatchAccess().getBodyAssignment_4_2(), "rule__Match__BodyAssignment_4_2");
			builder.put(grammarAccess.getMatchAccess().getArgumentsAssignment_5_0(), "rule__Match__ArgumentsAssignment_5_0");
			builder.put(grammarAccess.getMatchAccess().getBodyAssignment_5_2(), "rule__Match__BodyAssignment_5_2");
			builder.put(grammarAccess.getNumberAccess().getNegativeAssignment_0_1(), "rule__Number__NegativeAssignment_0_1");
			builder.put(grammarAccess.getNumberAccess().getRealAssignment_1(), "rule__Number__RealAssignment_1");
			builder.put(grammarAccess.getNumberAccess().getLongAssignment_2(), "rule__Number__LongAssignment_2");
			builder.put(grammarAccess.getNumberAccess().getDecimalAssignment_3_0_0(), "rule__Number__DecimalAssignment_3_0_0");
			builder.put(grammarAccess.getNumberAccess().getDecimalPartAssignment_3_0_1(), "rule__Number__DecimalPartAssignment_3_0_1");
			builder.put(grammarAccess.getNumberAccess().getExponentialAssignment_4_0_0(), "rule__Number__ExponentialAssignment_4_0_0");
			builder.put(grammarAccess.getNumberAccess().getExpNegativeAssignment_4_0_1_1(), "rule__Number__ExpNegativeAssignment_4_0_1_1");
			builder.put(grammarAccess.getNumberAccess().getExpAssignment_4_0_2(), "rule__Number__ExpAssignment_4_0_2");
			builder.put(grammarAccess.getDateAccess().getYearAssignment_0(), "rule__Date__YearAssignment_0");
			builder.put(grammarAccess.getDateAccess().getBcAssignment_1_2(), "rule__Date__BcAssignment_1_2");
			builder.put(grammarAccess.getDateAccess().getMonthAssignment_3(), "rule__Date__MonthAssignment_3");
			builder.put(grammarAccess.getDateAccess().getDayAssignment_5(), "rule__Date__DayAssignment_5");
			builder.put(grammarAccess.getDateAccess().getHourAssignment_6_0(), "rule__Date__HourAssignment_6_0");
			builder.put(grammarAccess.getDateAccess().getMinAssignment_6_2(), "rule__Date__MinAssignment_6_2");
			builder.put(grammarAccess.getDateAccess().getSecAssignment_6_3_1(), "rule__Date__SecAssignment_6_3_1");
			builder.put(grammarAccess.getDateAccess().getMsAssignment_6_3_2_1(), "rule__Date__MsAssignment_6_3_2_1");
			builder.put(grammarAccess.getPreambleAccess().getUnorderedGroup_2(), "rule__Preamble__UnorderedGroup_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private KactorsGrammarAccess grammarAccess;

	@Override
	protected InternalKactorsParser createParser() {
		InternalKactorsParser result = new InternalKactorsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public KactorsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(KactorsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
