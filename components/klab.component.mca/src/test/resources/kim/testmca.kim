namespace test.mca;

/* 
 * No weight, find stakeholders in context, optionally constrain type and observe value in them
 * 
 */
model value of ecology:Biodiversity
	observing 
		@stakeholder geography:Country earth:Region,
		@cost        ecology:NormalizedDifferenceVegetationIndex,
		@cost        geography:Elevation in m,
		@benefit     earth:PrecipitationVolume in mm
	using im.mca.concordance();

/* 
 * Single weight, stakeholder is context, concordance output is objective
 * 
 */
model value of ecology:Biodiversity
	observing 
		@cost(45)    geography:Slope,
		@cost(20)    geography:Elevation,
		@benefit(50) earth:PrecipitationVolume in mm
	using im.mca.concordance(levels = 15);
	
/* 
 * Multiple weights, build stakeholders, concordance output is subjective.
 * 
 */
model value of ecology:Biodiversity
	observing 
	
		@cost({policy:Conservative demography:HumanIndividual: 9.34, policy:Progressive demography:HumanIndividual: 34.3}) 
		geography:Slope,
		
		@cost({policy:Conservative demography:HumanIndividual: 25.34, policy:Progressive demography:HumanIndividual: 3.44}) 
		geography:Elevation in m,
		
		@cost({policy:Conservative demography:HumanIndividual: 122.34, policy:Progressive demography:HumanIndividual: 34.3}) 
		earth:PrecipitationVolume in mm
		
	using im.mca.concordance();

/**
 * Ranking OBJECTS based on context qualities:
 * 
 * This will produce the artifact with the concordance value as state, ranked highest-first.
 * Also allows output tag @discordance and puts a score in the metadata in case there are no
 * outputs linked to the concordance.
 */	
model each earth:Site with ecology:Biodiversity,
	  @concordance value of ecology:Biodiversity
	observing 
		@cost(0.34)    ecology:NormalizedDifferenceVegetationIndex,
		@cost(2.31)    geography:Elevation in m,
		@benefit(22.3) earth:PrecipitationVolume in mm
	using 
		gis.points.extract(select = [random() > 0.995]), 
		im.mca.ranking(method=Electre4);
		
/** 
 * To use qualities of the objects for ranking, the criteria can be added to a resolver even if it is not
 * the one that will ultimately perform the ranking. Because the instances are resolved as soon as they are
 * created, the second contextualizer will find the criteria in each and will be able to perform the
 * ranking.
 */
model each earth:Site with ecology:Biodiversity,
	  @concordance value of ecology:Biodiversity
	using 
		gis.points.extract(select = [random() > 0.995]), 
		im.mca.ranking(method=Electre4);
		
model earth:Site with ecology:Biodiversity
	observing
		@cost(0.34) [random() * 2330]  as geography:Elevation in m,
		@cost(2.31) [random() * 90]    as geography:Elevation in m,
		@cost(0.34) [random() * 2 - 1] as ecology:NormalizedDifferenceVegetationIndex
;

/**
 * If the criteria values are constants or expressions as above, this can be done in one shot using
 * additional observables in the instantiator:
 */
model each earth:Site with ecology:Biodiversity,
		@cost(0.34) [random() * 2330]  as geography:Elevation in m,
		@cost(2.31) [random() * 90]    as geography:Elevation in m,
		@cost(0.34) [random() * 2 - 1] as ecology:NormalizedDifferenceVegetationIndex,
		@concordance value of ecology:Biodiversity
	using 
		gis.points.extract(select = [random() > 0.995]), 
		im.mca.ranking(method=Electre4);		