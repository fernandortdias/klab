package org.integratedmodelling.klab.hub.licenses.services;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Date;
import java.util.Properties;

import org.integratedmodelling.klab.auth.KlabCertificate;
import org.integratedmodelling.klab.auth.Partner;
import org.integratedmodelling.klab.hub.authentication.HubAuthenticationManager;
import org.integratedmodelling.klab.hub.config.LicenseConfig;
import org.integratedmodelling.klab.hub.nodes.MongoNode;
import org.joda.time.DateTime;
import org.springframework.stereotype.Service;

import com.verhas.licensor.License;

@Service
public class NodeLicenseServiceImpl implements NodeLicenseService {
	
	private HubAuthenticationManager hubAuthenticationManager;
	
	public static final int CERT_FILE_TTL_DAYS = 365/2;
	
	private final String NODE_CERT_FILE_NAME = KlabCertificate.DEFAULT_NODE_CERTIFICATE_FILENAME;

	public NodeLicenseServiceImpl(LicenseConfig licenseConfig, HubAuthenticationManager hubAuthenticationManager) {
		super();
		this.hubAuthenticationManager = hubAuthenticationManager;
	}

	@Override
	public byte[] generateCert(MongoNode node) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public byte[] generateCertFile(MongoNode node) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Properties getPropertiesString(MongoNode node) {
		Properties properties = new Properties();
		Partner partner = hubAuthenticationManager.getPartner();
		LicenseConfig config = hubAuthenticationManager.getLicenseConfig();
		DateTime expires = new DateTime().plusDays(CERT_FILE_TTL_DAYS);
		properties.setProperty(KlabCertificate.KEY_EXPIRATION, expires.toString());	
		properties.setProperty(KlabCertificate.KEY_NODENAME, node.getNode());
		properties.setProperty(KlabCertificate.KEY_EMAIL, node.getEmail());
		properties.setProperty(KlabCertificate.KEY_SIGNATURE, config.getKey());
		properties.setProperty(KlabCertificate.KEY_PARTNER_NAME, partner.getId());
		properties.setProperty(KlabCertificate.KEY_PARTNER_EMAIL, partner.getEmailAddress());
		properties.setProperty(KlabCertificate.KEY_PARTNER_HUB, partner.getServerURL());
		properties.setProperty("klab.wordlview", "im");
		properties.setProperty(KlabCertificate.KEY_URL, node.getUrl());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_TYPE, KlabCertificate.Type.NODE.toString());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_LEVEL, KlabCertificate.Level.INSTITUTIONAL.toString());
		return properties;
	}
	
	private String encodedLicenseString(Properties properties) throws IOException {
		Writer writer = new StringWriter();
		License license = new License();
		LicenseConfig config = hubAuthenticationManager.getLicenseConfig();
		String generatedBy = String.format("Generated by %s on ", 
				hubAuthenticationManager.getHubReference().getId()) + new Date();
		properties.store(writer, generatedBy);
		license.setLicense(writer.toString());
		//license.loadKey(licenseConfig.getSecRing().getFilename(),licenseConfig.getUserId());
		return null;
	}

	@Override
	public String get_NODE_CERT_FILE_NAME() {
		return NODE_CERT_FILE_NAME;
	}

	@Override
	public Properties readCertFileContent(String certFileContent) {
		// TODO Auto-generated method stub
		return null;
	}

}
