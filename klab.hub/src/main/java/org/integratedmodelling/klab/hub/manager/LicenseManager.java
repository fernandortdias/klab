package org.integratedmodelling.klab.hub.manager;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SignatureException;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import org.apache.commons.codec.DecoderException;
import org.bouncycastle.openpgp.PGPException;
import org.integratedmodelling.klab.Logging;
import org.integratedmodelling.klab.api.auth.ICertificate;
import org.integratedmodelling.klab.api.auth.INodeIdentity;
import org.integratedmodelling.klab.auth.EngineUser;
import org.integratedmodelling.klab.auth.KlabCertificate;
import org.integratedmodelling.klab.auth.Node;
import org.integratedmodelling.klab.exceptions.KlabAuthorizationException;
import org.integratedmodelling.klab.exceptions.KlabException;
import org.integratedmodelling.klab.hub.authentication.HubAuthenticationManager;
import org.integratedmodelling.klab.hub.config.LicenseConfig;
import org.integratedmodelling.klab.hub.config.TokenClickbackConfig;
import org.integratedmodelling.klab.hub.exception.AuthenticationFailedException;
import org.integratedmodelling.klab.hub.models.KlabNode;
import org.integratedmodelling.klab.hub.models.ProfileResource;
import org.integratedmodelling.klab.hub.models.User;
import org.integratedmodelling.klab.hub.network.NetworkManager;
import org.integratedmodelling.klab.hub.security.NetworkKeyManager;
import org.integratedmodelling.klab.hub.service.KlabGroupService;
import org.integratedmodelling.klab.rest.AuthenticatedIdentity;
import org.integratedmodelling.klab.rest.EngineAuthenticationRequest;
import org.integratedmodelling.klab.rest.EngineAuthenticationResponse;
import org.integratedmodelling.klab.rest.Group;
import org.integratedmodelling.klab.rest.IdentityReference;
import org.integratedmodelling.klab.rest.NodeAuthenticationRequest;
import org.integratedmodelling.klab.rest.NodeAuthenticationResponse;
import org.integratedmodelling.klab.utils.IPUtils;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.verhas.licensor.License;

@Component
public class LicenseManager {
	
	@Autowired
	JwtTokenManager JwtTokenManager;
	
	@Autowired
	KlabUserManager klabUserManager;
	
	@Autowired
	KlabNodeManager klabNodeManager;
	
	@Autowired
	KlabGroupService klabGroupService;
	
	@Autowired
	TokenManager tokenManager;
	
	@Autowired
	HubAuthenticationManager hubAuthenticationManager;
	
	@Autowired
	TokenClickbackConfig tokenClickbackConfig;
	
	@Autowired
	LicenseConfig licenseConfig;
	
	@Autowired
	NetworkManager networkManager;
	
	private static final int CERT_FILE_TTL_DAYS = 365;
	
	private final String ENGINE_CERT_FILE_NAME = KlabCertificate.DEFAULT_ENGINE_CERTIFICATE_FILENAME;
	
	private final String NODE_CERT_FILE_NAME = KlabCertificate.DEFAULT_NODE_CERTIFICATE_FILENAME;
	
	public byte[] generateEngineCert(User user) {
		try {
			return generateEngineCertFile(user);
		} catch (Exception e) {
			throw new KlabException(e);
		}
	}
	
	public byte[] generateNodeCert(KlabNode node) {
		try {
			return generateNodeCertFile(node);
		} catch (Exception e) {
			throw new KlabException(e);
		}
	}

	private byte[] generateEngineCertFile(User user) 
			throws NoSuchAlgorithmException, NoSuchProviderException, SignatureException, IOException, PGPException {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		Properties properties = getEnginePropertiesString(user);
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE, encodedLicenseString(properties));
		properties.store(byteArrayOutputStream, "Engine Certificate Generated On " + new Date());
		return byteArrayOutputStream.toByteArray();
	}
	
	private byte[] generateNodeCertFile(KlabNode node) 
			throws NoSuchAlgorithmException, NoSuchProviderException, SignatureException, IOException, PGPException {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		Properties properties = getNodePropertiesString(node);
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE, encodedLicenseString(properties));
		properties.store(byteArrayOutputStream, "Node Certificate Generated On " + new Date());
		return byteArrayOutputStream.toByteArray();
	}	
	
	private String encodedLicenseString(Properties properties) 
			throws IOException, PGPException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {
		License license = new License();
		Writer stringWriter = new StringWriter();
        String generatedBy = String.format("Generated by %s on ", tokenClickbackConfig.getSiteName()) + new Date();
        properties.store(stringWriter, generatedBy);
        license.setLicense(stringWriter.toString());
        license.loadKey(licenseConfig.getSecRing().getFilename(),licenseConfig.getUserId());
        String encodedLicenseString = license.encodeLicense(licenseConfig.getPassword());
        return encodedLicenseString;
	}
	    
    private Properties getEnginePropertiesString(User user) throws IOException {
        Properties properties = new Properties();   
        DateTime expires = new DateTime().plusDays(CERT_FILE_TTL_DAYS/2);
		properties.setProperty(KlabCertificate.KEY_EXPIRATION, expires.toString());	
		properties.setProperty(KlabCertificate.KEY_USERNAME, user.getUsername());
		properties.setProperty(KlabCertificate.KEY_EMAIL, user.getEmail());
		properties.setProperty(KlabCertificate.KEY_SIGNATURE, licenseConfig.getKey());
		properties.setProperty(KlabCertificate.KEY_PARTNER_NAME, "integratedmodelling.org");
		properties.setProperty(KlabCertificate.KEY_PARTNER_EMAIL, "info@integratedmodelling.org");
		properties.setProperty(KlabCertificate.KEY_PARTNER_HUB, tokenClickbackConfig.getSiteUrl().toString());
		properties.setProperty(KlabCertificate.KEY_NODENAME, "im");
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_TYPE, KlabCertificate.Type.ENGINE.toString());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_LEVEL, KlabCertificate.Level.USER.toString());
		return properties;
    }
    
    private Properties getNodePropertiesString(KlabNode node) throws IOException {
        Properties properties = new Properties();   
        DateTime expires = new DateTime().plusDays(CERT_FILE_TTL_DAYS/2);
		properties.setProperty(KlabCertificate.KEY_EXPIRATION, expires.toString());	
		properties.setProperty(KlabCertificate.KEY_NODENAME, node.getNode());
		properties.setProperty(KlabCertificate.KEY_EMAIL, node.getEmail());
		properties.setProperty(KlabCertificate.KEY_SIGNATURE, licenseConfig.getKey());
		properties.setProperty(KlabCertificate.KEY_PARTNER_NAME, "integratedmodelling.org");
		properties.setProperty(KlabCertificate.KEY_PARTNER_EMAIL, "info@integratedmodelling.org");
		properties.setProperty(KlabCertificate.KEY_PARTNER_HUB, tokenClickbackConfig.getSiteUrl().toString());
		properties.setProperty("klab.wordlview", "im");
		properties.setProperty(KlabCertificate.KEY_URL, "http://127.0.0.1:8287/node");
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_TYPE, KlabCertificate.Type.NODE.toString());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_LEVEL, KlabCertificate.Level.INSTITUTIONAL.toString());
		return properties;
    }
    
	public EngineAuthenticationResponse processEngineUser(EngineAuthenticationRequest request) throws IOException, PGPException, DecoderException {
		DateTime now = DateTime.now();
		DateTime tomorrow = now.plusDays(90);
		EngineUser engineUser = authenticateEngineCert(request);
		IdentityReference userIdentity = new IdentityReference(engineUser.getUsername(), engineUser.getEmailAddress(),
				now.toString());
		AuthenticatedIdentity authenticatedIdentity = new AuthenticatedIdentity(userIdentity, engineUser.getGroups(),
				tomorrow.toString(), engineUser.getId());
		return new EngineAuthenticationResponse(authenticatedIdentity, hubAuthenticationManager.getHubReference(),
				networkManager.getNodes(engineUser.getGroups()));
	}
    
	private EngineUser authenticateEngineCert(EngineAuthenticationRequest request) throws IOException, PGPException, DecoderException {
		Properties propertiesFromCertificate = readCertFileContent(request.getCertificate());
		String username = propertiesFromCertificate.getProperty(KlabCertificate.KEY_USERNAME);
		String email = propertiesFromCertificate.getProperty(KlabCertificate.KEY_EMAIL);
		String expiryString = propertiesFromCertificate.getProperty(KlabCertificate.KEY_EXPIRATION);
		
		DateTime expiry = DateTime.parse(expiryString);
        if (expiry.isBeforeNow()) {
            String msg = String.format("The cert file submitted for user %s is expired.", username);
            throw new AuthenticationFailedException(msg);
        }
		
        User user = klabUserManager.getUser(username);
        Properties properties = getEnginePropertiesString(user);
        
        propertiesFromCertificate.remove(KlabCertificate.KEY_EXPIRATION);
        properties.remove(KlabCertificate.KEY_EXPIRATION);
        if (propertiesFromCertificate.equals(properties)) {
        	tokenManager.deleteExpiredTokens(username);
            String token = JwtTokenManager.createEngineJwtToken(username);
            ProfileResource profile = klabUserManager.getUserProfile(username);
            EngineUser engineUser = new EngineUser(username, null);
            engineUser.setEmailAddress(email);
            engineUser.setToken(token);
            engineUser.getGroups().addAll(profile.getGroupsList());
            return engineUser;
        }
        return null;
	}
	
	private INodeIdentity authenticateNodeCert(NodeAuthenticationRequest request, String localAddr) 
			throws IOException, PGPException, DecoderException {
		Properties propertiesFromCertificate = readCertFileContent(request.getCertificate());
		String nodename = propertiesFromCertificate.getProperty(KlabCertificate.KEY_NODENAME);
		String expiryString = propertiesFromCertificate.getProperty(KlabCertificate.KEY_EXPIRATION);
		
		DateTime expiry = DateTime.parse(expiryString);
		if (expiry.isBeforeNow()) {
			String msg = String.format("The cert file submitted for node %s is expired.", nodename);
			throw new AuthenticationFailedException(msg);
		}
		
		KlabNode node = klabNodeManager.getNode(nodename);
		Properties properties = getNodePropertiesString(node);
        
		propertiesFromCertificate.remove(KlabCertificate.KEY_EXPIRATION);
        properties.remove(KlabCertificate.KEY_EXPIRATION);
		
        if (propertiesFromCertificate.equals(properties)) {
        	INodeIdentity ret = null;
    		ret = new Node(hubAuthenticationManager.getHubName() + "." + request.getNodeName(), hubAuthenticationManager.getPartner());
    		ret.getUrls().add("http://"+localAddr+"/node");
    		return ret;
        }
        return null;
	}
	
    private Properties readCertFileContent(String certFileContent) throws IOException, PGPException, DecoderException {
        License license = new License();
        license.loadKeyRing(licenseConfig.getPubRing().getFilename(), licenseConfig.getPubRing().getDigest());
        license.setLicenseEncoded(certFileContent);
        String propertiesString = license.getLicenseString();
        Properties result = new Properties();
        result.load(new StringReader(propertiesString));
        return result;
    }

	public String get_ENGINE_CERT_FILE_NAME() {
		return ENGINE_CERT_FILE_NAME;
	}
	
	public String get_NODE_CERT_FILE_NAME() {
		return NODE_CERT_FILE_NAME;
	}
	
	
	public NodeAuthenticationResponse processNodeCert(NodeAuthenticationRequest request, String localAddr) throws IOException, PGPException, DecoderException {
		INodeIdentity node = null;
		if (IPUtils.isLocal(localAddr)) {
			KlabCertificate certificate = hubAuthenticationManager.checkLocalNodeCertificates(request.getCertificate());
			if (certificate != null) {
				if (networkManager.getNode(request.getNodeName()) != null) {
					throw new KlabAuthorizationException("node names must be unique: a node named "
							+ request.getCertificate() + " was already authorized");
				}
				DateTime now = DateTime.now();
				DateTime tomorrow = now.plusDays(90);
				node = new Node(hubAuthenticationManager.getHubName() + "." + request.getNodeName(), hubAuthenticationManager.getPartner());
				node.getUrls().add(certificate.getProperty(ICertificate.KEY_URL));
				List<Group> Groups = klabNodeManager.getGroups();
				Logging.INSTANCE.info("authorized installed node " + node.getName());
				IdentityReference userIdentity = new IdentityReference(node.getName()
						,node.getParentIdentity().getEmailAddress(), now.toString());	
				AuthenticatedIdentity authenticatedIdentity = new AuthenticatedIdentity(userIdentity,
						Groups, tomorrow.toString(), node.getId());
				NodeAuthenticationResponse response = new NodeAuthenticationResponse(authenticatedIdentity,
						hubAuthenticationManager.getHubReference().getId(), Groups,
						NetworkKeyManager.INSTANCE.getEncodedPublicKey());
				networkManager.notifyAuthorizedNode(node, hubAuthenticationManager.getHubReference(), true);
				return response;
			}
		}
			
		DateTime now = DateTime.now();
		DateTime tomorrow = now.plusDays(90);
		node = authenticateNodeCert(request, localAddr);
		List<Group> Groups = klabNodeManager.getNodeGroups(request.getNodeName());
		
		Logging.INSTANCE.info("authorized node " + node.getName());
		
		IdentityReference userIdentity = new IdentityReference(node.getName()
				,node.getParentIdentity().getEmailAddress(), now.toString());		
		AuthenticatedIdentity authenticatedIdentity = new AuthenticatedIdentity(userIdentity,
				Groups, tomorrow.toString(), node.getId());
		NodeAuthenticationResponse response = new NodeAuthenticationResponse(authenticatedIdentity,
				hubAuthenticationManager.getHubReference().getId(), Groups,
				NetworkKeyManager.INSTANCE.getEncodedPublicKey());
		networkManager.notifyAuthorizedNode(node, hubAuthenticationManager.getHubReference(), true);
		return response;
	}
	
	public EngineAuthenticationResponse processEngineCert(EngineAuthenticationRequest request, String ip)
			throws IOException, PGPException, DecoderException {
		switch (request.getLevel()) {
		case ANONYMOUS:
		case INSTITUTIONAL:
			break;
		case LEGACY:
			break;
		case TEST:
			break;
		case USER:
			return processEngineUser(request);
		default:
			break;
		}
		return null;
	}
	
}
