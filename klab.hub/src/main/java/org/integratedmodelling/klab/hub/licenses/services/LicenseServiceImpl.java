package org.integratedmodelling.klab.hub.licenses.services;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.security.GeneralSecurityException;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SignatureException;
import java.util.Date;
import java.util.Properties;
import java.util.UUID;

import org.apache.commons.text.RandomStringGenerator;
import org.bouncycastle.bcpg.ArmoredInputStream;
import org.bouncycastle.openpgp.PGPException;
import org.integratedmodelling.klab.auth.KlabCertificate;
import org.integratedmodelling.klab.hub.license.ArmoredKeyPair;
import org.integratedmodelling.klab.hub.license.BouncyConfiguration;
import org.integratedmodelling.klab.hub.license.BouncyGpgKeyRing;
import org.integratedmodelling.klab.hub.license.LicenseConfiguration;
import org.integratedmodelling.klab.hub.license.commands.GetLicenseConfiguration;
import org.integratedmodelling.klab.hub.nodes.MongoNode;
import org.integratedmodelling.klab.hub.repository.LicenseConfigRepository;
import org.joda.time.DateTime;
import org.springframework.stereotype.Service;

import com.javax0.license3j.licensor.License;

import name.neuhalfen.projects.crypto.bouncycastle.openpgp.BouncyGPG;
import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfig;

@Service
public class LicenseServiceImpl implements LicenseService {
	
	//private PgpKeyService keyService;
	
	private LicenseConfigRepository repository;
	
	private LicenseConfiguration configuration;
	
	public static final int CERT_FILE_TTL_DAYS = 365/2;
	
	private final String NODE_CERT_FILE_NAME = KlabCertificate.DEFAULT_NODE_CERTIFICATE_FILENAME;

	public LicenseServiceImpl(LicenseConfigRepository repository) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException, IOException, PGPException {
		super();
		BouncyGPG.registerProvider();
		this.repository = repository;
		this.configuration = new GetLicenseConfiguration(this.repository).execute();

		if(this.configuration == null) {
				this.configuration = generateNewLicenseConfiguration();
		}
		
	}

	@Override
	public byte[] generateCertFile(MongoNode node) throws GeneralSecurityException, IOException, PGPException {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		Properties properties = getPropertiesString(node);
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE, encodedLicenseString(properties));
		properties.store(byteArrayOutputStream, "Node Certificate Generated On " + new Date());
		byteArrayOutputStream.close();
		return byteArrayOutputStream.toByteArray();
	}

	@Override
	public Properties getPropertiesString(MongoNode node) {
		Properties properties = new Properties();
		DateTime expires = new DateTime().plusDays(CERT_FILE_TTL_DAYS);
		properties.setProperty(KlabCertificate.KEY_EXPIRATION, expires.toString());	
		properties.setProperty(KlabCertificate.KEY_NODENAME, node.getNode());
		properties.setProperty(KlabCertificate.KEY_SIGNATURE, configuration.getKeyString());
		properties.setProperty(KlabCertificate.KEY_PARTNER_NAME, configuration.getName());
		properties.setProperty(KlabCertificate.KEY_PARTNER_EMAIL, configuration.getEmail());
		properties.setProperty(KlabCertificate.KEY_PARTNER_HUB, configuration.getHubUrl());
		properties.setProperty("klab.wordlview", "im");
		properties.setProperty(KlabCertificate.KEY_URL, node.getUrl());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_TYPE, KlabCertificate.Type.NODE.toString());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_LEVEL, KlabCertificate.Level.INSTITUTIONAL.toString());
		return properties;
	}
	
	private String encodedLicenseString(Properties properties) throws IOException, PGPException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {
		Writer writer = new StringWriter();
		License license = new License();
		ArmoredKeyPair keys = configuration.getKeys();
		InputStream targetStream = new ByteArrayInputStream(keys.privateKey());
		
		String generatedBy = String.format("Generated by %s on ", 
				configuration.getHubId()) + new Date();
		properties.store(writer, generatedBy);
		license.setLicense(writer.toString());
		license.loadKey(targetStream, configuration.getHubId() + " <" + configuration.getEmail() + ">");
        String encodedLicenseString = license.encodeLicense(configuration.getPassphrase());
        return encodedLicenseString;
	}

	@Override
	public String get_NODE_CERT_FILE_NAME() {
		return NODE_CERT_FILE_NAME;
	}

	@Override
	public Properties readCertFileContent(String certFileContent) throws IOException, PGPException {
		License license = new License();
		
		ArmoredKeyPair keys = configuration.getKeys();
		InputStream targetStream = new ByteArrayInputStream(keys.publicKey());
		InputStream armoredBais = new ByteArrayInputStream(certFileContent.getBytes());
		ArmoredInputStream armoredInputStream = new ArmoredInputStream(armoredBais);
		
		license.loadKeyRing(targetStream, configuration.getDigest());
		license.setLicenseEncoded(armoredInputStream,"UTF-8");
        String propertiesString = license.getLicenseString();
        Properties result = new Properties();
        result.load(new StringReader(propertiesString));
        return result;
	}

	@Override
	public LicenseConfiguration generateNewLicenseConfiguration() throws IOException, PGPException, NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
		
		RandomStringGenerator pwdGenerator = new RandomStringGenerator.Builder()
				.withinRange(33, 90)
				.build();
		
		String passphrase = pwdGenerator.generate(36);
		
		LicenseConfiguration config = new BouncyConfiguration();
		
		config.setEmail("info@intergratedmodelling.org");
		config.setHubId("IM");
		config.setKeyString(UUID.randomUUID().toString());
		config.setPassphrase(passphrase);
		config.setName("Integrated Modelling Hub");
		config.setHubUrl("http://localhost:8284/hub");
		
		KeyringConfig keyRing = new BouncyGpgKeyRing().createKeyRing("IM", "info@intergratedmodelling.org", passphrase);
		
        ByteArrayOutputStream pubKeyRingBuffer = new ByteArrayOutputStream();
        keyRing.getPublicKeyRings().encode(pubKeyRingBuffer);
        pubKeyRingBuffer.close();
        byte[] publicKey = pubKeyRingBuffer.toByteArray();


        ByteArrayOutputStream secretKeyRingBuffer = new ByteArrayOutputStream();
        keyRing.getSecretKeyRings().encode(secretKeyRingBuffer);
        secretKeyRingBuffer.close();
        byte[] secretKey = secretKeyRingBuffer.toByteArray();
        
        ArmoredKeyPair keyPair =  ArmoredKeyPair.of(secretKey, publicKey);
        
        config.setKeys(keyPair);
        return repository.insert(config);
        
	}

//	@Override
//	public LicenseConfiguration generateNewLicenseConfiguration() {
//		RandomStringGenerator pwdGenerator = new RandomStringGenerator.Builder()
//				.withinRange(33, 90)
//		        .build();
//		String password = pwdGenerator.generate(36);
//		LicenseConfiguration config = new LicenseConfiguration();
//		
//		config.setEmail("info@intergratedmodelling.org");
//		config.setHubId("IM");
//		config.setKeyString("Not sure this is very important");
//		config.setPassphrase(password);
//		config.setName("Integrated Modelling Hub");
//		config.setHubUrl("localhost:8284/hub");
//		
//		ArmoredKeyPair keys = null;
//		
//		try {
//			keys = keyService.generateKeys(4096, config.getHubId(), config.getEmail(), config.getPassphrase());
//	        final SHA512Digest dig = new SHA512Digest();
//	        dig.reset();
//	        dig.update(keys.publicKey().getBytes(), 0, keys.publicKey().getBytes().length);
//	        final byte[] digest = new byte[dig.getDigestSize()];
//	        dig.doFinal(digest, 0);
//			config.setDigest(digest);
//			config.setKeys(keys);
//		} catch (PGPException | IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
//		return repository.insert(config);
//	}

}
