package org.integratedmodelling.klab.hub.licenses.services;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SignatureException;
import java.util.Date;
import java.util.Properties;

import org.apache.commons.text.RandomStringGenerator;
import org.bouncycastle.openpgp.PGPException;
import org.integratedmodelling.klab.auth.KlabCertificate;
import org.integratedmodelling.klab.hub.license.ArmoredKeyPair;
import org.integratedmodelling.klab.hub.license.LicenseConfiguration;
import org.integratedmodelling.klab.hub.license.commands.GetLicenseConfiguration;
import org.integratedmodelling.klab.hub.nodes.MongoNode;
import org.integratedmodelling.klab.hub.repository.LicenseConfigRepository;
import org.joda.time.DateTime;
import org.springframework.stereotype.Service;

import com.google.common.hash.Hashing;
import com.verhas.licensor.License;

@Service
public class LicenseServiceImpl implements LicenseService {
	
	private PgpKeyService keyService;
	
	private LicenseConfigRepository repository;
	
	private LicenseConfiguration configuration;
	
	public static final int CERT_FILE_TTL_DAYS = 365/2;
	
	private final String NODE_CERT_FILE_NAME = KlabCertificate.DEFAULT_NODE_CERTIFICATE_FILENAME;

	public LicenseServiceImpl(LicenseConfigRepository repository, PgpKeyService keyService) {
		super();
		this.keyService = keyService;
		this.repository = repository;
		this.configuration = new GetLicenseConfiguration(this.repository).execute();

		if(this.configuration == null) {
			this.configuration = generateNewLicenseConfiguration();
		}
		
	}

	@Override
	public byte[] generateCertFile(MongoNode node) throws GeneralSecurityException, IOException, PGPException {
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		Properties properties = getPropertiesString(node);
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE, encodedLicenseString(properties));
		properties.store(byteArrayOutputStream, "Node Certificate Generated On " + new Date());
		return byteArrayOutputStream.toByteArray();
	}

	@Override
	public Properties getPropertiesString(MongoNode node) {
		Properties properties = new Properties();
		DateTime expires = new DateTime().plusDays(CERT_FILE_TTL_DAYS);
		properties.setProperty(KlabCertificate.KEY_EXPIRATION, expires.toString());	
		properties.setProperty(KlabCertificate.KEY_NODENAME, node.getNode());
		properties.setProperty(KlabCertificate.KEY_EMAIL, node.getEmail());
		properties.setProperty(KlabCertificate.KEY_SIGNATURE, configuration.getKeyString());
		properties.setProperty(KlabCertificate.KEY_PARTNER_NAME, configuration.getName());
		properties.setProperty(KlabCertificate.KEY_PARTNER_EMAIL, configuration.getEmail());
		properties.setProperty(KlabCertificate.KEY_PARTNER_HUB, configuration.getHubUrl());
		properties.setProperty("klab.wordlview", "im");
		properties.setProperty(KlabCertificate.KEY_URL, node.getUrl());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_TYPE, KlabCertificate.Type.NODE.toString());
		properties.setProperty(KlabCertificate.KEY_CERTIFICATE_LEVEL, KlabCertificate.Level.INSTITUTIONAL.toString());
		return properties;
	}
	
	private String encodedLicenseString(Properties properties) throws IOException, PGPException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {
		Writer writer = new StringWriter();
		License license = new License();
		ArmoredKeyPair keys = configuration.getKeys();
		InputStream targetStream = new ByteArrayInputStream(keys.privateKey().getBytes());
		
		String generatedBy = String.format("Generated by %s on ", 
				configuration.getHubId()) + new Date();
		properties.store(writer, generatedBy);
		license.setLicense(writer.toString());
		license.loadKey(targetStream, configuration.getHubId() + " <" + configuration.getEmail() + ">");
        String encodedLicenseString = license.encodeLicense(configuration.getPassphrase());
        return encodedLicenseString;
	}

	@Override
	public String get_NODE_CERT_FILE_NAME() {
		return NODE_CERT_FILE_NAME;
	}

	@Override
	public Properties readCertFileContent(String certFileContent) throws IOException, PGPException {
		License license = new License();
		
		ArmoredKeyPair keys = configuration.getKeys();
		InputStream targetStream = new ByteArrayInputStream(keys.publicKey().getBytes());
		
		license.loadKeyRing(targetStream, configuration.getDigest().getBytes());
		license.setLicenseEncoded(certFileContent);
        String propertiesString = license.getLicenseString();
        Properties result = new Properties();
        result.load(new StringReader(propertiesString));
        return result;
	}

	@Override
	public LicenseConfiguration generateNewLicenseConfiguration() {
		RandomStringGenerator pwdGenerator = new RandomStringGenerator.Builder()
				.withinRange(33, 90)
		        .build();
		String password = pwdGenerator.generate(36);
		LicenseConfiguration config = new LicenseConfiguration();
		
		config.setEmail("info@intergratedmodelling.org");
		config.setHubId("IM");
		config.setKeyString("Not sure this is very important");
		config.setPassphrase(password);
		config.setName("Integrated Modelling Hub");
		config.setHubUrl("localhost:8284/hub");
		
		ArmoredKeyPair keys = null;
		try {
			keys = keyService.generateKeys(2048, config.getHubId(), config.getEmail(), config.getPassphrase());
		} catch (PGPException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String sha256hex = Hashing.sha256()
				  .hashString(keys.publicKey(), StandardCharsets.UTF_8)
				  .toString();
		
		config.setKeys(keys);
		config.setDigest(sha256hex);
		return repository.insert(config);
	}

}
