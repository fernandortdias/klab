/*
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kdl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KdlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cDataflowKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final Alternatives cNameAlternatives_0_0_1_0 = (Alternatives)cNameAssignment_0_0_1.eContents().get(0);
		private final RuleCall cNamePathParserRuleCall_0_0_1_0_0 = (RuleCall)cNameAlternatives_0_0_1_0.eContents().get(0);
		private final RuleCall cNameUrnIdParserRuleCall_0_0_1_0_1 = (RuleCall)cNameAlternatives_0_0_1_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cVarKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cVariablesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cVariablesParameterParserRuleCall_0_1_1_0 = (RuleCall)cVariablesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cUnorderedGroup_0.eContents().get(2);
		private final Keyword cValKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cConstantsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cConstantsParameterParserRuleCall_0_2_1_0 = (RuleCall)cConstantsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cUnorderedGroup_0.eContents().get(3);
		private final Keyword cAuthorKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cAuthorsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cAuthorsSTRINGTerminalRuleCall_0_3_1_0 = (RuleCall)cAuthorsAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cUnorderedGroup_0.eContents().get(4);
		private final Keyword cVersionKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cVersionAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cVersionVersionNumberParserRuleCall_0_4_1_0 = (RuleCall)cVersionAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cUnorderedGroup_0.eContents().get(5);
		private final Keyword cKlabKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cKlabVersionAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cKlabVersionVersionNumberParserRuleCall_0_5_1_0 = (RuleCall)cKlabVersionAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cUnorderedGroup_0.eContents().get(6);
		private final Keyword cWorldviewKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cWorldviewAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cWorldviewLOWERCASE_IDTerminalRuleCall_0_6_1_0 = (RuleCall)cWorldviewAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_7 = (Group)cUnorderedGroup_0.eContents().get(7);
		private final Keyword cGeometryKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final Assignment cGeometryAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final RuleCall cGeometryGeometryParserRuleCall_0_7_1_0 = (RuleCall)cGeometryAssignment_0_7_1.eContents().get(0);
		private final Group cGroup_0_8 = (Group)cUnorderedGroup_0.eContents().get(8);
		private final Keyword cEndpointKeyword_0_8_0 = (Keyword)cGroup_0_8.eContents().get(0);
		private final Assignment cEndpointAssignment_0_8_1 = (Assignment)cGroup_0_8.eContents().get(1);
		private final RuleCall cEndpointSTRINGTerminalRuleCall_0_8_1_0 = (RuleCall)cEndpointAssignment_0_8_1.eContents().get(0);
		private final Group cGroup_0_9 = (Group)cUnorderedGroup_0.eContents().get(9);
		private final Keyword cNamespaceKeyword_0_9_0 = (Keyword)cGroup_0_9.eContents().get(0);
		private final Assignment cPackageAssignment_0_9_1 = (Assignment)cGroup_0_9.eContents().get(1);
		private final RuleCall cPackagePathNameParserRuleCall_0_9_1_0 = (RuleCall)cPackageAssignment_0_9_1.eContents().get(0);
		private final Group cGroup_0_10 = (Group)cUnorderedGroup_0.eContents().get(10);
		private final Keyword cCoverageKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final Assignment cScaleAssignment_0_10_1 = (Assignment)cGroup_0_10.eContents().get(1);
		private final RuleCall cScaleFunctionParserRuleCall_0_10_1_0 = (RuleCall)cScaleAssignment_0_10_1.eContents().get(0);
		private final Group cGroup_0_10_2 = (Group)cGroup_0_10.eContents().get(2);
		private final Keyword cCommaKeyword_0_10_2_0 = (Keyword)cGroup_0_10_2.eContents().get(0);
		private final Assignment cScaleAssignment_0_10_2_1 = (Assignment)cGroup_0_10_2.eContents().get(1);
		private final RuleCall cScaleFunctionParserRuleCall_0_10_2_1_0 = (RuleCall)cScaleAssignment_0_10_2_1.eContents().get(0);
		private final Group cGroup_0_11 = (Group)cUnorderedGroup_0.eContents().get(11);
		private final Keyword cContextKeyword_0_11_0 = (Keyword)cGroup_0_11.eContents().get(0);
		private final Assignment cContextUrnAssignment_0_11_1 = (Assignment)cGroup_0_11.eContents().get(1);
		private final RuleCall cContextUrnUrnParserRuleCall_0_11_1_0 = (RuleCall)cContextUrnAssignment_0_11_1.eContents().get(0);
		private final Assignment cActorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorsActorDefinitionParserRuleCall_1_0 = (RuleCall)cActorsAssignment_1.eContents().get(0);
		
		///*
		// * The root model is the body of the dataflow for the context observation
		// */ Model:
		//	(('@dataflow' name=(Path | UrnId))? & ('@var' variables+=Parameter)* & ('@val' constants+=Parameter)* & ('@author'
		//	authors+=STRING)* & ('@version' version=VersionNumber)? & ('@klab' klabVersion=VersionNumber)? & ('@worldview'
		//	worldview=LOWERCASE_ID)? & ('@geometry' geometry=Geometry)? & ('@endpoint' endpoint=STRING)? & ('@namespace'
		//	package=PathName)? & ('@coverage' scale+=Function (',' scale+=Function)*)? & ('@context' contextUrn=Urn)?)
		//	actors+=ActorDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//(('@dataflow' name=(Path | UrnId))? & ('@var' variables+=Parameter)* & ('@val' constants+=Parameter)* & ('@author'
		//authors+=STRING)* & ('@version' version=VersionNumber)? & ('@klab' klabVersion=VersionNumber)? & ('@worldview'
		//worldview=LOWERCASE_ID)? & ('@geometry' geometry=Geometry)? & ('@endpoint' endpoint=STRING)? & ('@namespace'
		//package=PathName)? & ('@coverage' scale+=Function (',' scale+=Function)*)? & ('@context' contextUrn=Urn)?)
		//actors+=ActorDefinition*
		public Group getGroup() { return cGroup; }
		
		//('@dataflow' name=(Path | UrnId))? & ('@var' variables+=Parameter)* & ('@val' constants+=Parameter)* & ('@author'
		//authors+=STRING)* & ('@version' version=VersionNumber)? & ('@klab' klabVersion=VersionNumber)? & ('@worldview'
		//worldview=LOWERCASE_ID)? & ('@geometry' geometry=Geometry)? & ('@endpoint' endpoint=STRING)? & ('@namespace'
		//package=PathName)? & ('@coverage' scale+=Function (',' scale+=Function)*)? & ('@context' contextUrn=Urn)?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }
		
		//('@dataflow' name=(Path | UrnId))?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'@dataflow'
		public Keyword getDataflowKeyword_0_0_0() { return cDataflowKeyword_0_0_0; }
		
		//name=(Path | UrnId)
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }
		
		//(Path | UrnId)
		public Alternatives getNameAlternatives_0_0_1_0() { return cNameAlternatives_0_0_1_0; }
		
		//Path
		public RuleCall getNamePathParserRuleCall_0_0_1_0_0() { return cNamePathParserRuleCall_0_0_1_0_0; }
		
		//UrnId
		public RuleCall getNameUrnIdParserRuleCall_0_0_1_0_1() { return cNameUrnIdParserRuleCall_0_0_1_0_1; }
		
		//('@var' variables+=Parameter)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'@var'
		public Keyword getVarKeyword_0_1_0() { return cVarKeyword_0_1_0; }
		
		//variables+=Parameter
		public Assignment getVariablesAssignment_0_1_1() { return cVariablesAssignment_0_1_1; }
		
		//Parameter
		public RuleCall getVariablesParameterParserRuleCall_0_1_1_0() { return cVariablesParameterParserRuleCall_0_1_1_0; }
		
		//('@val' constants+=Parameter)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'@val'
		public Keyword getValKeyword_0_2_0() { return cValKeyword_0_2_0; }
		
		//constants+=Parameter
		public Assignment getConstantsAssignment_0_2_1() { return cConstantsAssignment_0_2_1; }
		
		//Parameter
		public RuleCall getConstantsParameterParserRuleCall_0_2_1_0() { return cConstantsParameterParserRuleCall_0_2_1_0; }
		
		//('@author' authors+=STRING)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'@author'
		public Keyword getAuthorKeyword_0_3_0() { return cAuthorKeyword_0_3_0; }
		
		//authors+=STRING
		public Assignment getAuthorsAssignment_0_3_1() { return cAuthorsAssignment_0_3_1; }
		
		//STRING
		public RuleCall getAuthorsSTRINGTerminalRuleCall_0_3_1_0() { return cAuthorsSTRINGTerminalRuleCall_0_3_1_0; }
		
		//('@version' version=VersionNumber)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'@version'
		public Keyword getVersionKeyword_0_4_0() { return cVersionKeyword_0_4_0; }
		
		//version=VersionNumber
		public Assignment getVersionAssignment_0_4_1() { return cVersionAssignment_0_4_1; }
		
		//VersionNumber
		public RuleCall getVersionVersionNumberParserRuleCall_0_4_1_0() { return cVersionVersionNumberParserRuleCall_0_4_1_0; }
		
		//('@klab' klabVersion=VersionNumber)?
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//'@klab'
		public Keyword getKlabKeyword_0_5_0() { return cKlabKeyword_0_5_0; }
		
		//klabVersion=VersionNumber
		public Assignment getKlabVersionAssignment_0_5_1() { return cKlabVersionAssignment_0_5_1; }
		
		//VersionNumber
		public RuleCall getKlabVersionVersionNumberParserRuleCall_0_5_1_0() { return cKlabVersionVersionNumberParserRuleCall_0_5_1_0; }
		
		//('@worldview' worldview=LOWERCASE_ID)?
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//'@worldview'
		public Keyword getWorldviewKeyword_0_6_0() { return cWorldviewKeyword_0_6_0; }
		
		//worldview=LOWERCASE_ID
		public Assignment getWorldviewAssignment_0_6_1() { return cWorldviewAssignment_0_6_1; }
		
		//LOWERCASE_ID
		public RuleCall getWorldviewLOWERCASE_IDTerminalRuleCall_0_6_1_0() { return cWorldviewLOWERCASE_IDTerminalRuleCall_0_6_1_0; }
		
		//('@geometry' geometry=Geometry)?
		public Group getGroup_0_7() { return cGroup_0_7; }
		
		//'@geometry'
		public Keyword getGeometryKeyword_0_7_0() { return cGeometryKeyword_0_7_0; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_0_7_1() { return cGeometryAssignment_0_7_1; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_0_7_1_0() { return cGeometryGeometryParserRuleCall_0_7_1_0; }
		
		//('@endpoint' endpoint=STRING)?
		public Group getGroup_0_8() { return cGroup_0_8; }
		
		//'@endpoint'
		public Keyword getEndpointKeyword_0_8_0() { return cEndpointKeyword_0_8_0; }
		
		//endpoint=STRING
		public Assignment getEndpointAssignment_0_8_1() { return cEndpointAssignment_0_8_1; }
		
		//STRING
		public RuleCall getEndpointSTRINGTerminalRuleCall_0_8_1_0() { return cEndpointSTRINGTerminalRuleCall_0_8_1_0; }
		
		//('@namespace' package=PathName)?
		public Group getGroup_0_9() { return cGroup_0_9; }
		
		//'@namespace'
		public Keyword getNamespaceKeyword_0_9_0() { return cNamespaceKeyword_0_9_0; }
		
		//package=PathName
		public Assignment getPackageAssignment_0_9_1() { return cPackageAssignment_0_9_1; }
		
		//PathName
		public RuleCall getPackagePathNameParserRuleCall_0_9_1_0() { return cPackagePathNameParserRuleCall_0_9_1_0; }
		
		//('@coverage' scale+=Function (',' scale+=Function)*)?
		public Group getGroup_0_10() { return cGroup_0_10; }
		
		//'@coverage'
		public Keyword getCoverageKeyword_0_10_0() { return cCoverageKeyword_0_10_0; }
		
		//scale+=Function
		public Assignment getScaleAssignment_0_10_1() { return cScaleAssignment_0_10_1; }
		
		//Function
		public RuleCall getScaleFunctionParserRuleCall_0_10_1_0() { return cScaleFunctionParserRuleCall_0_10_1_0; }
		
		//(',' scale+=Function)*
		public Group getGroup_0_10_2() { return cGroup_0_10_2; }
		
		//','
		public Keyword getCommaKeyword_0_10_2_0() { return cCommaKeyword_0_10_2_0; }
		
		//scale+=Function
		public Assignment getScaleAssignment_0_10_2_1() { return cScaleAssignment_0_10_2_1; }
		
		//Function
		public RuleCall getScaleFunctionParserRuleCall_0_10_2_1_0() { return cScaleFunctionParserRuleCall_0_10_2_1_0; }
		
		//('@context' contextUrn=Urn)?
		public Group getGroup_0_11() { return cGroup_0_11; }
		
		//'@context'
		public Keyword getContextKeyword_0_11_0() { return cContextKeyword_0_11_0; }
		
		//contextUrn=Urn
		public Assignment getContextUrnAssignment_0_11_1() { return cContextUrnAssignment_0_11_1; }
		
		//Urn
		public RuleCall getContextUrnUrnParserRuleCall_0_11_1_0() { return cContextUrnUrnParserRuleCall_0_11_1_0; }
		
		//actors+=ActorDefinition*
		public Assignment getActorsAssignment_1() { return cActorsAssignment_1; }
		
		//ActorDefinition
		public RuleCall getActorsActorDefinitionParserRuleCall_1_0() { return cActorsActorDefinitionParserRuleCall_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANNOTATION_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Annotation:
		//	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ANNOTATION_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ANNOTATION_ID
		public RuleCall getNameANNOTATION_IDTerminalRuleCall_0_0() { return cNameANNOTATION_IDTerminalRuleCall_0_0; }
		
		//('(' parameters=ParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ActorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.ActorDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0_0 = (RuleCall)cAnnotationsAssignment_0_0.eContents().get(0);
		private final Assignment cFinalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cFinalFinalKeyword_0_1_0 = (Keyword)cFinalAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cExportedAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final Keyword cExportedExportKeyword_0_2_0_0 = (Keyword)cExportedAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Group cGroup_0_2_1_0 = (Group)cGroup_0_2_1.eContents().get(0);
		private final Assignment cOptionalAssignment_0_2_1_0_0 = (Assignment)cGroup_0_2_1_0.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_2_1_0_0_0 = (Keyword)cOptionalAssignment_0_2_1_0_0.eContents().get(0);
		private final Assignment cImportedAssignment_0_2_1_0_1 = (Assignment)cGroup_0_2_1_0.eContents().get(1);
		private final Keyword cImportedImportKeyword_0_2_1_0_1_0 = (Keyword)cImportedAssignment_0_2_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2_1_1 = (Alternatives)cGroup_0_2_1.eContents().get(1);
		private final Assignment cMultipleAssignment_0_2_1_1_0 = (Assignment)cAlternatives_0_2_1_1.eContents().get(0);
		private final Keyword cMultipleMultipleKeyword_0_2_1_1_0_0 = (Keyword)cMultipleAssignment_0_2_1_1_0.eContents().get(0);
		private final Group cGroup_0_2_1_1_1 = (Group)cAlternatives_0_2_1_1.eContents().get(1);
		private final Assignment cArityAssignment_0_2_1_1_1_0 = (Assignment)cGroup_0_2_1_1_1.eContents().get(0);
		private final RuleCall cArityINTTerminalRuleCall_0_2_1_1_1_0_0 = (RuleCall)cArityAssignment_0_2_1_1_1_0.eContents().get(0);
		private final Assignment cMinimumAssignment_0_2_1_1_1_1 = (Assignment)cGroup_0_2_1_1_1.eContents().get(1);
		private final Keyword cMinimumPlusSignKeyword_0_2_1_1_1_1_0 = (Keyword)cMinimumAssignment_0_2_1_1_1_1.eContents().get(0);
		private final Assignment cParameterAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cParameterParameterKeyword_0_3_0 = (Keyword)cParameterAssignment_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTypeACTORParserRuleCall_0_4_0 = (RuleCall)cTypeAssignment_0_4.eContents().get(0);
		private final Assignment cNameAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final Alternatives cNameAlternatives_0_5_0 = (Alternatives)cNameAssignment_0_5.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_5_0_0 = (RuleCall)cNameAlternatives_0_5_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_DASHIDTerminalRuleCall_0_5_0_1 = (RuleCall)cNameAlternatives_0_5_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_5_0_2 = (RuleCall)cNameAlternatives_0_5_0.eContents().get(2);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cForKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cTargetsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cTargetsTARGETParserRuleCall_0_6_1_0 = (RuleCall)cTargetsAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_6_2 = (Group)cGroup_0_6.eContents().get(2);
		private final Keyword cCommaKeyword_0_6_2_0 = (Keyword)cGroup_0_6_2.eContents().get(0);
		private final Assignment cTargetsAssignment_0_6_2_1 = (Assignment)cGroup_0_6_2.eContents().get(1);
		private final RuleCall cTargetsTARGETParserRuleCall_0_6_2_1_0 = (RuleCall)cTargetsAssignment_0_6_2_1.eContents().get(0);
		private final Assignment cDocstringAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_0_7_0 = (RuleCall)cDocstringAssignment_0_7.eContents().get(0);
		private final Group cGroup_0_8 = (Group)cGroup_0.eContents().get(8);
		private final Keyword cLabelKeyword_0_8_0 = (Keyword)cGroup_0_8.eContents().get(0);
		private final Assignment cLabelAssignment_0_8_1 = (Assignment)cGroup_0_8.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_8_1_0 = (RuleCall)cLabelAssignment_0_8_1.eContents().get(0);
		private final Group cGroup_0_9 = (Group)cGroup_0.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_0_9_0 = (Keyword)cGroup_0_9.eContents().get(0);
		private final Assignment cBodyAssignment_0_9_1 = (Assignment)cGroup_0_9.eContents().get(1);
		private final RuleCall cBodyDataflowBodyParserRuleCall_0_9_1_0 = (RuleCall)cBodyAssignment_0_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_9_2 = (Keyword)cGroup_0_9.eContents().get(2);
		private final Group cGroup_0_10 = (Group)cGroup_0.eContents().get(10);
		private final Keyword cAsKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final Assignment cLocalNameAssignment_0_10_1 = (Assignment)cGroup_0_10.eContents().get(1);
		private final RuleCall cLocalNameLOWERCASE_IDTerminalRuleCall_0_10_1_0 = (RuleCall)cLocalNameAssignment_0_10_1.eContents().get(0);
		private final Group cGroup_0_11 = (Group)cGroup_0.eContents().get(11);
		private final Keyword cOverKeyword_0_11_0 = (Keyword)cGroup_0_11.eContents().get(0);
		private final Assignment cCoverageAssignment_0_11_1 = (Assignment)cGroup_0_11.eContents().get(1);
		private final RuleCall cCoverageFunctionParserRuleCall_0_11_1_0 = (RuleCall)cCoverageAssignment_0_11_1.eContents().get(0);
		private final Group cGroup_0_11_2 = (Group)cGroup_0_11.eContents().get(2);
		private final Keyword cCommaKeyword_0_11_2_0 = (Keyword)cGroup_0_11_2.eContents().get(0);
		private final Assignment cCoverageAssignment_0_11_2_1 = (Assignment)cGroup_0_11_2.eContents().get(1);
		private final RuleCall cCoverageFunctionParserRuleCall_0_11_2_1_0 = (RuleCall)cCoverageAssignment_0_11_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOptionalAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_1_0_0_0 = (Keyword)cOptionalAssignment_1_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0_1_0 = (Alternatives)cTypeAssignment_1_0_1.eContents().get(0);
		private final Keyword cTypeNumberKeyword_1_0_1_0_0 = (Keyword)cTypeAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cTypeBooleanKeyword_1_0_1_0_1 = (Keyword)cTypeAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cTypeTextKeyword_1_0_1_0_2 = (Keyword)cTypeAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cTypeListKeyword_1_0_1_0_3 = (Keyword)cTypeAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cTypeEnumKeyword_1_0_1_0_4 = (Keyword)cTypeAlternatives_1_0_1_0.eContents().get(4);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cParameterAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cParameterInputKeyword_1_1_0_0 = (Keyword)cParameterAssignment_1_1_0.eContents().get(0);
		private final Assignment cImportedAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cImportedImportKeyword_1_1_1_0 = (Keyword)cImportedAssignment_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cNameAlternatives_1_2_0 = (Alternatives)cNameAssignment_1_2.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_2_0_0 = (RuleCall)cNameAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_DASHIDTerminalRuleCall_1_2_0_1 = (RuleCall)cNameAlternatives_1_2_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_2_0_2 = (RuleCall)cNameAlternatives_1_2_0.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cValuesKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cEnumValuesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cEnumValuesUPPERCASE_IDTerminalRuleCall_1_3_1_0 = (RuleCall)cEnumValuesAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cEnumValuesAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cEnumValuesUPPERCASE_IDTerminalRuleCall_1_3_2_1_0 = (RuleCall)cEnumValuesAssignment_1_3_2_1.eContents().get(0);
		private final Assignment cDocstringAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cDocstringAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cLabelKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cLabelAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_5_1_0 = (RuleCall)cLabelAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cDefaultKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cDefaultAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cDefaultValueParserRuleCall_1_6_1_0 = (RuleCall)cDefaultAssignment_1_6_1.eContents().get(0);
		private final Group cGroup_1_7 = (Group)cGroup_1.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Assignment cBodyAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final RuleCall cBodyDataflowBodyParserRuleCall_1_7_1_0 = (RuleCall)cBodyAssignment_1_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7_2 = (Keyword)cGroup_1_7.eContents().get(2);
		private final Alternatives cAlternatives_1_8 = (Alternatives)cGroup_1.eContents().get(8);
		private final Group cGroup_1_8_0 = (Group)cAlternatives_1_8.eContents().get(0);
		private final Keyword cMinimumKeyword_1_8_0_0 = (Keyword)cGroup_1_8_0.eContents().get(0);
		private final Assignment cRangeMinAssignment_1_8_0_1 = (Assignment)cGroup_1_8_0.eContents().get(1);
		private final RuleCall cRangeMinNumberParserRuleCall_1_8_0_1_0 = (RuleCall)cRangeMinAssignment_1_8_0_1.eContents().get(0);
		private final Group cGroup_1_8_1 = (Group)cAlternatives_1_8.eContents().get(1);
		private final Keyword cMaximumKeyword_1_8_1_0 = (Keyword)cGroup_1_8_1.eContents().get(0);
		private final Assignment cRangeMaxAssignment_1_8_1_1 = (Assignment)cGroup_1_8_1.eContents().get(1);
		private final RuleCall cRangeMaxNumberParserRuleCall_1_8_1_1_0 = (RuleCall)cRangeMaxAssignment_1_8_1_1.eContents().get(0);
		private final Group cGroup_1_8_2 = (Group)cAlternatives_1_8.eContents().get(2);
		private final Keyword cRangeKeyword_1_8_2_0 = (Keyword)cGroup_1_8_2.eContents().get(0);
		private final Assignment cRangeMinAssignment_1_8_2_1 = (Assignment)cGroup_1_8_2.eContents().get(1);
		private final RuleCall cRangeMinNumberParserRuleCall_1_8_2_1_0 = (RuleCall)cRangeMinAssignment_1_8_2_1.eContents().get(0);
		private final Keyword cToKeyword_1_8_2_2 = (Keyword)cGroup_1_8_2.eContents().get(2);
		private final Assignment cRangeMaxAssignment_1_8_2_3 = (Assignment)cGroup_1_8_2.eContents().get(3);
		private final RuleCall cRangeMaxNumberParserRuleCall_1_8_2_3_0 = (RuleCall)cRangeMaxAssignment_1_8_2_3.eContents().get(0);
		
		//ActorDefinition:
		//	annotations+=Annotation*
		//	final?='final'? (exported?='export' | (optional?='optional'? imported?='import') (multiple?='multiple' | arity=INT
		//	minimum?='+'?)?)?
		//	// parameters denotes the ability of the implementation of accepting modified values during run
		//	// parameters cannot be multiple, must have a default and should have a range, can be calibrated, and will appear in calibration scenarios
		//	parameter?='parameter'?
		//	type=ACTOR name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING) ('for' targets+=TARGET (',' targets+=TARGET)*)?
		//	docstring=STRING? ('label' label=STRING)? ('{' body=DataflowBody '}')? ('as' localName=LOWERCASE_ID)? ('over'
		//	coverage+=Function (',' coverage+=Function)*)?
		//	| (optional?='optional' | type=('number' | 'boolean' | 'text' | 'list' | 'enum')) (parameter?='input' |
		//	imported?='import') name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING) ('values' enumValues+=UPPERCASE_ID (','
		//	enumValues+=UPPERCASE_ID)*)?
		//	docstring=STRING ('label' label=STRING)? ('default' default=Value)? ('{' body=DataflowBody '}')? ('minimum'
		//	rangeMin=Number | 'maximum' rangeMax=Number | 'range' rangeMin=Number 'to' rangeMax=Number)?;
		@Override public ParserRule getRule() { return rule; }
		
		///*
		//	 * This is the form that specifies dataflows
		//	 */ annotations+=Annotation* final?='final'? (exported?='export' | (optional?='optional'? imported?='import')
		//(multiple?='multiple' | arity=INT minimum?='+'?)?)? // parameters denotes the ability of the implementation of accepting modified values during run
		//// parameters cannot be multiple, must have a default and should have a range, can be calibrated, and will appear in calibration scenarios
		//parameter?='parameter'? type=ACTOR name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING) ('for' targets+=TARGET (','
		//targets+=TARGET)*)? docstring=STRING? ('label' label=STRING)? ('{' body=DataflowBody '}')? ('as'
		//localName=LOWERCASE_ID)? ('over' coverage+=Function (',' coverage+=Function)*)? | (optional?='optional' |
		//type=('number' | 'boolean' | 'text' | 'list' | 'enum')) (parameter?='input' | imported?='import') name=(LOWERCASE_ID |
		//LOWERCASE_DASHID | STRING) ('values' enumValues+=UPPERCASE_ID (',' enumValues+=UPPERCASE_ID)*)? docstring=STRING
		//('label' label=STRING)? ('default' default=Value)? ('{' body=DataflowBody '}')? ('minimum' rangeMin=Number | 'maximum'
		//rangeMax=Number | 'range' rangeMin=Number 'to' rangeMax=Number)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		///*
		//	 * This is the form that specifies dataflows
		//	 */ annotations+=Annotation* final?='final'? (exported?='export' | (optional?='optional'? imported?='import')
		//(multiple?='multiple' | arity=INT minimum?='+'?)?)? // parameters denotes the ability of the implementation of accepting modified values during run
		//// parameters cannot be multiple, must have a default and should have a range, can be calibrated, and will appear in calibration scenarios
		//parameter?='parameter'? type=ACTOR name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING) ('for' targets+=TARGET (','
		//targets+=TARGET)*)? docstring=STRING? ('label' label=STRING)? ('{' body=DataflowBody '}')? ('as'
		//localName=LOWERCASE_ID)? ('over' coverage+=Function (',' coverage+=Function)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		///*
		//	 * This is the form that specifies dataflows
		//	 */ annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0_0() { return cAnnotationsAssignment_0_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_0_1() { return cFinalAssignment_0_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_0_1_0() { return cFinalFinalKeyword_0_1_0; }
		
		//(exported?='export' | (optional?='optional'? imported?='import') (multiple?='multiple' | arity=INT minimum?='+'?)?)?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//exported?='export'
		public Assignment getExportedAssignment_0_2_0() { return cExportedAssignment_0_2_0; }
		
		//'export'
		public Keyword getExportedExportKeyword_0_2_0_0() { return cExportedExportKeyword_0_2_0_0; }
		
		//(optional?='optional'? imported?='import') (multiple?='multiple' | arity=INT minimum?='+'?)?
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//optional?='optional'? imported?='import'
		public Group getGroup_0_2_1_0() { return cGroup_0_2_1_0; }
		
		//optional?='optional'?
		public Assignment getOptionalAssignment_0_2_1_0_0() { return cOptionalAssignment_0_2_1_0_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_0_2_1_0_0_0() { return cOptionalOptionalKeyword_0_2_1_0_0_0; }
		
		//imported?='import'
		public Assignment getImportedAssignment_0_2_1_0_1() { return cImportedAssignment_0_2_1_0_1; }
		
		//'import'
		public Keyword getImportedImportKeyword_0_2_1_0_1_0() { return cImportedImportKeyword_0_2_1_0_1_0; }
		
		//(multiple?='multiple' | arity=INT minimum?='+'?)?
		public Alternatives getAlternatives_0_2_1_1() { return cAlternatives_0_2_1_1; }
		
		//multiple?='multiple'
		public Assignment getMultipleAssignment_0_2_1_1_0() { return cMultipleAssignment_0_2_1_1_0; }
		
		//'multiple'
		public Keyword getMultipleMultipleKeyword_0_2_1_1_0_0() { return cMultipleMultipleKeyword_0_2_1_1_0_0; }
		
		//arity=INT minimum?='+'?
		public Group getGroup_0_2_1_1_1() { return cGroup_0_2_1_1_1; }
		
		//arity=INT
		public Assignment getArityAssignment_0_2_1_1_1_0() { return cArityAssignment_0_2_1_1_1_0; }
		
		//INT
		public RuleCall getArityINTTerminalRuleCall_0_2_1_1_1_0_0() { return cArityINTTerminalRuleCall_0_2_1_1_1_0_0; }
		
		//minimum?='+'?
		public Assignment getMinimumAssignment_0_2_1_1_1_1() { return cMinimumAssignment_0_2_1_1_1_1; }
		
		//'+'
		public Keyword getMinimumPlusSignKeyword_0_2_1_1_1_1_0() { return cMinimumPlusSignKeyword_0_2_1_1_1_1_0; }
		
		//// parameters denotes the ability of the implementation of accepting modified values during run
		//// parameters cannot be multiple, must have a default and should have a range, can be calibrated, and will appear in calibration scenarios
		//parameter?='parameter'?
		public Assignment getParameterAssignment_0_3() { return cParameterAssignment_0_3; }
		
		//'parameter'
		public Keyword getParameterParameterKeyword_0_3_0() { return cParameterParameterKeyword_0_3_0; }
		
		//type=ACTOR
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }
		
		//ACTOR
		public RuleCall getTypeACTORParserRuleCall_0_4_0() { return cTypeACTORParserRuleCall_0_4_0; }
		
		//name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING)
		public Assignment getNameAssignment_0_5() { return cNameAssignment_0_5; }
		
		//(LOWERCASE_ID | LOWERCASE_DASHID | STRING)
		public Alternatives getNameAlternatives_0_5_0() { return cNameAlternatives_0_5_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_5_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_5_0_0; }
		
		//LOWERCASE_DASHID
		public RuleCall getNameLOWERCASE_DASHIDTerminalRuleCall_0_5_0_1() { return cNameLOWERCASE_DASHIDTerminalRuleCall_0_5_0_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_5_0_2() { return cNameSTRINGTerminalRuleCall_0_5_0_2; }
		
		//('for' targets+=TARGET (',' targets+=TARGET)*)?
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//'for'
		public Keyword getForKeyword_0_6_0() { return cForKeyword_0_6_0; }
		
		//targets+=TARGET
		public Assignment getTargetsAssignment_0_6_1() { return cTargetsAssignment_0_6_1; }
		
		//TARGET
		public RuleCall getTargetsTARGETParserRuleCall_0_6_1_0() { return cTargetsTARGETParserRuleCall_0_6_1_0; }
		
		//(',' targets+=TARGET)*
		public Group getGroup_0_6_2() { return cGroup_0_6_2; }
		
		//','
		public Keyword getCommaKeyword_0_6_2_0() { return cCommaKeyword_0_6_2_0; }
		
		//targets+=TARGET
		public Assignment getTargetsAssignment_0_6_2_1() { return cTargetsAssignment_0_6_2_1; }
		
		//TARGET
		public RuleCall getTargetsTARGETParserRuleCall_0_6_2_1_0() { return cTargetsTARGETParserRuleCall_0_6_2_1_0; }
		
		//docstring=STRING?
		public Assignment getDocstringAssignment_0_7() { return cDocstringAssignment_0_7; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_0_7_0() { return cDocstringSTRINGTerminalRuleCall_0_7_0; }
		
		//('label' label=STRING)?
		public Group getGroup_0_8() { return cGroup_0_8; }
		
		//'label'
		public Keyword getLabelKeyword_0_8_0() { return cLabelKeyword_0_8_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_0_8_1() { return cLabelAssignment_0_8_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_8_1_0() { return cLabelSTRINGTerminalRuleCall_0_8_1_0; }
		
		//('{' body=DataflowBody '}')?
		public Group getGroup_0_9() { return cGroup_0_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_9_0() { return cLeftCurlyBracketKeyword_0_9_0; }
		
		//body=DataflowBody
		public Assignment getBodyAssignment_0_9_1() { return cBodyAssignment_0_9_1; }
		
		//DataflowBody
		public RuleCall getBodyDataflowBodyParserRuleCall_0_9_1_0() { return cBodyDataflowBodyParserRuleCall_0_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_9_2() { return cRightCurlyBracketKeyword_0_9_2; }
		
		//('as' localName=LOWERCASE_ID)?
		public Group getGroup_0_10() { return cGroup_0_10; }
		
		//'as'
		public Keyword getAsKeyword_0_10_0() { return cAsKeyword_0_10_0; }
		
		//localName=LOWERCASE_ID
		public Assignment getLocalNameAssignment_0_10_1() { return cLocalNameAssignment_0_10_1; }
		
		//LOWERCASE_ID
		public RuleCall getLocalNameLOWERCASE_IDTerminalRuleCall_0_10_1_0() { return cLocalNameLOWERCASE_IDTerminalRuleCall_0_10_1_0; }
		
		//('over' coverage+=Function (',' coverage+=Function)*)?
		public Group getGroup_0_11() { return cGroup_0_11; }
		
		//'over'
		public Keyword getOverKeyword_0_11_0() { return cOverKeyword_0_11_0; }
		
		//coverage+=Function
		public Assignment getCoverageAssignment_0_11_1() { return cCoverageAssignment_0_11_1; }
		
		//Function
		public RuleCall getCoverageFunctionParserRuleCall_0_11_1_0() { return cCoverageFunctionParserRuleCall_0_11_1_0; }
		
		//(',' coverage+=Function)*
		public Group getGroup_0_11_2() { return cGroup_0_11_2; }
		
		//','
		public Keyword getCommaKeyword_0_11_2_0() { return cCommaKeyword_0_11_2_0; }
		
		//coverage+=Function
		public Assignment getCoverageAssignment_0_11_2_1() { return cCoverageAssignment_0_11_2_1; }
		
		//Function
		public RuleCall getCoverageFunctionParserRuleCall_0_11_2_1_0() { return cCoverageFunctionParserRuleCall_0_11_2_1_0; }
		
		//(optional?='optional' | type=('number' | 'boolean' | 'text' | 'list' | 'enum')) (parameter?='input' |
		//imported?='import') name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING) ('values' enumValues+=UPPERCASE_ID (','
		//enumValues+=UPPERCASE_ID)*)? docstring=STRING ('label' label=STRING)? ('default' default=Value)? ('{'
		//body=DataflowBody '}')? ('minimum' rangeMin=Number | 'maximum' rangeMax=Number | 'range' rangeMin=Number 'to'
		//rangeMax=Number)?
		public Group getGroup_1() { return cGroup_1; }
		
		///*
		//	 * This is the form to declare service prototypes
		//	 */ // parameter for services - takes type from value if optional; default mandatory if optional; docstring is mandatory
		//optional?='optional' | type=('number' | 'boolean' | 'text' | 'list' | 'enum')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_1_0_0() { return cOptionalAssignment_1_0_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_1_0_0_0() { return cOptionalOptionalKeyword_1_0_0_0; }
		
		//type=('number' | 'boolean' | 'text' | 'list' | 'enum')
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }
		
		//('number' | 'boolean' | 'text' | 'list' | 'enum')
		public Alternatives getTypeAlternatives_1_0_1_0() { return cTypeAlternatives_1_0_1_0; }
		
		//'number'
		public Keyword getTypeNumberKeyword_1_0_1_0_0() { return cTypeNumberKeyword_1_0_1_0_0; }
		
		//'boolean'
		public Keyword getTypeBooleanKeyword_1_0_1_0_1() { return cTypeBooleanKeyword_1_0_1_0_1; }
		
		//'text'
		public Keyword getTypeTextKeyword_1_0_1_0_2() { return cTypeTextKeyword_1_0_1_0_2; }
		
		//'list'
		public Keyword getTypeListKeyword_1_0_1_0_3() { return cTypeListKeyword_1_0_1_0_3; }
		
		//'enum'
		public Keyword getTypeEnumKeyword_1_0_1_0_4() { return cTypeEnumKeyword_1_0_1_0_4; }
		
		//// input = function parameter; import = artifact from context
		//parameter?='input' | imported?='import'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//parameter?='input'
		public Assignment getParameterAssignment_1_1_0() { return cParameterAssignment_1_1_0; }
		
		//'input'
		public Keyword getParameterInputKeyword_1_1_0_0() { return cParameterInputKeyword_1_1_0_0; }
		
		//imported?='import'
		public Assignment getImportedAssignment_1_1_1() { return cImportedAssignment_1_1_1; }
		
		//'import'
		public Keyword getImportedImportKeyword_1_1_1_0() { return cImportedImportKeyword_1_1_1_0; }
		
		//name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING)
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//(LOWERCASE_ID | LOWERCASE_DASHID | STRING)
		public Alternatives getNameAlternatives_1_2_0() { return cNameAlternatives_1_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_2_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_1_2_0_0; }
		
		//LOWERCASE_DASHID
		public RuleCall getNameLOWERCASE_DASHIDTerminalRuleCall_1_2_0_1() { return cNameLOWERCASE_DASHIDTerminalRuleCall_1_2_0_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_2_0_2() { return cNameSTRINGTerminalRuleCall_1_2_0_2; }
		
		//('values' enumValues+=UPPERCASE_ID (',' enumValues+=UPPERCASE_ID)*)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'values'
		public Keyword getValuesKeyword_1_3_0() { return cValuesKeyword_1_3_0; }
		
		//enumValues+=UPPERCASE_ID
		public Assignment getEnumValuesAssignment_1_3_1() { return cEnumValuesAssignment_1_3_1; }
		
		//UPPERCASE_ID
		public RuleCall getEnumValuesUPPERCASE_IDTerminalRuleCall_1_3_1_0() { return cEnumValuesUPPERCASE_IDTerminalRuleCall_1_3_1_0; }
		
		//(',' enumValues+=UPPERCASE_ID)*
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }
		
		//','
		public Keyword getCommaKeyword_1_3_2_0() { return cCommaKeyword_1_3_2_0; }
		
		//enumValues+=UPPERCASE_ID
		public Assignment getEnumValuesAssignment_1_3_2_1() { return cEnumValuesAssignment_1_3_2_1; }
		
		//UPPERCASE_ID
		public RuleCall getEnumValuesUPPERCASE_IDTerminalRuleCall_1_3_2_1_0() { return cEnumValuesUPPERCASE_IDTerminalRuleCall_1_3_2_1_0; }
		
		//docstring=STRING
		public Assignment getDocstringAssignment_1_4() { return cDocstringAssignment_1_4; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_1_4_0() { return cDocstringSTRINGTerminalRuleCall_1_4_0; }
		
		//('label' label=STRING)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'label'
		public Keyword getLabelKeyword_1_5_0() { return cLabelKeyword_1_5_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_1_5_1() { return cLabelAssignment_1_5_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_5_1_0() { return cLabelSTRINGTerminalRuleCall_1_5_1_0; }
		
		//('default' default=Value)?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'default'
		public Keyword getDefaultKeyword_1_6_0() { return cDefaultKeyword_1_6_0; }
		
		//default=Value
		public Assignment getDefaultAssignment_1_6_1() { return cDefaultAssignment_1_6_1; }
		
		//Value
		public RuleCall getDefaultValueParserRuleCall_1_6_1_0() { return cDefaultValueParserRuleCall_1_6_1_0; }
		
		//('{' body=DataflowBody '}')?
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_7_0() { return cLeftCurlyBracketKeyword_1_7_0; }
		
		//body=DataflowBody
		public Assignment getBodyAssignment_1_7_1() { return cBodyAssignment_1_7_1; }
		
		//DataflowBody
		public RuleCall getBodyDataflowBodyParserRuleCall_1_7_1_0() { return cBodyDataflowBodyParserRuleCall_1_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7_2() { return cRightCurlyBracketKeyword_1_7_2; }
		
		//('minimum' rangeMin=Number | 'maximum' rangeMax=Number | 'range' rangeMin=Number 'to' rangeMax=Number)?
		public Alternatives getAlternatives_1_8() { return cAlternatives_1_8; }
		
		//'minimum' rangeMin=Number
		public Group getGroup_1_8_0() { return cGroup_1_8_0; }
		
		//'minimum'
		public Keyword getMinimumKeyword_1_8_0_0() { return cMinimumKeyword_1_8_0_0; }
		
		//rangeMin=Number
		public Assignment getRangeMinAssignment_1_8_0_1() { return cRangeMinAssignment_1_8_0_1; }
		
		//Number
		public RuleCall getRangeMinNumberParserRuleCall_1_8_0_1_0() { return cRangeMinNumberParserRuleCall_1_8_0_1_0; }
		
		//'maximum' rangeMax=Number
		public Group getGroup_1_8_1() { return cGroup_1_8_1; }
		
		//'maximum'
		public Keyword getMaximumKeyword_1_8_1_0() { return cMaximumKeyword_1_8_1_0; }
		
		//rangeMax=Number
		public Assignment getRangeMaxAssignment_1_8_1_1() { return cRangeMaxAssignment_1_8_1_1; }
		
		//Number
		public RuleCall getRangeMaxNumberParserRuleCall_1_8_1_1_0() { return cRangeMaxNumberParserRuleCall_1_8_1_1_0; }
		
		//'range' rangeMin=Number 'to' rangeMax=Number
		public Group getGroup_1_8_2() { return cGroup_1_8_2; }
		
		//'range'
		public Keyword getRangeKeyword_1_8_2_0() { return cRangeKeyword_1_8_2_0; }
		
		//rangeMin=Number
		public Assignment getRangeMinAssignment_1_8_2_1() { return cRangeMinAssignment_1_8_2_1; }
		
		//Number
		public RuleCall getRangeMinNumberParserRuleCall_1_8_2_1_0() { return cRangeMinNumberParserRuleCall_1_8_2_1_0; }
		
		//'to'
		public Keyword getToKeyword_1_8_2_2() { return cToKeyword_1_8_2_2; }
		
		//rangeMax=Number
		public Assignment getRangeMaxAssignment_1_8_2_3() { return cRangeMaxAssignment_1_8_2_3; }
		
		//Number
		public RuleCall getRangeMaxNumberParserRuleCall_1_8_2_3_0() { return cRangeMaxNumberParserRuleCall_1_8_2_3_0; }
	}
	public class DataflowBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.DataflowBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDataflowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataflowsActorDefinitionParserRuleCall_1_0 = (RuleCall)cDataflowsAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cGeometryKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cGeometryAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cGeometryGeometryParserRuleCall_2_0_1_0 = (RuleCall)cGeometryAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cUnitsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cUnitsUnitParserRuleCall_2_1_1_0 = (RuleCall)cUnitsAssignment_2_1_1.eContents().get(0);
		private final Assignment cComputationsAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cComputationsComputationParserRuleCall_2_2_0 = (RuleCall)cComputationsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Group cGroup_2_3_0 = (Group)cGroup_2_3.eContents().get(0);
		private final Keyword cMetadataKeyword_2_3_0_0 = (Keyword)cGroup_2_3_0.eContents().get(0);
		private final Assignment cMetadataAssignment_2_3_0_1 = (Assignment)cGroup_2_3_0.eContents().get(1);
		private final RuleCall cMetadataMetadataParserRuleCall_2_3_0_1_0 = (RuleCall)cMetadataAssignment_2_3_0_1.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cClassKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cJavaClassAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cJavaClassJavaClassParserRuleCall_2_3_1_1_0 = (RuleCall)cJavaClassAssignment_2_3_1_1.eContents().get(0);
		
		//DataflowBody:
		//	{DataflowBody} dataflows+=ActorDefinition* (('geometry' geometry=Geometry)? & ('units' units=Unit)? &
		//	computations=Computation? & ('metadata' metadata=Metadata)? ('class' javaClass=JavaClass)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{DataflowBody} dataflows+=ActorDefinition* (('geometry' geometry=Geometry)? & ('units' units=Unit)? &
		//computations=Computation? & ('metadata' metadata=Metadata)? ('class' javaClass=JavaClass)?)
		public Group getGroup() { return cGroup; }
		
		//{DataflowBody}
		public Action getDataflowBodyAction_0() { return cDataflowBodyAction_0; }
		
		//dataflows+=ActorDefinition*
		public Assignment getDataflowsAssignment_1() { return cDataflowsAssignment_1; }
		
		//ActorDefinition
		public RuleCall getDataflowsActorDefinitionParserRuleCall_1_0() { return cDataflowsActorDefinitionParserRuleCall_1_0; }
		
		//('geometry' geometry=Geometry)? & ('units' units=Unit)? & computations=Computation? & ('metadata' metadata=Metadata)?
		//('class' javaClass=JavaClass)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('geometry' geometry=Geometry)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'geometry'
		public Keyword getGeometryKeyword_2_0_0() { return cGeometryKeyword_2_0_0; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_2_0_1() { return cGeometryAssignment_2_0_1; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_2_0_1_0() { return cGeometryGeometryParserRuleCall_2_0_1_0; }
		
		//('units' units=Unit)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'units'
		public Keyword getUnitsKeyword_2_1_0() { return cUnitsKeyword_2_1_0; }
		
		//units=Unit
		public Assignment getUnitsAssignment_2_1_1() { return cUnitsAssignment_2_1_1; }
		
		//Unit
		public RuleCall getUnitsUnitParserRuleCall_2_1_1_0() { return cUnitsUnitParserRuleCall_2_1_1_0; }
		
		//computations=Computation?
		public Assignment getComputationsAssignment_2_2() { return cComputationsAssignment_2_2; }
		
		//Computation
		public RuleCall getComputationsComputationParserRuleCall_2_2_0() { return cComputationsComputationParserRuleCall_2_2_0; }
		
		//('metadata' metadata=Metadata)? ('class' javaClass=JavaClass)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//('metadata' metadata=Metadata)?
		public Group getGroup_2_3_0() { return cGroup_2_3_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_2_3_0_0() { return cMetadataKeyword_2_3_0_0; }
		
		//metadata=Metadata
		public Assignment getMetadataAssignment_2_3_0_1() { return cMetadataAssignment_2_3_0_1; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_2_3_0_1_0() { return cMetadataMetadataParserRuleCall_2_3_0_1_0; }
		
		//('class' javaClass=JavaClass)?
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }
		
		//'class'
		public Keyword getClassKeyword_2_3_1_0() { return cClassKeyword_2_3_1_0; }
		
		//javaClass=JavaClass
		public Assignment getJavaClassAssignment_2_3_1_1() { return cJavaClassAssignment_2_3_1_1; }
		
		//JavaClass
		public RuleCall getJavaClassJavaClassParserRuleCall_2_3_1_1_0() { return cJavaClassJavaClassParserRuleCall_2_3_1_1_0; }
	}
	public class ComputationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Computation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFunctionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_1_0 = (RuleCall)cFunctionsAssignment_2_1.eContents().get(0);
		
		//Computation:
		//	'compute' functions+=Function (',' functions+=Function)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'compute' functions+=Function (',' functions+=Function)*
		public Group getGroup() { return cGroup; }
		
		//'compute'
		public Keyword getComputeKeyword_0() { return cComputeKeyword_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_0() { return cFunctionsFunctionParserRuleCall_1_0; }
		
		//(',' functions+=Function)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_2_1() { return cFunctionsAssignment_2_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_1_0() { return cFunctionsFunctionParserRuleCall_2_1_0; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Geometry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSHAPETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cSHAPETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Geometry:
		//	'*' | SHAPE (',' SHAPE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | SHAPE (',' SHAPE)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//SHAPE (',' SHAPE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SHAPE
		public RuleCall getSHAPETerminalRuleCall_1_0() { return cSHAPETerminalRuleCall_1_0; }
		
		//(',' SHAPE)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//SHAPE
		public RuleCall getSHAPETerminalRuleCall_1_1_1() { return cSHAPETerminalRuleCall_1_1_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cDocstringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_2_0 = (RuleCall)cDocstringAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=LOWERCASE_ID value=Value docstring=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=LOWERCASE_ID value=Value docstring=STRING?
		public Group getGroup() { return cGroup; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
		
		//docstring=STRING?
		public Assignment getDocstringAssignment_2() { return cDocstringAssignment_2; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_2_0() { return cDocstringSTRINGTerminalRuleCall_2_0; }
	}
	public class ACTORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.ACTOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNumberKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cConceptKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBooleanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTextKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExtentKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSpatialextentKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cTemporalextentKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAnnotationKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cVoidKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPartitionKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//ACTOR: // countable, so always a dataflow for direct object instantiation
		//	'object' | // non-countable, so one object only
		//	'process' | // any acceptable quality type, for declarations only
		//	'value' | // all the next are in quality scope; number type is handled internally
		//	'number' | 'concept' | 'boolean' | 'text' | // specialized functions that produce extents
		//	'extent' | 'spatialextent' | 'temporalextent' | // only contracts for annotations
		//	'annotation' | // only for command prototypes
		//	'void' | // partial contextualizers for their parents
		//	'partition';
		@Override public ParserRule getRule() { return rule; }
		
		//// countable, so always a dataflow for direct object instantiation
		//'object' | // non-countable, so one object only
		//'process' | // any acceptable quality type, for declarations only
		//'value' | // all the next are in quality scope; number type is handled internally
		//'number' | 'concept' | 'boolean' | 'text' | // specialized functions that produce extents
		//'extent' | 'spatialextent' | 'temporalextent' | // only contracts for annotations
		//'annotation' | // only for command prototypes
		//'void' | // partial contextualizers for their parents
		//'partition'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// countable, so always a dataflow for direct object instantiation
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//// non-countable, so one object only
		//'process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//// any acceptable quality type, for declarations only
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//// all the next are in quality scope; number type is handled internally
		//'number'
		public Keyword getNumberKeyword_3() { return cNumberKeyword_3; }
		
		//'concept'
		public Keyword getConceptKeyword_4() { return cConceptKeyword_4; }
		
		//'boolean'
		public Keyword getBooleanKeyword_5() { return cBooleanKeyword_5; }
		
		//'text'
		public Keyword getTextKeyword_6() { return cTextKeyword_6; }
		
		//// specialized functions that produce extents
		//'extent'
		public Keyword getExtentKeyword_7() { return cExtentKeyword_7; }
		
		//'spatialextent'
		public Keyword getSpatialextentKeyword_8() { return cSpatialextentKeyword_8; }
		
		//'temporalextent'
		public Keyword getTemporalextentKeyword_9() { return cTemporalextentKeyword_9; }
		
		//// only contracts for annotations
		//'annotation'
		public Keyword getAnnotationKeyword_10() { return cAnnotationKeyword_10; }
		
		//// only for command prototypes
		//'void'
		public Keyword getVoidKeyword_11() { return cVoidKeyword_11; }
		
		//// partial contextualizers for their parents
		//'partition'
		public Keyword getPartitionKeyword_12() { return cPartitionKeyword_12; }
	}
	public class TARGETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.TARGET");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cModelsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cConceptsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cObserversKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDefinitionsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//TARGET:
		//	'models' | 'concepts' | 'observers' | 'definitions';
		@Override public ParserRule getRule() { return rule; }
		
		//'models' | 'concepts' | 'observers' | 'definitions'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'models'
		public Keyword getModelsKeyword_0() { return cModelsKeyword_0; }
		
		//'concepts'
		public Keyword getConceptsKeyword_1() { return cConceptsKeyword_1; }
		
		//'observers'
		public Keyword getObserversKeyword_2() { return cObserversKeyword_2; }
		
		//'definitions'
		public Keyword getDefinitionsKeyword_3() { return cDefinitionsKeyword_3; }
	}
	public class ClassifierRHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.ClassifierRHS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cMapAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMapMapParserRuleCall_5_0 = (RuleCall)cMapAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cToResolveAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cToResolveSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cToResolveAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cToResolveAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cToResolveSTRINGTerminalRuleCall_6_2_1_0 = (RuleCall)cToResolveAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_7_0_0 = (RuleCall)cOpAssignment_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cNodataAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNodataUnknownKeyword_8_0 = (Keyword)cNodataAssignment_8.eContents().get(0);
		private final Assignment cStarAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cStarAsteriskKeyword_9_0 = (Keyword)cStarAssignment_9.eContents().get(0);
		
		//ClassifierRHS:
		//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//	(rightLimit='inclusive' | 'exclusive')? | num=Number |
		//	'in' set=List | string=STRING | map=Map |
		//	'(' toResolve+=STRING (=> ',' toResolve+=STRING)* ')' | op=REL_OPERATOR expression=Number | nodata='unknown' |
		//	star?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | map=Map | '(' toResolve+=STRING
		//(=> ',' toResolve+=STRING)* ')' | op=REL_OPERATOR expression=Number | nodata='unknown' | star?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//map=Map
		public Assignment getMapAssignment_5() { return cMapAssignment_5; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_5_0() { return cMapMapParserRuleCall_5_0; }
		
		//'(' toResolve+=STRING (=> ',' toResolve+=STRING)* ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//toResolve+=STRING
		public Assignment getToResolveAssignment_6_1() { return cToResolveAssignment_6_1; }
		
		//STRING
		public RuleCall getToResolveSTRINGTerminalRuleCall_6_1_0() { return cToResolveSTRINGTerminalRuleCall_6_1_0; }
		
		//(=> ',' toResolve+=STRING)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//=> ','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//toResolve+=STRING
		public Assignment getToResolveAssignment_6_2_1() { return cToResolveAssignment_6_2_1; }
		
		//STRING
		public RuleCall getToResolveSTRINGTerminalRuleCall_6_2_1_0() { return cToResolveSTRINGTerminalRuleCall_6_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_7() { return cGroup_7; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_7_0_0() { return cOpREL_OPERATORParserRuleCall_7_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_7_1_0() { return cExpressionNumberParserRuleCall_7_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_8() { return cNodataAssignment_8; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_8_0() { return cNodataUnknownKeyword_8_0; }
		
		//star?='*'
		public Assignment getStarAssignment_9() { return cStarAssignment_9; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_9_0() { return cStarAsteriskKeyword_9_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsValueParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//	{List} '(' contents+=Value* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{List} '(' contents+=Value* ')'
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contents+=Value*
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }
		
		//Value
		public RuleCall getContentsValueParserRuleCall_2_0() { return cContentsValueParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFromAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_1_0_0 = (RuleCall)cFromAssignment_1_0.eContents().get(0);
		private final Keyword cToKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cToAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_1_2_0 = (RuleCall)cToAssignment_1_2.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBooleanAlternatives_3_0 = (Alternatives)cBooleanAssignment_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_3_0_0 = (Keyword)cBooleanAlternatives_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_3_0_1 = (Keyword)cBooleanAlternatives_3_0.eContents().get(1);
		
		//Literal:
		//	number=Number | from=Number 'to' to=Number | string=STRING | boolean=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | from=Number 'to' to=Number | string=STRING | boolean=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//from=Number 'to' to=Number
		public Group getGroup_1() { return cGroup_1; }
		
		//from=Number
		public Assignment getFromAssignment_1_0() { return cFromAssignment_1_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_1_0_0() { return cFromNumberParserRuleCall_1_0_0; }
		
		//'to'
		public Keyword getToKeyword_1_1() { return cToKeyword_1_1; }
		
		//to=Number
		public Assignment getToAssignment_1_2() { return cToAssignment_1_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_1_2_0() { return cToNumberParserRuleCall_1_2_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_3_0() { return cBooleanAlternatives_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_3_0_0() { return cBooleanTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_3_0_1() { return cBooleanFalseKeyword_3_0_1; }
	}
	public class LiteralOrIdOrCommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.LiteralOrIdOrComma");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cToAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_0_2_0 = (RuleCall)cToAssignment_0_2.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBooleanAlternatives_3_0 = (Alternatives)cBooleanAssignment_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_3_0_0 = (Keyword)cBooleanAlternatives_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_3_0_1 = (Keyword)cBooleanAlternatives_3_0.eContents().get(1);
		private final Assignment cIdAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cCommaAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cCommaCommaKeyword_5_0 = (Keyword)cCommaAssignment_5.eContents().get(0);
		
		//LiteralOrIdOrComma Literal:
		//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';
		@Override public ParserRule getRule() { return rule; }
		
		//from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=','
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//from=Number => 'to' => to=Number
		public Group getGroup_0() { return cGroup_0; }
		
		//from=Number
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_0_0_0() { return cFromNumberParserRuleCall_0_0_0; }
		
		//=> 'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//=> to=Number
		public Assignment getToAssignment_0_2() { return cToAssignment_0_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_0_2_0() { return cToNumberParserRuleCall_0_2_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_3_0() { return cBooleanAlternatives_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_3_0_0() { return cBooleanTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_3_0_1() { return cBooleanFalseKeyword_3_0_1; }
		
		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }
		
		//comma?=','
		public Assignment getCommaAssignment_5() { return cCommaAssignment_5; }
		
		//','
		public Keyword getCommaCommaKeyword_5_0() { return cCommaCommaKeyword_5_0; }
	}
	public class LiteralOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.LiteralOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cBooleanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cBooleanAlternatives_2_0 = (Alternatives)cBooleanAssignment_2.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_2_0_0 = (Keyword)cBooleanAlternatives_2_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_2_0_1 = (Keyword)cBooleanAlternatives_2_0.eContents().get(1);
		private final Assignment cIdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		
		//LiteralOrID Literal:
		//	number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | string=STRING | boolean=('true' | 'false') | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_2() { return cBooleanAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_2_0() { return cBooleanAlternatives_2_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_2_0_0() { return cBooleanTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_2_0_1() { return cBooleanFalseKeyword_2_0_1; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetadataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cIdsAlternatives_2_0_0 = (Alternatives)cIdsAssignment_2_0.eContents().get(0);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_0_0_0 = (RuleCall)cIdsAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cIdsPropertyIdParserRuleCall_2_0_0_1 = (RuleCall)cIdsAlternatives_2_0_0.eContents().get(1);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValuesAlternatives_2_1_0 = (Alternatives)cValuesAssignment_2_1.eContents().get(0);
		private final RuleCall cValuesLiteralOrIDParserRuleCall_2_1_0_0 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cValuesMetadataParserRuleCall_2_1_0_1 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cValuesListParserRuleCall_2_1_0_2 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Metadata:
		//	{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}'
		public Group getGroup() { return cGroup; }
		
		//{Metadata}
		public Action getMetadataAction_0() { return cMetadataAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))*
		public Group getGroup_2() { return cGroup_2; }
		
		//ids+=(LOWERCASE_ID | PropertyId)
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }
		
		//(LOWERCASE_ID | PropertyId)
		public Alternatives getIdsAlternatives_2_0_0() { return cIdsAlternatives_2_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_0_0_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_0_0_0; }
		
		//PropertyId
		public RuleCall getIdsPropertyIdParserRuleCall_2_0_0_1() { return cIdsPropertyIdParserRuleCall_2_0_0_1; }
		
		//values+=(LiteralOrID | Metadata | List)
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//(LiteralOrID | Metadata | List)
		public Alternatives getValuesAlternatives_2_1_0() { return cValuesAlternatives_2_1_0; }
		
		//LiteralOrID
		public RuleCall getValuesLiteralOrIDParserRuleCall_2_1_0_0() { return cValuesLiteralOrIDParserRuleCall_2_1_0_0; }
		
		//Metadata
		public RuleCall getValuesMetadataParserRuleCall_2_1_0_1() { return cValuesMetadataParserRuleCall_2_1_0_1; }
		
		//List
		public RuleCall getValuesListParserRuleCall_2_1_0_2() { return cValuesListParserRuleCall_2_1_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.ParameterList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cValuesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_0_0_0 = (RuleCall)cValuesAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cValuesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_0_1_1_0 = (RuleCall)cValuesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPairsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_0_0 = (RuleCall)cPairsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPairsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_1_1_0 = (RuleCall)cPairsAssignment_1_1_1.eContents().get(0);
		
		//ParameterList:
		//	values+=Value (',' values+=Value)* | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
		@Override public ParserRule getRule() { return rule; }
		
		//values+=Value (',' values+=Value)* | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//values+=Value (',' values+=Value)*
		public Group getGroup_0() { return cGroup_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_0_0() { return cValuesAssignment_0_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_0_0_0() { return cValuesValueParserRuleCall_0_0_0; }
		
		//(',' values+=Value)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//values+=Value
		public Assignment getValuesAssignment_0_1_1() { return cValuesAssignment_0_1_1; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_0_1_1_0() { return cValuesValueParserRuleCall_0_1_1_0; }
		
		//pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*
		public Group getGroup_1() { return cGroup_1; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_0() { return cPairsAssignment_1_0; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_0_0() { return cPairsKeyValuePairParserRuleCall_1_0_0; }
		
		//(=> ',' pairs+=KeyValuePair)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_1_1() { return cPairsAssignment_1_1_1; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_1_1_0() { return cPairsKeyValuePairParserRuleCall_1_1_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralOrIdOrCommaParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cUrnAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cUrnUrnParserRuleCall_2_0 = (RuleCall)cUrnAssignment_2.eContents().get(0);
		private final Assignment cListAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cListListParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		private final Assignment cMapAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMapMapParserRuleCall_4_0 = (RuleCall)cMapAssignment_4.eContents().get(0);
		private final Assignment cExpressionAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cExpressionEXPRTerminalRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Assignment cTableAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cTableLookupTableParserRuleCall_6_0 = (RuleCall)cTableAssignment_6.eContents().get(0);
		private final Assignment cEnumIdAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cEnumIdUPPERCASE_IDTerminalRuleCall_7_0 = (RuleCall)cEnumIdAssignment_7.eContents().get(0);
		
		//Value:
		//	literal=LiteralOrIdOrComma | function=Function | urn=Urn | list=List | map=Map | expression=EXPR | table=LookupTable
		//	| enumId=UPPERCASE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//literal=LiteralOrIdOrComma | function=Function | urn=Urn | list=List | map=Map | expression=EXPR | table=LookupTable |
		//enumId=UPPERCASE_ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=LiteralOrIdOrComma
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//LiteralOrIdOrComma
		public RuleCall getLiteralLiteralOrIdOrCommaParserRuleCall_0_0() { return cLiteralLiteralOrIdOrCommaParserRuleCall_0_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//urn=Urn
		public Assignment getUrnAssignment_2() { return cUrnAssignment_2; }
		
		//Urn
		public RuleCall getUrnUrnParserRuleCall_2_0() { return cUrnUrnParserRuleCall_2_0; }
		
		//list=List
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//List
		public RuleCall getListListParserRuleCall_3_0() { return cListListParserRuleCall_3_0; }
		
		//map=Map
		public Assignment getMapAssignment_4() { return cMapAssignment_4; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_4_0() { return cMapMapParserRuleCall_4_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_5_0() { return cExpressionEXPRTerminalRuleCall_5_0; }
		
		//table=LookupTable
		public Assignment getTableAssignment_6() { return cTableAssignment_6; }
		
		//LookupTable
		public RuleCall getTableLookupTableParserRuleCall_6_0() { return cTableLookupTableParserRuleCall_6_0; }
		
		//enumId=UPPERCASE_ID
		public Assignment getEnumIdAssignment_7() { return cEnumIdAssignment_7; }
		
		//UPPERCASE_ID
		public RuleCall getEnumIdUPPERCASE_IDTerminalRuleCall_7_0() { return cEnumIdUPPERCASE_IDTerminalRuleCall_7_0; }
	}
	public class UrnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Urn");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameUrnIdParserRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		private final RuleCall cNameLocalFilePathParserRuleCall_0_2 = (RuleCall)cNameAlternatives_0.eContents().get(2);
		
		//Urn:
		//	name=(UrnId | STRING | LocalFilePath);
		@Override public ParserRule getRule() { return rule; }
		
		//// String used when there are strange chars or keywords in the URN.
		//name=(UrnId | STRING | LocalFilePath)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(UrnId | STRING | LocalFilePath)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//UrnId
		public RuleCall getNameUrnIdParserRuleCall_0_0() { return cNameUrnIdParserRuleCall_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1() { return cNameSTRINGTerminalRuleCall_0_1; }
		
		//LocalFilePath
		public RuleCall getNameLocalFilePathParserRuleCall_0_2() { return cNameLocalFilePathParserRuleCall_0_2; }
	}
	public class UrnIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.UrnId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrnKlabKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPathNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPathNameParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPathParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cVersionNumberParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cNumberSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		
		///**
		// * URN is 4 sections and admits a version number and a fragment (with only lowercase_id chars in it). It is
		// * legal, but not required, to start with the default prefix urn:klab:
		// */ UrnId:
		//	'urn:klab:'? PathName ':' PathName ':' PathName ':' Path (':' VersionNumber)? ('#' LOWERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'urn:klab:'? PathName ':' PathName ':' PathName ':' Path (':' VersionNumber)? ('#' LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//'urn:klab:'?
		public Keyword getUrnKlabKeyword_0() { return cUrnKlabKeyword_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_1() { return cPathNameParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_3() { return cPathNameParserRuleCall_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_5() { return cPathNameParserRuleCall_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//Path
		public RuleCall getPathParserRuleCall_7() { return cPathParserRuleCall_7; }
		
		//(':' VersionNumber)?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//VersionNumber
		public RuleCall getVersionNumberParserRuleCall_8_1() { return cVersionNumberParserRuleCall_8_1; }
		
		//('#' LOWERCASE_ID)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'#'
		public Keyword getNumberSignKeyword_9_0() { return cNumberSignKeyword_9_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_9_1() { return cLOWERCASE_IDTerminalRuleCall_9_1; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesMapEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Map:
		//	{Map} '{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Map} '{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Map}
		public Action getMapAction_0() { return cMapAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(entries+=MapEntry (=> (',') entries+=MapEntry)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_0_0() { return cEntriesMapEntryParserRuleCall_2_0_0; }
		
		//(=> (',') entries+=MapEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//=> (',')
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_0_0() { return cCommaKeyword_2_1_0_0; }
		
		//entries+=MapEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//MapEntry
		public RuleCall getEntriesMapEntryParserRuleCall_2_1_1_0() { return cEntriesMapEntryParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.MapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifierClassifierRHSParserRuleCall_0_0 = (RuleCall)cClassifierAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MapEntry:
		//	classifier=ClassifierRHS ':' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//classifier=ClassifierRHS ':' value=Value
		public Group getGroup() { return cGroup; }
		
		//classifier=ClassifierRHS
		public Assignment getClassifierAssignment_0() { return cClassifierAssignment_0; }
		
		//ClassifierRHS
		public RuleCall getClassifierClassifierRHSParserRuleCall_0_0() { return cClassifierClassifierRHSParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class LookupTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.LookupTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLookupTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableTableParserRuleCall_2_0 = (RuleCall)cTableAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Lookup table literal
		//LookupTable:
		//	{LookupTable}
		//	'{{' table=Table? '}}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LookupTable} '{{' table=Table? '}}'
		public Group getGroup() { return cGroup; }
		
		//{LookupTable}
		public Action getLookupTableAction_0() { return cLookupTableAction_0; }
		
		//'{{'
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }
		
		//table=Table?
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_2_0() { return cTableTableParserRuleCall_2_0; }
		
		//'}}'
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRowsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRowsTableRowParserRuleCall_0_0 = (RuleCall)cRowsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRowsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_1_1_0 = (RuleCall)cRowsAssignment_1_1.eContents().get(0);
		
		//Table:
		//	rows+=TableRow (',' rows+=TableRow)*;
		@Override public ParserRule getRule() { return rule; }
		
		//rows+=TableRow (',' rows+=TableRow)*
		public Group getGroup() { return cGroup; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_0() { return cRowsAssignment_0; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_0_0() { return cRowsTableRowParserRuleCall_0_0; }
		
		//(',' rows+=TableRow)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//rows+=TableRow
		public Assignment getRowsAssignment_1_1() { return cRowsAssignment_1_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_1_1_0() { return cRowsTableRowParserRuleCall_1_1_0; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsTableClassifierParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsTableClassifierParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//TableRow:
		//	elements+=TableClassifier ('|' elements+=TableClassifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=TableClassifier ('|' elements+=TableClassifier)*
		public Group getGroup() { return cGroup; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_0_0() { return cElementsTableClassifierParserRuleCall_0_0; }
		
		//('|' elements+=TableClassifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_1_1_0() { return cElementsTableClassifierParserRuleCall_1_1_0; }
	}
	public class TableClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.TableClassifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOpAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_5_0_0 = (RuleCall)cOpAssignment_5_0.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Assignment cExprAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cExprEXPRTerminalRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Assignment cNodataAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cNodataUnknownKeyword_7_0 = (Keyword)cNodataAssignment_7.eContents().get(0);
		private final Assignment cStarAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cStarAsteriskKeyword_8_0 = (Keyword)cStarAssignment_8.eContents().get(0);
		private final Assignment cAnythingAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cAnythingNumberSignKeyword_9_0 = (Keyword)cAnythingAssignment_9.eContents().get(0);
		
		//TableClassifier ClassifierRHS:
		//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//	(rightLimit='inclusive' | 'exclusive')? | num=Number |
		//	'in' set=List | string=STRING | op=REL_OPERATOR expression=Number | expr=EXPR | nodata='unknown' | star?='*' |
		//	anything?='#';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | op=REL_OPERATOR
		//expression=Number | expr=EXPR | nodata='unknown' | star?='*' | anything?='#'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_5() { return cGroup_5; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_5_0() { return cOpAssignment_5_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_5_0_0() { return cOpREL_OPERATORParserRuleCall_5_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_5_1_0() { return cExpressionNumberParserRuleCall_5_1_0; }
		
		//expr=EXPR
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_6_0() { return cExprEXPRTerminalRuleCall_6_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_7() { return cNodataAssignment_7; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_7_0() { return cNodataUnknownKeyword_7_0; }
		
		//star?='*'
		public Assignment getStarAssignment_8() { return cStarAssignment_8; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_8_0() { return cStarAsteriskKeyword_8_0; }
		
		//anything?='#'
		public Assignment getAnythingAssignment_9() { return cAnythingAssignment_9; }
		
		//'#'
		public Keyword getAnythingNumberSignKeyword_9_0() { return cAnythingNumberSignKeyword_9_0; }
	}
	public class LocalFilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.LocalFilePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		///**
		// * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
		// * on whether there is an encoder for their file extension.
		// */ LocalFilePath:
		//	(CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID) ('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))* ('.'
		//	LOWERCASE_ID)? ('#' LOWERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID) ('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))* ('.'
		//LOWERCASE_ID)? ('#' LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_0_0() { return cCAMELCASE_IDTerminalRuleCall_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_1() { return cLOWERCASE_IDTerminalRuleCall_0_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_0_2() { return cLOWERCASE_DASHIDTerminalRuleCall_0_2; }
		
		//('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_1_1_0() { return cCAMELCASE_IDTerminalRuleCall_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_1_1_2() { return cLOWERCASE_DASHIDTerminalRuleCall_1_1_2; }
		
		//('.' LOWERCASE_ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_2_1() { return cLOWERCASE_IDTerminalRuleCall_2_1; }
		
		//('#' LOWERCASE_ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_1() { return cLOWERCASE_IDTerminalRuleCall_3_1; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_DASHIDTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInteractiveAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cInteractiveEqualsSignQuestionMarkKeyword_1_0_0 = (Keyword)cInteractiveAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//KeyValuePair:
		//	name=(LOWERCASE_ID | LOWERCASE_DASHID) (interactive?='=?' | '=') value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(LOWERCASE_ID | LOWERCASE_DASHID) (interactive?='=?' | '=') value=Value
		public Group getGroup() { return cGroup; }
		
		//name=(LOWERCASE_ID | LOWERCASE_DASHID)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(LOWERCASE_ID | LOWERCASE_DASHID)
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//LOWERCASE_DASHID
		public RuleCall getNameLOWERCASE_DASHIDTerminalRuleCall_0_0_1() { return cNameLOWERCASE_DASHIDTerminalRuleCall_0_0_1; }
		
		//interactive?='=?' | '='
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//interactive?='=?'
		public Assignment getInteractiveAssignment_1_0() { return cInteractiveAssignment_1_0; }
		
		//'=?'
		public Keyword getInteractiveEqualsSignQuestionMarkKeyword_1_0_0() { return cInteractiveEqualsSignQuestionMarkKeyword_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Function");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cMediatedAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cMediatedLOWERCASE_IDTerminalRuleCall_0_0_0_0 = (RuleCall)cMediatedAssignment_0_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cNamePathNameParserRuleCall_0_1_0_0_0 = (RuleCall)cNameAssignment_0_1_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_0_1_0_2_0 = (RuleCall)cParametersAssignment_0_1_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_0_3 = (Keyword)cGroup_0_1_0.eContents().get(3);
		private final Assignment cUrnAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cUrnUrnParserRuleCall_0_1_1_0 = (RuleCall)cUrnAssignment_0_1_1.eContents().get(0);
		private final Assignment cValueAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cValueLiteralParserRuleCall_0_1_2_0 = (RuleCall)cValueAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cVariableAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cVariableLOWERCASE_IDTerminalRuleCall_0_2_1_0 = (RuleCall)cVariableAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cChainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChainFunctionParserRuleCall_1_1_0 = (RuleCall)cChainAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cChainAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cChainFunctionParserRuleCall_1_2_1_0 = (RuleCall)cChainAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cAsKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cVariableAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cVariableLOWERCASE_IDTerminalRuleCall_1_4_1_0 = (RuleCall)cVariableAssignment_1_4_1.eContents().get(0);
		
		//Function:
		//	(mediated=LOWERCASE_ID '>>')? (name=PathName '(' parameters=ParameterList? ')' | urn=Urn | value=Literal) ('as'
		//	variable=LOWERCASE_ID)? |
		//	'(' chain+=Function (',' chain+=Function)* ')' ('as' variable=LOWERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(mediated=LOWERCASE_ID '>>')? (name=PathName '(' parameters=ParameterList? ')' | urn=Urn | value=Literal) ('as'
		//variable=LOWERCASE_ID)? | '(' chain+=Function (',' chain+=Function)* ')' ('as' variable=LOWERCASE_ID)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(mediated=LOWERCASE_ID '>>')? (name=PathName '(' parameters=ParameterList? ')' | urn=Urn | value=Literal) ('as'
		//variable=LOWERCASE_ID)?
		public Group getGroup_0() { return cGroup_0; }
		
		//(mediated=LOWERCASE_ID '>>')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//mediated=LOWERCASE_ID
		public Assignment getMediatedAssignment_0_0_0() { return cMediatedAssignment_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getMediatedLOWERCASE_IDTerminalRuleCall_0_0_0_0() { return cMediatedLOWERCASE_IDTerminalRuleCall_0_0_0_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_0_0_1() { return cGreaterThanSignGreaterThanSignKeyword_0_0_1; }
		
		//name=PathName '(' parameters=ParameterList? ')' | urn=Urn | value=Literal
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//name=PathName '(' parameters=ParameterList? ')'
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//name=PathName
		public Assignment getNameAssignment_0_1_0_0() { return cNameAssignment_0_1_0_0; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_0_1_0_0_0() { return cNamePathNameParserRuleCall_0_1_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0_1() { return cLeftParenthesisKeyword_0_1_0_1; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_0_1_0_2() { return cParametersAssignment_0_1_0_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_0_1_0_2_0() { return cParametersParameterListParserRuleCall_0_1_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_0_3() { return cRightParenthesisKeyword_0_1_0_3; }
		
		//urn=Urn
		public Assignment getUrnAssignment_0_1_1() { return cUrnAssignment_0_1_1; }
		
		//Urn
		public RuleCall getUrnUrnParserRuleCall_0_1_1_0() { return cUrnUrnParserRuleCall_0_1_1_0; }
		
		//value=Literal
		public Assignment getValueAssignment_0_1_2() { return cValueAssignment_0_1_2; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_0_1_2_0() { return cValueLiteralParserRuleCall_0_1_2_0; }
		
		//('as' variable=LOWERCASE_ID)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'as'
		public Keyword getAsKeyword_0_2_0() { return cAsKeyword_0_2_0; }
		
		//variable=LOWERCASE_ID
		public Assignment getVariableAssignment_0_2_1() { return cVariableAssignment_0_2_1; }
		
		//LOWERCASE_ID
		public RuleCall getVariableLOWERCASE_IDTerminalRuleCall_0_2_1_0() { return cVariableLOWERCASE_IDTerminalRuleCall_0_2_1_0; }
		
		//'(' chain+=Function (',' chain+=Function)* ')' ('as' variable=LOWERCASE_ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//chain+=Function
		public Assignment getChainAssignment_1_1() { return cChainAssignment_1_1; }
		
		//Function
		public RuleCall getChainFunctionParserRuleCall_1_1_0() { return cChainFunctionParserRuleCall_1_1_0; }
		
		//(',' chain+=Function)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//chain+=Function
		public Assignment getChainAssignment_1_2_1() { return cChainAssignment_1_2_1; }
		
		//Function
		public RuleCall getChainFunctionParserRuleCall_1_2_1_0() { return cChainFunctionParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//('as' variable=LOWERCASE_ID)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'as'
		public Keyword getAsKeyword_1_4_0() { return cAsKeyword_1_4_0; }
		
		//variable=LOWERCASE_ID
		public Assignment getVariableAssignment_1_4_1() { return cVariableAssignment_1_4_1; }
		
		//LOWERCASE_ID
		public RuleCall getVariableLOWERCASE_IDTerminalRuleCall_1_4_1_0() { return cVariableLOWERCASE_IDTerminalRuleCall_1_4_1_0; }
	}
	public class UnitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.UnitElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cIdAlternatives_0_0.eContents().get(1);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumNumberParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		///**
		// * ---------------------------------------
		// * Unit of measurement re: jsr-108, parseable by Java
		// * TODO implement expression syntax and provide validator
		// * ---------------------------------------
		// */ UnitElement:
		//	id=(CAMELCASE_ID | LOWERCASE_ID) | num=Number |
		//	'(' unit=Unit ')';
		@Override public ParserRule getRule() { return rule; }
		
		//id=(CAMELCASE_ID | LOWERCASE_ID) | num=Number | '(' unit=Unit ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=(CAMELCASE_ID | LOWERCASE_ID)
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//(CAMELCASE_ID | LOWERCASE_ID)
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_0_0_0() { return cIdCAMELCASE_IDTerminalRuleCall_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_1() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_1; }
		
		//num=Number
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_1_0() { return cNumNumberParserRuleCall_1_0; }
		
		//'(' unit=Unit ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_1_0() { return cUnitUnitParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class REL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.REL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cGtGreaterThanSignKeyword_0_0 = (Keyword)cGtAssignment_0.eContents().get(0);
		private final Assignment cLtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLtLessThanSignKeyword_1_0 = (Keyword)cLtAssignment_1.eContents().get(0);
		private final Assignment cEqAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cEqEqualsSignKeyword_2_0 = (Keyword)cEqAssignment_2.eContents().get(0);
		private final Assignment cNeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNeExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNeAssignment_3.eContents().get(0);
		private final Assignment cLeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cLeLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLeAssignment_4.eContents().get(0);
		private final Assignment cGeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cGeGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeAssignment_5.eContents().get(0);
		
		//REL_OPERATOR:
		//	gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>=';
		@Override public ParserRule getRule() { return rule; }
		
		//gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gt?='>'
		public Assignment getGtAssignment_0() { return cGtAssignment_0; }
		
		//'>'
		public Keyword getGtGreaterThanSignKeyword_0_0() { return cGtGreaterThanSignKeyword_0_0; }
		
		//lt?='<'
		public Assignment getLtAssignment_1() { return cLtAssignment_1; }
		
		//'<'
		public Keyword getLtLessThanSignKeyword_1_0() { return cLtLessThanSignKeyword_1_0; }
		
		//eq?='='
		public Assignment getEqAssignment_2() { return cEqAssignment_2; }
		
		//'='
		public Keyword getEqEqualsSignKeyword_2_0() { return cEqEqualsSignKeyword_2_0; }
		
		//ne?='!='
		public Assignment getNeAssignment_3() { return cNeAssignment_3; }
		
		//'!='
		public Keyword getNeExclamationMarkEqualsSignKeyword_3_0() { return cNeExclamationMarkEqualsSignKeyword_3_0; }
		
		//le?='<='
		public Assignment getLeAssignment_4() { return cLeAssignment_4; }
		
		//'<='
		public Keyword getLeLessThanSignEqualsSignKeyword_4_0() { return cLeLessThanSignEqualsSignKeyword_4_0; }
		
		//ge?='>='
		public Assignment getGeAssignment_5() { return cGeAssignment_5; }
		
		//'>='
		public Keyword getGeGreaterThanSignEqualsSignKeyword_5_0() { return cGeGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootUnitElementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cConnectorsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cConnectorsUnitOpEnumRuleCall_2_0_0_0 = (RuleCall)cConnectorsAssignment_2_0_0.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Unit:
		//	{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//root=UnitElement?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//UnitElement
		public RuleCall getRootUnitElementParserRuleCall_1_0() { return cRootUnitElementParserRuleCall_1_0; }
		
		//(=> (connectors+=UnitOp) units+=UnitElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> (connectors+=UnitOp)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//connectors+=UnitOp
		public Assignment getConnectorsAssignment_2_0_0() { return cConnectorsAssignment_2_0_0; }
		
		//UnitOp
		public RuleCall getConnectorsUnitOpEnumRuleCall_2_0_0_0() { return cConnectorsUnitOpEnumRuleCall_2_0_0_0; }
		
		//units+=UnitElement
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0() { return cUnitsUnitElementParserRuleCall_2_1_0; }
	}
	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Currency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cYearAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cYearINTTerminalRuleCall_0_1_1_0 = (RuleCall)cYearAssignment_0_1_1.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cConceptAlternatives_1_0 = (Alternatives)cConceptAssignment_1.eContents().get(0);
		private final RuleCall cConceptCAMELCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cConceptAlternatives_1_0.eContents().get(0);
		private final RuleCall cConceptNamespaceIdParserRuleCall_1_0_1 = (RuleCall)cConceptAlternatives_1_0.eContents().get(1);
		
		//Currency:
		//	id=ID ('@' year=INT) | concept=(CAMELCASE_ID | NamespaceId);
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID ('@' year=INT) | concept=(CAMELCASE_ID | NamespaceId)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ID ('@' year=INT)
		public Group getGroup_0() { return cGroup_0; }
		
		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }
		
		//'@' year=INT
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0_1_0() { return cCommercialAtKeyword_0_1_0; }
		
		//year=INT
		public Assignment getYearAssignment_0_1_1() { return cYearAssignment_0_1_1; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_0_1_1_0() { return cYearINTTerminalRuleCall_0_1_1_0; }
		
		//concept=(CAMELCASE_ID | NamespaceId)
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//(CAMELCASE_ID | NamespaceId)
		public Alternatives getConceptAlternatives_1_0() { return cConceptAlternatives_1_0; }
		
		//CAMELCASE_ID
		public RuleCall getConceptCAMELCASE_IDTerminalRuleCall_1_0_0() { return cConceptCAMELCASE_IDTerminalRuleCall_1_0_0; }
		
		//NamespaceId
		public RuleCall getConceptNamespaceIdParserRuleCall_1_0_1() { return cConceptNamespaceIdParserRuleCall_1_0_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cNegativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_0_1_0 = (Keyword)cNegativeAssignment_0_1.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRealINTTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cDecimalAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cDecimalFullStopKeyword_2_0_0_0 = (Keyword)cDecimalAssignment_2_0_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_2_0_1_0 = (RuleCall)cDecimalPartAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cExponentialAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Alternatives cExponentialAlternatives_3_0_0_0 = (Alternatives)cExponentialAssignment_3_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_3_0_0_0_0 = (Keyword)cExponentialAlternatives_3_0_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_3_0_0_0_1 = (Keyword)cExponentialAlternatives_3_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_0_1_0 = (Keyword)cAlternatives_3_0_1.eContents().get(0);
		private final Assignment cExpNegativeAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final Keyword cExpNegativeHyphenMinusKeyword_3_0_1_1_0 = (Keyword)cExpNegativeAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cExpAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cExpINTTerminalRuleCall_3_0_2_0 = (RuleCall)cExpAssignment_3_0_2.eContents().get(0);
		
		//Number:
		//	('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
		//	expNegative?='-')? exp=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
		//expNegative?='-')? exp=INT)?
		public Group getGroup() { return cGroup; }
		
		//('+' | negative?='-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//negative?='-'
		public Assignment getNegativeAssignment_0_1() { return cNegativeAssignment_0_1; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_0_1_0() { return cNegativeHyphenMinusKeyword_0_1_0; }
		
		//=> real=INT
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//INT
		public RuleCall getRealINTTerminalRuleCall_1_0() { return cRealINTTerminalRuleCall_1_0; }
		
		//=> (decimal?='.' decimalPart=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//decimal?='.' decimalPart=INT
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//decimal?='.'
		public Assignment getDecimalAssignment_2_0_0() { return cDecimalAssignment_2_0_0; }
		
		//'.'
		public Keyword getDecimalFullStopKeyword_2_0_0_0() { return cDecimalFullStopKeyword_2_0_0_0; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_2_0_1() { return cDecimalPartAssignment_2_0_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_2_0_1_0() { return cDecimalPartINTTerminalRuleCall_2_0_1_0; }
		
		//=> (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//exponential?=('e' | 'E')
		public Assignment getExponentialAssignment_3_0_0() { return cExponentialAssignment_3_0_0; }
		
		//('e' | 'E')
		public Alternatives getExponentialAlternatives_3_0_0_0() { return cExponentialAlternatives_3_0_0_0; }
		
		//'e'
		public Keyword getExponentialEKeyword_3_0_0_0_0() { return cExponentialEKeyword_3_0_0_0_0; }
		
		//'E'
		public Keyword getExponentialEKeyword_3_0_0_0_1() { return cExponentialEKeyword_3_0_0_0_1; }
		
		//('+' | expNegative?='-')?
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_0_1_0() { return cPlusSignKeyword_3_0_1_0; }
		
		//expNegative?='-'
		public Assignment getExpNegativeAssignment_3_0_1_1() { return cExpNegativeAssignment_3_0_1_1; }
		
		//'-'
		public Keyword getExpNegativeHyphenMinusKeyword_3_0_1_1_0() { return cExpNegativeHyphenMinusKeyword_3_0_1_1_0; }
		
		//exp=INT
		public Assignment getExpAssignment_3_0_2() { return cExpAssignment_3_0_2; }
		
		//INT
		public RuleCall getExpINTTerminalRuleCall_3_0_2_0() { return cExpINTTerminalRuleCall_3_0_2_0; }
	}
	public class PathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.PathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PathName:
		//	LOWERCASE_ID ('.' LOWERCASE_ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWERCASE_ID ('.' LOWERCASE_ID)*
		public Group getGroup() { return cGroup; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0() { return cLOWERCASE_IDTerminalRuleCall_0; }
		
		//('.' LOWERCASE_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Path:
		//	LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*
		public Group getGroup() { return cGroup; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0() { return cLOWERCASE_IDTerminalRuleCall_0; }
		
		//(('.' | '/') LOWERCASE_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.' | '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class JavaClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.JavaClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//JavaClass:
		//	PathName '.' CAMELCASE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName '.' CAMELCASE_ID
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_2() { return cCAMELCASE_IDTerminalRuleCall_2; }
	}
	public class NamespaceIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.NamespaceId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NamespaceId:
		//	PathName ':' CAMELCASE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName ':' CAMELCASE_ID
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_2() { return cCAMELCASE_IDTerminalRuleCall_2; }
	}
	public class PropertyIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.PropertyId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//PropertyId:
		//	PathName ':' (LOWERCASE_ID | LOWERCASE_DASHID);
		@Override public ParserRule getRule() { return rule; }
		
		//PathName ':' (LOWERCASE_ID | LOWERCASE_DASHID)
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//LOWERCASE_ID | LOWERCASE_DASHID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_2_0() { return cLOWERCASE_IDTerminalRuleCall_2_0; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_2_1() { return cLOWERCASE_DASHIDTerminalRuleCall_2_1; }
	}
	public class VersionNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.VersionNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//VersionNumber:
		//	INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT ('.' INT)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//('.' INT)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//(LOWERCASE_ID | UPPERCASE_ID)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_0() { return cLOWERCASE_IDTerminalRuleCall_3_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_3_1() { return cUPPERCASE_IDTerminalRuleCall_3_1; }
	}
	
	public class UnitOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.UnitOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOVEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOVERSolidusKeyword_0_0 = (Keyword)cOVEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCARETEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCARETCircumflexAccentKeyword_1_0 = (Keyword)cCARETEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTARAsteriskKeyword_2_0 = (Keyword)cSTAREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnitOp:
		//	OVER='/' | CARET='^' | STAR='*';
		public EnumRule getRule() { return rule; }
		
		//OVER='/' | CARET='^' | STAR='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OVER='/'
		public EnumLiteralDeclaration getOVEREnumLiteralDeclaration_0() { return cOVEREnumLiteralDeclaration_0; }
		
		//'/'
		public Keyword getOVERSolidusKeyword_0_0() { return cOVERSolidusKeyword_0_0; }
		
		//CARET='^'
		public EnumLiteralDeclaration getCARETEnumLiteralDeclaration_1() { return cCARETEnumLiteralDeclaration_1; }
		
		//'^'
		public Keyword getCARETCircumflexAccentKeyword_1_0() { return cCARETCircumflexAccentKeyword_1_0; }
		
		//STAR='*'
		public EnumLiteralDeclaration getSTAREnumLiteralDeclaration_2() { return cSTAREnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getSTARAsteriskKeyword_2_0() { return cSTARAsteriskKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final TerminalRule tANNOTATION_ID;
	private final AnnotationElements pAnnotation;
	private final ActorDefinitionElements pActorDefinition;
	private final DataflowBodyElements pDataflowBody;
	private final ComputationElements pComputation;
	private final GeometryElements pGeometry;
	private final ParameterElements pParameter;
	private final ACTORElements pACTOR;
	private final TARGETElements pTARGET;
	private final ClassifierRHSElements pClassifierRHS;
	private final ListElements pList;
	private final LiteralElements pLiteral;
	private final LiteralOrIdOrCommaElements pLiteralOrIdOrComma;
	private final LiteralOrIDElements pLiteralOrID;
	private final MetadataElements pMetadata;
	private final ParameterListElements pParameterList;
	private final ValueElements pValue;
	private final UrnElements pUrn;
	private final UrnIdElements pUrnId;
	private final MapElements pMap;
	private final MapEntryElements pMapEntry;
	private final LookupTableElements pLookupTable;
	private final TableElements pTable;
	private final TableRowElements pTableRow;
	private final TableClassifierElements pTableClassifier;
	private final TerminalRule tEXPR;
	private final LocalFilePathElements pLocalFilePath;
	private final KeyValuePairElements pKeyValuePair;
	private final FunctionElements pFunction;
	private final UnitElementElements pUnitElement;
	private final UnitOpElements eUnitOp;
	private final REL_OPERATORElements pREL_OPERATOR;
	private final UnitElements pUnit;
	private final CurrencyElements pCurrency;
	private final NumberElements pNumber;
	private final TerminalRule tLOWERCASE_ID;
	private final TerminalRule tLOWERCASE_DASHID;
	private final TerminalRule tSHAPE;
	private final PathNameElements pPathName;
	private final PathElements pPath;
	private final JavaClassElements pJavaClass;
	private final TerminalRule tUPPERCASE_ID;
	private final TerminalRule tUPPERCASE_PATH;
	private final TerminalRule tCAMELCASE_ID;
	private final NamespaceIdElements pNamespaceId;
	private final PropertyIdElements pPropertyId;
	private final VersionNumberElements pVersionNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KdlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tANNOTATION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.ANNOTATION_ID");
		this.pAnnotation = new AnnotationElements();
		this.pActorDefinition = new ActorDefinitionElements();
		this.pDataflowBody = new DataflowBodyElements();
		this.pComputation = new ComputationElements();
		this.pGeometry = new GeometryElements();
		this.pParameter = new ParameterElements();
		this.pACTOR = new ACTORElements();
		this.pTARGET = new TARGETElements();
		this.pClassifierRHS = new ClassifierRHSElements();
		this.pList = new ListElements();
		this.pLiteral = new LiteralElements();
		this.pLiteralOrIdOrComma = new LiteralOrIdOrCommaElements();
		this.pLiteralOrID = new LiteralOrIDElements();
		this.pMetadata = new MetadataElements();
		this.pParameterList = new ParameterListElements();
		this.pValue = new ValueElements();
		this.pUrn = new UrnElements();
		this.pUrnId = new UrnIdElements();
		this.pMap = new MapElements();
		this.pMapEntry = new MapEntryElements();
		this.pLookupTable = new LookupTableElements();
		this.pTable = new TableElements();
		this.pTableRow = new TableRowElements();
		this.pTableClassifier = new TableClassifierElements();
		this.tEXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.EXPR");
		this.pLocalFilePath = new LocalFilePathElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pFunction = new FunctionElements();
		this.pUnitElement = new UnitElementElements();
		this.eUnitOp = new UnitOpElements();
		this.pREL_OPERATOR = new REL_OPERATORElements();
		this.pUnit = new UnitElements();
		this.pCurrency = new CurrencyElements();
		this.pNumber = new NumberElements();
		this.tLOWERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.LOWERCASE_ID");
		this.tLOWERCASE_DASHID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.LOWERCASE_DASHID");
		this.tSHAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.SHAPE");
		this.pPathName = new PathNameElements();
		this.pPath = new PathElements();
		this.pJavaClass = new JavaClassElements();
		this.tUPPERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.UPPERCASE_ID");
		this.tUPPERCASE_PATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.UPPERCASE_PATH");
		this.tCAMELCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kdl.Kdl.CAMELCASE_ID");
		this.pNamespaceId = new NamespaceIdElements();
		this.pPropertyId = new PropertyIdElements();
		this.pVersionNumber = new VersionNumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.integratedmodelling.kdl.Kdl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * The root model is the body of the dataflow for the context observation
	// */ Model:
	//	(('@dataflow' name=(Path | UrnId))? & ('@var' variables+=Parameter)* & ('@val' constants+=Parameter)* & ('@author'
	//	authors+=STRING)* & ('@version' version=VersionNumber)? & ('@klab' klabVersion=VersionNumber)? & ('@worldview'
	//	worldview=LOWERCASE_ID)? & ('@geometry' geometry=Geometry)? & ('@endpoint' endpoint=STRING)? & ('@namespace'
	//	package=PathName)? & ('@coverage' scale+=Function (',' scale+=Function)*)? & ('@context' contextUrn=Urn)?)
	//	actors+=ActorDefinition*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal ANNOTATION_ID:
	//	'@' LOWERCASE_ID;
	public TerminalRule getANNOTATION_IDRule() {
		return tANNOTATION_ID;
	}
	
	//Annotation:
	//	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//ActorDefinition:
	//	annotations+=Annotation*
	//	final?='final'? (exported?='export' | (optional?='optional'? imported?='import') (multiple?='multiple' | arity=INT
	//	minimum?='+'?)?)?
	//	// parameters denotes the ability of the implementation of accepting modified values during run
	//	// parameters cannot be multiple, must have a default and should have a range, can be calibrated, and will appear in calibration scenarios
	//	parameter?='parameter'?
	//	type=ACTOR name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING) ('for' targets+=TARGET (',' targets+=TARGET)*)?
	//	docstring=STRING? ('label' label=STRING)? ('{' body=DataflowBody '}')? ('as' localName=LOWERCASE_ID)? ('over'
	//	coverage+=Function (',' coverage+=Function)*)?
	//	| (optional?='optional' | type=('number' | 'boolean' | 'text' | 'list' | 'enum')) (parameter?='input' |
	//	imported?='import') name=(LOWERCASE_ID | LOWERCASE_DASHID | STRING) ('values' enumValues+=UPPERCASE_ID (','
	//	enumValues+=UPPERCASE_ID)*)?
	//	docstring=STRING ('label' label=STRING)? ('default' default=Value)? ('{' body=DataflowBody '}')? ('minimum'
	//	rangeMin=Number | 'maximum' rangeMax=Number | 'range' rangeMin=Number 'to' rangeMax=Number)?;
	public ActorDefinitionElements getActorDefinitionAccess() {
		return pActorDefinition;
	}
	
	public ParserRule getActorDefinitionRule() {
		return getActorDefinitionAccess().getRule();
	}
	
	//DataflowBody:
	//	{DataflowBody} dataflows+=ActorDefinition* (('geometry' geometry=Geometry)? & ('units' units=Unit)? &
	//	computations=Computation? & ('metadata' metadata=Metadata)? ('class' javaClass=JavaClass)?);
	public DataflowBodyElements getDataflowBodyAccess() {
		return pDataflowBody;
	}
	
	public ParserRule getDataflowBodyRule() {
		return getDataflowBodyAccess().getRule();
	}
	
	//Computation:
	//	'compute' functions+=Function (',' functions+=Function)*;
	public ComputationElements getComputationAccess() {
		return pComputation;
	}
	
	public ParserRule getComputationRule() {
		return getComputationAccess().getRule();
	}
	
	//Geometry:
	//	'*' | SHAPE (',' SHAPE)*;
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//Parameter:
	//	name=LOWERCASE_ID value=Value docstring=STRING?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ACTOR: // countable, so always a dataflow for direct object instantiation
	//	'object' | // non-countable, so one object only
	//	'process' | // any acceptable quality type, for declarations only
	//	'value' | // all the next are in quality scope; number type is handled internally
	//	'number' | 'concept' | 'boolean' | 'text' | // specialized functions that produce extents
	//	'extent' | 'spatialextent' | 'temporalextent' | // only contracts for annotations
	//	'annotation' | // only for command prototypes
	//	'void' | // partial contextualizers for their parents
	//	'partition';
	public ACTORElements getACTORAccess() {
		return pACTOR;
	}
	
	public ParserRule getACTORRule() {
		return getACTORAccess().getRule();
	}
	
	//TARGET:
	//	'models' | 'concepts' | 'observers' | 'definitions';
	public TARGETElements getTARGETAccess() {
		return pTARGET;
	}
	
	public ParserRule getTARGETRule() {
		return getTARGETAccess().getRule();
	}
	
	//ClassifierRHS:
	//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
	//	(rightLimit='inclusive' | 'exclusive')? | num=Number |
	//	'in' set=List | string=STRING | map=Map |
	//	'(' toResolve+=STRING (=> ',' toResolve+=STRING)* ')' | op=REL_OPERATOR expression=Number | nodata='unknown' |
	//	star?='*';
	public ClassifierRHSElements getClassifierRHSAccess() {
		return pClassifierRHS;
	}
	
	public ParserRule getClassifierRHSRule() {
		return getClassifierRHSAccess().getRule();
	}
	
	//List:
	//	{List} '(' contents+=Value* ')';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Literal:
	//	number=Number | from=Number 'to' to=Number | string=STRING | boolean=('true' | 'false');
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//LiteralOrIdOrComma Literal:
	//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';
	public LiteralOrIdOrCommaElements getLiteralOrIdOrCommaAccess() {
		return pLiteralOrIdOrComma;
	}
	
	public ParserRule getLiteralOrIdOrCommaRule() {
		return getLiteralOrIdOrCommaAccess().getRule();
	}
	
	//LiteralOrID Literal:
	//	number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
	public LiteralOrIDElements getLiteralOrIDAccess() {
		return pLiteralOrID;
	}
	
	public ParserRule getLiteralOrIDRule() {
		return getLiteralOrIDAccess().getRule();
	}
	
	//Metadata:
	//	{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}';
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//ParameterList:
	//	values+=Value (',' values+=Value)* | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Value:
	//	literal=LiteralOrIdOrComma | function=Function | urn=Urn | list=List | map=Map | expression=EXPR | table=LookupTable
	//	| enumId=UPPERCASE_ID;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Urn:
	//	name=(UrnId | STRING | LocalFilePath);
	public UrnElements getUrnAccess() {
		return pUrn;
	}
	
	public ParserRule getUrnRule() {
		return getUrnAccess().getRule();
	}
	
	///**
	// * URN is 4 sections and admits a version number and a fragment (with only lowercase_id chars in it). It is
	// * legal, but not required, to start with the default prefix urn:klab:
	// */ UrnId:
	//	'urn:klab:'? PathName ':' PathName ':' PathName ':' Path (':' VersionNumber)? ('#' LOWERCASE_ID)?;
	public UrnIdElements getUrnIdAccess() {
		return pUrnId;
	}
	
	public ParserRule getUrnIdRule() {
		return getUrnIdAccess().getRule();
	}
	
	//Map:
	//	{Map} '{' (entries+=MapEntry (=> (',') entries+=MapEntry)*)? '}';
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//MapEntry:
	//	classifier=ClassifierRHS ':' value=Value;
	public MapEntryElements getMapEntryAccess() {
		return pMapEntry;
	}
	
	public ParserRule getMapEntryRule() {
		return getMapEntryAccess().getRule();
	}
	
	//// Lookup table literal
	//LookupTable:
	//	{LookupTable}
	//	'{{' table=Table? '}}';
	public LookupTableElements getLookupTableAccess() {
		return pLookupTable;
	}
	
	public ParserRule getLookupTableRule() {
		return getLookupTableAccess().getRule();
	}
	
	//Table:
	//	rows+=TableRow (',' rows+=TableRow)*;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//TableRow:
	//	elements+=TableClassifier ('|' elements+=TableClassifier)*;
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//TableClassifier ClassifierRHS:
	//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
	//	(rightLimit='inclusive' | 'exclusive')? | num=Number |
	//	'in' set=List | string=STRING | op=REL_OPERATOR expression=Number | expr=EXPR | nodata='unknown' | star?='*' |
	//	anything?='#';
	public TableClassifierElements getTableClassifierAccess() {
		return pTableClassifier;
	}
	
	public ParserRule getTableClassifierRule() {
		return getTableClassifierAccess().getRule();
	}
	
	//terminal EXPR:
	//	'[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	public TerminalRule getEXPRRule() {
		return tEXPR;
	}
	
	///**
	// * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
	// * on whether there is an encoder for their file extension.
	// */ LocalFilePath:
	//	(CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID) ('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))* ('.'
	//	LOWERCASE_ID)? ('#' LOWERCASE_ID)?;
	public LocalFilePathElements getLocalFilePathAccess() {
		return pLocalFilePath;
	}
	
	public ParserRule getLocalFilePathRule() {
		return getLocalFilePathAccess().getRule();
	}
	
	//KeyValuePair:
	//	name=(LOWERCASE_ID | LOWERCASE_DASHID) (interactive?='=?' | '=') value=Value;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//Function:
	//	(mediated=LOWERCASE_ID '>>')? (name=PathName '(' parameters=ParameterList? ')' | urn=Urn | value=Literal) ('as'
	//	variable=LOWERCASE_ID)? |
	//	'(' chain+=Function (',' chain+=Function)* ')' ('as' variable=LOWERCASE_ID)?;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	///**
	// * ---------------------------------------
	// * Unit of measurement re: jsr-108, parseable by Java
	// * TODO implement expression syntax and provide validator
	// * ---------------------------------------
	// */ UnitElement:
	//	id=(CAMELCASE_ID | LOWERCASE_ID) | num=Number |
	//	'(' unit=Unit ')';
	public UnitElementElements getUnitElementAccess() {
		return pUnitElement;
	}
	
	public ParserRule getUnitElementRule() {
		return getUnitElementAccess().getRule();
	}
	
	//enum UnitOp:
	//	OVER='/' | CARET='^' | STAR='*';
	public UnitOpElements getUnitOpAccess() {
		return eUnitOp;
	}
	
	public EnumRule getUnitOpRule() {
		return getUnitOpAccess().getRule();
	}
	
	//REL_OPERATOR:
	//	gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>=';
	public REL_OPERATORElements getREL_OPERATORAccess() {
		return pREL_OPERATOR;
	}
	
	public ParserRule getREL_OPERATORRule() {
		return getREL_OPERATORAccess().getRule();
	}
	
	//Unit:
	//	{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Currency:
	//	id=ID ('@' year=INT) | concept=(CAMELCASE_ID | NamespaceId);
	public CurrencyElements getCurrencyAccess() {
		return pCurrency;
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}
	
	//Number:
	//	('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
	//	expNegative?='-')? exp=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal LOWERCASE_ID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getLOWERCASE_IDRule() {
		return tLOWERCASE_ID;
	}
	
	//terminal LOWERCASE_DASHID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '-')*;
	public TerminalRule getLOWERCASE_DASHIDRule() {
		return tLOWERCASE_DASHID;
	}
	
	//terminal SHAPE:
	//	'#' | '#'? ('A'..'z' ('.' | '0'..'3'))+;
	public TerminalRule getSHAPERule() {
		return tSHAPE;
	}
	
	//PathName:
	//	LOWERCASE_ID ('.' LOWERCASE_ID)*;
	public PathNameElements getPathNameAccess() {
		return pPathName;
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	//Path:
	//	LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//JavaClass:
	//	PathName '.' CAMELCASE_ID;
	public JavaClassElements getJavaClassAccess() {
		return pJavaClass;
	}
	
	public ParserRule getJavaClassRule() {
		return getJavaClassAccess().getRule();
	}
	
	//terminal UPPERCASE_ID:
	//	'A'..'Z' 'A'..'Z'*;
	public TerminalRule getUPPERCASE_IDRule() {
		return tUPPERCASE_ID;
	}
	
	//terminal UPPERCASE_PATH:
	//	UPPERCASE_ID ('.' UPPERCASE_ID)*;
	public TerminalRule getUPPERCASE_PATHRule() {
		return tUPPERCASE_PATH;
	}
	
	//terminal CAMELCASE_ID:
	//	'A'..'Z' ('A'..'z' | '0'..'9')*;
	public TerminalRule getCAMELCASE_IDRule() {
		return tCAMELCASE_ID;
	}
	
	//NamespaceId:
	//	PathName ':' CAMELCASE_ID;
	public NamespaceIdElements getNamespaceIdAccess() {
		return pNamespaceId;
	}
	
	public ParserRule getNamespaceIdRule() {
		return getNamespaceIdAccess().getRule();
	}
	
	//PropertyId:
	//	PathName ':' (LOWERCASE_ID | LOWERCASE_DASHID);
	public PropertyIdElements getPropertyIdAccess() {
		return pPropertyId;
	}
	
	public ParserRule getPropertyIdRule() {
		return getPropertyIdAccess().getRule();
	}
	
	//VersionNumber:
	//	INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?;
	public VersionNumberElements getVersionNumberAccess() {
		return pVersionNumber;
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
