/**
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kdl.kdl.impl;

import java.util.Collection;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.integratedmodelling.kdl.kdl.ActorDefinition;
import org.integratedmodelling.kdl.kdl.Computation;
import org.integratedmodelling.kdl.kdl.DataflowBody;
import org.integratedmodelling.kdl.kdl.KdlPackage;
import org.integratedmodelling.kdl.kdl.Metadata;
import org.integratedmodelling.kdl.kdl.ObservableSemantics;
import org.integratedmodelling.kdl.kdl.Unit;
import org.integratedmodelling.kdl.kdl.Urn;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dataflow Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getNewObservation <em>New Observation</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getUrnObservation <em>Urn Observation</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getDataflows <em>Dataflows</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getGeometry <em>Geometry</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getUnits <em>Units</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getComputations <em>Computations</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getSemantics <em>Semantics</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getMetadata <em>Metadata</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.DataflowBodyImpl#getJavaClass <em>Java Class</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataflowBodyImpl extends MinimalEObjectImpl.Container implements DataflowBody
{
  /**
   * The cached value of the '{@link #getNewObservation() <em>New Observation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNewObservation()
   * @generated
   * @ordered
   */
  protected ObservableSemantics newObservation;

  /**
   * The cached value of the '{@link #getUrnObservation() <em>Urn Observation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUrnObservation()
   * @generated
   * @ordered
   */
  protected Urn urnObservation;

  /**
   * The cached value of the '{@link #getDataflows() <em>Dataflows</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataflows()
   * @generated
   * @ordered
   */
  protected EList<ActorDefinition> dataflows;

  /**
   * The default value of the '{@link #getGeometry() <em>Geometry</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGeometry()
   * @generated
   * @ordered
   */
  protected static final String GEOMETRY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGeometry() <em>Geometry</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGeometry()
   * @generated
   * @ordered
   */
  protected String geometry = GEOMETRY_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnits() <em>Units</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected Unit units;

  /**
   * The cached value of the '{@link #getComputations() <em>Computations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComputations()
   * @generated
   * @ordered
   */
  protected EList<Computation> computations;

  /**
   * The cached value of the '{@link #getSemantics() <em>Semantics</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSemantics()
   * @generated
   * @ordered
   */
  protected ObservableSemantics semantics;

  /**
   * The cached value of the '{@link #getMetadata() <em>Metadata</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetadata()
   * @generated
   * @ordered
   */
  protected Metadata metadata;

  /**
   * The default value of the '{@link #getJavaClass() <em>Java Class</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJavaClass()
   * @generated
   * @ordered
   */
  protected static final String JAVA_CLASS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJavaClass() <em>Java Class</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJavaClass()
   * @generated
   * @ordered
   */
  protected String javaClass = JAVA_CLASS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataflowBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KdlPackage.Literals.DATAFLOW_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObservableSemantics getNewObservation()
  {
    return newObservation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNewObservation(ObservableSemantics newNewObservation, NotificationChain msgs)
  {
    ObservableSemantics oldNewObservation = newObservation;
    newObservation = newNewObservation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION, oldNewObservation, newNewObservation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNewObservation(ObservableSemantics newNewObservation)
  {
    if (newNewObservation != newObservation)
    {
      NotificationChain msgs = null;
      if (newObservation != null)
        msgs = ((InternalEObject)newObservation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION, null, msgs);
      if (newNewObservation != null)
        msgs = ((InternalEObject)newNewObservation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION, null, msgs);
      msgs = basicSetNewObservation(newNewObservation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION, newNewObservation, newNewObservation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Urn getUrnObservation()
  {
    return urnObservation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUrnObservation(Urn newUrnObservation, NotificationChain msgs)
  {
    Urn oldUrnObservation = urnObservation;
    urnObservation = newUrnObservation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__URN_OBSERVATION, oldUrnObservation, newUrnObservation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUrnObservation(Urn newUrnObservation)
  {
    if (newUrnObservation != urnObservation)
    {
      NotificationChain msgs = null;
      if (urnObservation != null)
        msgs = ((InternalEObject)urnObservation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__URN_OBSERVATION, null, msgs);
      if (newUrnObservation != null)
        msgs = ((InternalEObject)newUrnObservation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__URN_OBSERVATION, null, msgs);
      msgs = basicSetUrnObservation(newUrnObservation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__URN_OBSERVATION, newUrnObservation, newUrnObservation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ActorDefinition> getDataflows()
  {
    if (dataflows == null)
    {
      dataflows = new EObjectContainmentEList<ActorDefinition>(ActorDefinition.class, this, KdlPackage.DATAFLOW_BODY__DATAFLOWS);
    }
    return dataflows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getGeometry()
  {
    return geometry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGeometry(String newGeometry)
  {
    String oldGeometry = geometry;
    geometry = newGeometry;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__GEOMETRY, oldGeometry, geometry));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Unit getUnits()
  {
    return units;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnits(Unit newUnits, NotificationChain msgs)
  {
    Unit oldUnits = units;
    units = newUnits;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__UNITS, oldUnits, newUnits);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnits(Unit newUnits)
  {
    if (newUnits != units)
    {
      NotificationChain msgs = null;
      if (units != null)
        msgs = ((InternalEObject)units).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__UNITS, null, msgs);
      if (newUnits != null)
        msgs = ((InternalEObject)newUnits).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__UNITS, null, msgs);
      msgs = basicSetUnits(newUnits, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__UNITS, newUnits, newUnits));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Computation> getComputations()
  {
    if (computations == null)
    {
      computations = new EObjectContainmentEList<Computation>(Computation.class, this, KdlPackage.DATAFLOW_BODY__COMPUTATIONS);
    }
    return computations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObservableSemantics getSemantics()
  {
    return semantics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSemantics(ObservableSemantics newSemantics, NotificationChain msgs)
  {
    ObservableSemantics oldSemantics = semantics;
    semantics = newSemantics;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__SEMANTICS, oldSemantics, newSemantics);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSemantics(ObservableSemantics newSemantics)
  {
    if (newSemantics != semantics)
    {
      NotificationChain msgs = null;
      if (semantics != null)
        msgs = ((InternalEObject)semantics).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__SEMANTICS, null, msgs);
      if (newSemantics != null)
        msgs = ((InternalEObject)newSemantics).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__SEMANTICS, null, msgs);
      msgs = basicSetSemantics(newSemantics, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__SEMANTICS, newSemantics, newSemantics));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metadata getMetadata()
  {
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetadata(Metadata newMetadata, NotificationChain msgs)
  {
    Metadata oldMetadata = metadata;
    metadata = newMetadata;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__METADATA, oldMetadata, newMetadata);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMetadata(Metadata newMetadata)
  {
    if (newMetadata != metadata)
    {
      NotificationChain msgs = null;
      if (metadata != null)
        msgs = ((InternalEObject)metadata).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__METADATA, null, msgs);
      if (newMetadata != null)
        msgs = ((InternalEObject)newMetadata).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.DATAFLOW_BODY__METADATA, null, msgs);
      msgs = basicSetMetadata(newMetadata, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__METADATA, newMetadata, newMetadata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getJavaClass()
  {
    return javaClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setJavaClass(String newJavaClass)
  {
    String oldJavaClass = javaClass;
    javaClass = newJavaClass;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.DATAFLOW_BODY__JAVA_CLASS, oldJavaClass, javaClass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION:
        return basicSetNewObservation(null, msgs);
      case KdlPackage.DATAFLOW_BODY__URN_OBSERVATION:
        return basicSetUrnObservation(null, msgs);
      case KdlPackage.DATAFLOW_BODY__DATAFLOWS:
        return ((InternalEList<?>)getDataflows()).basicRemove(otherEnd, msgs);
      case KdlPackage.DATAFLOW_BODY__UNITS:
        return basicSetUnits(null, msgs);
      case KdlPackage.DATAFLOW_BODY__COMPUTATIONS:
        return ((InternalEList<?>)getComputations()).basicRemove(otherEnd, msgs);
      case KdlPackage.DATAFLOW_BODY__SEMANTICS:
        return basicSetSemantics(null, msgs);
      case KdlPackage.DATAFLOW_BODY__METADATA:
        return basicSetMetadata(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION:
        return getNewObservation();
      case KdlPackage.DATAFLOW_BODY__URN_OBSERVATION:
        return getUrnObservation();
      case KdlPackage.DATAFLOW_BODY__DATAFLOWS:
        return getDataflows();
      case KdlPackage.DATAFLOW_BODY__GEOMETRY:
        return getGeometry();
      case KdlPackage.DATAFLOW_BODY__UNITS:
        return getUnits();
      case KdlPackage.DATAFLOW_BODY__COMPUTATIONS:
        return getComputations();
      case KdlPackage.DATAFLOW_BODY__SEMANTICS:
        return getSemantics();
      case KdlPackage.DATAFLOW_BODY__METADATA:
        return getMetadata();
      case KdlPackage.DATAFLOW_BODY__JAVA_CLASS:
        return getJavaClass();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION:
        setNewObservation((ObservableSemantics)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__URN_OBSERVATION:
        setUrnObservation((Urn)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__DATAFLOWS:
        getDataflows().clear();
        getDataflows().addAll((Collection<? extends ActorDefinition>)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__GEOMETRY:
        setGeometry((String)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__UNITS:
        setUnits((Unit)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__COMPUTATIONS:
        getComputations().clear();
        getComputations().addAll((Collection<? extends Computation>)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__SEMANTICS:
        setSemantics((ObservableSemantics)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__METADATA:
        setMetadata((Metadata)newValue);
        return;
      case KdlPackage.DATAFLOW_BODY__JAVA_CLASS:
        setJavaClass((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION:
        setNewObservation((ObservableSemantics)null);
        return;
      case KdlPackage.DATAFLOW_BODY__URN_OBSERVATION:
        setUrnObservation((Urn)null);
        return;
      case KdlPackage.DATAFLOW_BODY__DATAFLOWS:
        getDataflows().clear();
        return;
      case KdlPackage.DATAFLOW_BODY__GEOMETRY:
        setGeometry(GEOMETRY_EDEFAULT);
        return;
      case KdlPackage.DATAFLOW_BODY__UNITS:
        setUnits((Unit)null);
        return;
      case KdlPackage.DATAFLOW_BODY__COMPUTATIONS:
        getComputations().clear();
        return;
      case KdlPackage.DATAFLOW_BODY__SEMANTICS:
        setSemantics((ObservableSemantics)null);
        return;
      case KdlPackage.DATAFLOW_BODY__METADATA:
        setMetadata((Metadata)null);
        return;
      case KdlPackage.DATAFLOW_BODY__JAVA_CLASS:
        setJavaClass(JAVA_CLASS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.DATAFLOW_BODY__NEW_OBSERVATION:
        return newObservation != null;
      case KdlPackage.DATAFLOW_BODY__URN_OBSERVATION:
        return urnObservation != null;
      case KdlPackage.DATAFLOW_BODY__DATAFLOWS:
        return dataflows != null && !dataflows.isEmpty();
      case KdlPackage.DATAFLOW_BODY__GEOMETRY:
        return GEOMETRY_EDEFAULT == null ? geometry != null : !GEOMETRY_EDEFAULT.equals(geometry);
      case KdlPackage.DATAFLOW_BODY__UNITS:
        return units != null;
      case KdlPackage.DATAFLOW_BODY__COMPUTATIONS:
        return computations != null && !computations.isEmpty();
      case KdlPackage.DATAFLOW_BODY__SEMANTICS:
        return semantics != null;
      case KdlPackage.DATAFLOW_BODY__METADATA:
        return metadata != null;
      case KdlPackage.DATAFLOW_BODY__JAVA_CLASS:
        return JAVA_CLASS_EDEFAULT == null ? javaClass != null : !JAVA_CLASS_EDEFAULT.equals(javaClass);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (geometry: ");
    result.append(geometry);
    result.append(", javaClass: ");
    result.append(javaClass);
    result.append(')');
    return result.toString();
  }

} //DataflowBodyImpl
