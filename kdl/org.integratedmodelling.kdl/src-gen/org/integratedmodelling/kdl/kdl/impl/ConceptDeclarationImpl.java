/**
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kdl.kdl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kdl.kdl.Concept;
import org.integratedmodelling.kdl.kdl.ConceptDeclaration;
import org.integratedmodelling.kdl.kdl.KdlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concept Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.ConceptDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.ConceptDeclarationImpl#getMain <em>Main</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.ConceptDeclarationImpl#getInherency <em>Inherency</em>}</li>
 *   <li>{@link org.integratedmodelling.kdl.kdl.impl.ConceptDeclarationImpl#getContext <em>Context</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptDeclarationImpl extends MinimalEObjectImpl.Container implements ConceptDeclaration
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getMain() <em>Main</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMain()
   * @generated
   * @ordered
   */
  protected EList<Concept> main;

  /**
   * The cached value of the '{@link #getInherency() <em>Inherency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInherency()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration inherency;

  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration context;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KdlPackage.Literals.CONCEPT_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.CONCEPT_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Concept> getMain()
  {
    if (main == null)
    {
      main = new EObjectContainmentEList<Concept>(Concept.class, this, KdlPackage.CONCEPT_DECLARATION__MAIN);
    }
    return main;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptDeclaration getInherency()
  {
    return inherency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInherency(ConceptDeclaration newInherency, NotificationChain msgs)
  {
    ConceptDeclaration oldInherency = inherency;
    inherency = newInherency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.CONCEPT_DECLARATION__INHERENCY, oldInherency, newInherency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInherency(ConceptDeclaration newInherency)
  {
    if (newInherency != inherency)
    {
      NotificationChain msgs = null;
      if (inherency != null)
        msgs = ((InternalEObject)inherency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.CONCEPT_DECLARATION__INHERENCY, null, msgs);
      if (newInherency != null)
        msgs = ((InternalEObject)newInherency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.CONCEPT_DECLARATION__INHERENCY, null, msgs);
      msgs = basicSetInherency(newInherency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.CONCEPT_DECLARATION__INHERENCY, newInherency, newInherency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptDeclaration getContext()
  {
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContext(ConceptDeclaration newContext, NotificationChain msgs)
  {
    ConceptDeclaration oldContext = context;
    context = newContext;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdlPackage.CONCEPT_DECLARATION__CONTEXT, oldContext, newContext);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContext(ConceptDeclaration newContext)
  {
    if (newContext != context)
    {
      NotificationChain msgs = null;
      if (context != null)
        msgs = ((InternalEObject)context).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdlPackage.CONCEPT_DECLARATION__CONTEXT, null, msgs);
      if (newContext != null)
        msgs = ((InternalEObject)newContext).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdlPackage.CONCEPT_DECLARATION__CONTEXT, null, msgs);
      msgs = basicSetContext(newContext, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdlPackage.CONCEPT_DECLARATION__CONTEXT, newContext, newContext));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KdlPackage.CONCEPT_DECLARATION__MAIN:
        return ((InternalEList<?>)getMain()).basicRemove(otherEnd, msgs);
      case KdlPackage.CONCEPT_DECLARATION__INHERENCY:
        return basicSetInherency(null, msgs);
      case KdlPackage.CONCEPT_DECLARATION__CONTEXT:
        return basicSetContext(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KdlPackage.CONCEPT_DECLARATION__NAME:
        return getName();
      case KdlPackage.CONCEPT_DECLARATION__MAIN:
        return getMain();
      case KdlPackage.CONCEPT_DECLARATION__INHERENCY:
        return getInherency();
      case KdlPackage.CONCEPT_DECLARATION__CONTEXT:
        return getContext();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KdlPackage.CONCEPT_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case KdlPackage.CONCEPT_DECLARATION__MAIN:
        getMain().clear();
        getMain().addAll((Collection<? extends Concept>)newValue);
        return;
      case KdlPackage.CONCEPT_DECLARATION__INHERENCY:
        setInherency((ConceptDeclaration)newValue);
        return;
      case KdlPackage.CONCEPT_DECLARATION__CONTEXT:
        setContext((ConceptDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.CONCEPT_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case KdlPackage.CONCEPT_DECLARATION__MAIN:
        getMain().clear();
        return;
      case KdlPackage.CONCEPT_DECLARATION__INHERENCY:
        setInherency((ConceptDeclaration)null);
        return;
      case KdlPackage.CONCEPT_DECLARATION__CONTEXT:
        setContext((ConceptDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KdlPackage.CONCEPT_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case KdlPackage.CONCEPT_DECLARATION__MAIN:
        return main != null && !main.isEmpty();
      case KdlPackage.CONCEPT_DECLARATION__INHERENCY:
        return inherency != null;
      case KdlPackage.CONCEPT_DECLARATION__CONTEXT:
        return context != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ConceptDeclarationImpl
