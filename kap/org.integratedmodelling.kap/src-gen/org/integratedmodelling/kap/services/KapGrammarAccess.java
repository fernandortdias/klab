/*
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kap.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KapGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPreambleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPreamblePreambleParserRuleCall_1_0 = (RuleCall)cPreambleAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		
		//Model:
		//	{Model} preamble=Preamble?
		//	definitions+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} preamble=Preamble? definitions+=Definition*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//preamble=Preamble?
		public Assignment getPreambleAssignment_1() { return cPreambleAssignment_1; }
		
		//Preamble
		public RuleCall getPreamblePreambleParserRuleCall_1_0() { return cPreamblePreambleParserRuleCall_1_0; }
		
		//definitions+=Definition*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }
		
		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_2_0() { return cDefinitionsDefinitionParserRuleCall_2_0; }
	}
	public class PreambleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Preamble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cWorldviewKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cWorldviewAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cWorldviewLOWERCASE_IDTerminalRuleCall_2_0_1_0 = (RuleCall)cWorldviewAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cPermissionsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPermissionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPermissionsSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cPermissionsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cAuthorKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAuthorsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAuthorsSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cAuthorsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cVersionKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cVersionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cVersionLOWERCASE_IDTerminalRuleCall_2_3_1_0 = (RuleCall)cVersionAssignment_2_3_1.eContents().get(0);
		
		//Preamble:
		//	'name' name=LOWERCASE_ID (('worldview' worldview=LOWERCASE_ID)? & ('permissions' permissions=STRING)? & ('author'
		//	authors=STRING)? & ('version' version=LOWERCASE_ID)?);
		@Override public ParserRule getRule() { return rule; }
		
		//'name' name=LOWERCASE_ID (('worldview' worldview=LOWERCASE_ID)? & ('permissions' permissions=STRING)? & ('author'
		//authors=STRING)? & ('version' version=LOWERCASE_ID)?)
		public Group getGroup() { return cGroup; }
		
		//'name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_0() { return cNameLOWERCASE_IDTerminalRuleCall_1_0; }
		
		//(('worldview' worldview=LOWERCASE_ID)? & ('permissions' permissions=STRING)? & ('author' authors=STRING)? & ('version'
		//version=LOWERCASE_ID)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('worldview' worldview=LOWERCASE_ID)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'worldview'
		public Keyword getWorldviewKeyword_2_0_0() { return cWorldviewKeyword_2_0_0; }
		
		//worldview=LOWERCASE_ID
		public Assignment getWorldviewAssignment_2_0_1() { return cWorldviewAssignment_2_0_1; }
		
		//LOWERCASE_ID
		public RuleCall getWorldviewLOWERCASE_IDTerminalRuleCall_2_0_1_0() { return cWorldviewLOWERCASE_IDTerminalRuleCall_2_0_1_0; }
		
		//('permissions' permissions=STRING)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'permissions'
		public Keyword getPermissionsKeyword_2_1_0() { return cPermissionsKeyword_2_1_0; }
		
		//permissions=STRING
		public Assignment getPermissionsAssignment_2_1_1() { return cPermissionsAssignment_2_1_1; }
		
		//STRING
		public RuleCall getPermissionsSTRINGTerminalRuleCall_2_1_1_0() { return cPermissionsSTRINGTerminalRuleCall_2_1_1_0; }
		
		//('author' authors=STRING)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'author'
		public Keyword getAuthorKeyword_2_2_0() { return cAuthorKeyword_2_2_0; }
		
		//authors=STRING
		public Assignment getAuthorsAssignment_2_2_1() { return cAuthorsAssignment_2_2_1; }
		
		//STRING
		public RuleCall getAuthorsSTRINGTerminalRuleCall_2_2_1_0() { return cAuthorsSTRINGTerminalRuleCall_2_2_1_0; }
		
		//('version' version=LOWERCASE_ID)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'version'
		public Keyword getVersionKeyword_2_3_0() { return cVersionKeyword_2_3_0; }
		
		//version=LOWERCASE_ID
		public Assignment getVersionAssignment_2_3_1() { return cVersionAssignment_2_3_1; }
		
		//LOWERCASE_ID
		public RuleCall getVersionLOWERCASE_IDTerminalRuleCall_2_3_1_0() { return cVersionLOWERCASE_IDTerminalRuleCall_2_3_1_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentDeclarationParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Definition:
		//	'def' name=LOWERCASE_ID arguments=ArgumentDeclaration? ':' body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=LOWERCASE_ID arguments=ArgumentDeclaration? ':' body=Body
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_0() { return cNameLOWERCASE_IDTerminalRuleCall_1_0; }
		
		//arguments=ArgumentDeclaration?
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//ArgumentDeclaration
		public RuleCall getArgumentsArgumentDeclarationParserRuleCall_2_0() { return cArgumentsArgumentDeclarationParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//body=Body
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_4_0() { return cBodyBodyParserRuleCall_4_0; }
	}
	public class ArgumentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.ArgumentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArgumentDeclaration:
		//	{ArgumentDeclaration}
		//	'(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgumentDeclaration} '(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ArgumentDeclaration}
		public Action getArgumentDeclarationAction_0() { return cArgumentDeclarationAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ids+=LOWERCASE_ID
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_0_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_0_0; }
		
		//(',' ids+=LOWERCASE_ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//ids+=LOWERCASE_ID
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPairsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPairsKeyValuePairParserRuleCall_0_0 = (RuleCall)cPairsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPairsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_1_0 = (RuleCall)cPairsAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
		@Override public ParserRule getRule() { return rule; }
		
		//pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*
		public Group getGroup() { return cGroup; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_0() { return cPairsAssignment_0; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_0_0() { return cPairsKeyValuePairParserRuleCall_0_0; }
		
		//(=> ',' pairs+=KeyValuePair)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_1() { return cPairsAssignment_1_1; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_1_0() { return cPairsKeyValuePairParserRuleCall_1_1_0; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cInteractiveAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cInteractiveEqualsSignQuestionMarkKeyword_0_1_0_0 = (Keyword)cInteractiveAssignment_0_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//KeyValuePair:
		//	(name=LOWERCASE_ID (interactive?='=?' | '='))?
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=LOWERCASE_ID (interactive?='=?' | '='))? value=Value
		public Group getGroup() { return cGroup; }
		
		//(name=LOWERCASE_ID (interactive?='=?' | '='))?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//(interactive?='=?' | '=')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//interactive?='=?'
		public Assignment getInteractiveAssignment_0_1_0() { return cInteractiveAssignment_0_1_0; }
		
		//'=?'
		public Keyword getInteractiveEqualsSignQuestionMarkKeyword_0_1_0_0() { return cInteractiveEqualsSignQuestionMarkKeyword_0_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cArgvalueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cArgvalueARGVALUETerminalRuleCall_0_0 = (RuleCall)cArgvalueAssignment_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cObservableAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_3_0 = (RuleCall)cObservableAssignment_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionEXPRTerminalRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//Value:
		//	argvalue=ARGVALUE | literal=Literal | id=LOWERCASE_ID | observable=OBSERVABLE | expression=EXPR // |
		//	//	table=LookupTable ???
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//argvalue=ARGVALUE | literal=Literal | id=LOWERCASE_ID | observable=OBSERVABLE | expression=EXPR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//argvalue=ARGVALUE
		public Assignment getArgvalueAssignment_0() { return cArgvalueAssignment_0; }
		
		//ARGVALUE
		public RuleCall getArgvalueARGVALUETerminalRuleCall_0_0() { return cArgvalueARGVALUETerminalRuleCall_0_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_1_0() { return cLiteralLiteralParserRuleCall_1_0; }
		
		//id=LOWERCASE_ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_2_0() { return cIdLOWERCASE_IDTerminalRuleCall_2_0; }
		
		////	urn=Urn | 
		////	list=List |
		////	map=Map | ???
		//observable=OBSERVABLE
		public Assignment getObservableAssignment_3() { return cObservableAssignment_3; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_3_0() { return cObservableOBSERVABLETerminalRuleCall_3_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_4_0() { return cExpressionEXPRTerminalRuleCall_4_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFromAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_1_0_0 = (RuleCall)cFromAssignment_1_0.eContents().get(0);
		private final Keyword cToKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cToAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_1_2_0 = (RuleCall)cToAssignment_1_2.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cDateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDateDateParserRuleCall_3_0 = (RuleCall)cDateAssignment_3.eContents().get(0);
		private final Assignment cBooleanAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Alternatives cBooleanAlternatives_4_0 = (Alternatives)cBooleanAssignment_4.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_4_0_0 = (Keyword)cBooleanAlternatives_4_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_4_0_1 = (Keyword)cBooleanAlternatives_4_0.eContents().get(1);
		
		//Literal:
		//	number=Number | from=Number 'to' to=Number | string=STRING | date=Date | boolean=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | from=Number 'to' to=Number | string=STRING | date=Date | boolean=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//from=Number 'to' to=Number
		public Group getGroup_1() { return cGroup_1; }
		
		//from=Number
		public Assignment getFromAssignment_1_0() { return cFromAssignment_1_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_1_0_0() { return cFromNumberParserRuleCall_1_0_0; }
		
		//'to'
		public Keyword getToKeyword_1_1() { return cToKeyword_1_1; }
		
		//to=Number
		public Assignment getToAssignment_1_2() { return cToAssignment_1_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_1_2_0() { return cToNumberParserRuleCall_1_2_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//date=Date
		public Assignment getDateAssignment_3() { return cDateAssignment_3; }
		
		//Date
		public RuleCall getDateDateParserRuleCall_3_0() { return cDateDateParserRuleCall_3_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_4() { return cBooleanAssignment_4; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_4_0() { return cBooleanAlternatives_4_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_4_0_0() { return cBooleanTrueKeyword_4_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_4_0_1() { return cBooleanFalseKeyword_4_0_1; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Body");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBodyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cListStatementParserRuleCall_0_1_0 = (RuleCall)cListAssignment_0_1.eContents().get(0);
		private final Assignment cListAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cListStatementParserRuleCall_0_2_0 = (RuleCall)cListAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsgroupAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsgroupLeftParenthesisKeyword_1_0_0 = (Keyword)cIsgroupAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cGroupAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cGroupStatementParserRuleCall_1_1_0_0 = (RuleCall)cGroupAssignment_1_1_0.eContents().get(0);
		private final Assignment cGroupAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cGroupStatementParserRuleCall_1_1_1_0 = (RuleCall)cGroupAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Body:
		//	{Body} list+=Statement list+=Statement* | isgroup?='(' (group+=Statement group+=Statement*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Body} list+=Statement list+=Statement* | isgroup?='(' (group+=Statement group+=Statement*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Body} list+=Statement list+=Statement*
		public Group getGroup_0() { return cGroup_0; }
		
		//{Body}
		public Action getBodyAction_0_0() { return cBodyAction_0_0; }
		
		//list+=Statement
		public Assignment getListAssignment_0_1() { return cListAssignment_0_1; }
		
		//Statement
		public RuleCall getListStatementParserRuleCall_0_1_0() { return cListStatementParserRuleCall_0_1_0; }
		
		//list+=Statement*
		public Assignment getListAssignment_0_2() { return cListAssignment_0_2; }
		
		//Statement
		public RuleCall getListStatementParserRuleCall_0_2_0() { return cListStatementParserRuleCall_0_2_0; }
		
		//// only way to be empty is to be an empty group
		//isgroup?='(' (group+=Statement group+=Statement*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//// only way to be empty is to be an empty group
		//isgroup?='('
		public Assignment getIsgroupAssignment_1_0() { return cIsgroupAssignment_1_0; }
		
		//'('
		public Keyword getIsgroupLeftParenthesisKeyword_1_0_0() { return cIsgroupLeftParenthesisKeyword_1_0_0; }
		
		//(group+=Statement group+=Statement*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//group+=Statement
		public Assignment getGroupAssignment_1_1_0() { return cGroupAssignment_1_1_0; }
		
		//Statement
		public RuleCall getGroupStatementParserRuleCall_1_1_0_0() { return cGroupStatementParserRuleCall_1_1_0_0; }
		
		//group+=Statement*
		public Assignment getGroupAssignment_1_1_1() { return cGroupAssignment_1_1_1; }
		
		//Statement
		public RuleCall getGroupStatementParserRuleCall_1_1_1_0() { return cGroupStatementParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCallCallParserRuleCall_0_0 = (RuleCall)cCallAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTextEMBEDDEDTEXTTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Assignment cIfAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIfIfStatementParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupStatementParserRuleCall_3_1_0 = (RuleCall)cGroupAssignment_3_1.eContents().get(0);
		private final Assignment cGroupAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cGroupStatementParserRuleCall_3_2_0 = (RuleCall)cGroupAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Statement:
		//	call=Call | text=EMBEDDEDTEXT | if=IfStatement |
		//	'(' group+=Statement group+=Statement* ')'
		//	//	WhileStatement |
		//	//	DoStatement |
		//	//	ForStatement |
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//call=Call | text=EMBEDDEDTEXT | if=IfStatement | '(' group+=Statement group+=Statement* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//call=Call
		public Assignment getCallAssignment_0() { return cCallAssignment_0; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_0_0() { return cCallCallParserRuleCall_0_0; }
		
		//text=EMBEDDEDTEXT
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//EMBEDDEDTEXT
		public RuleCall getTextEMBEDDEDTEXTTerminalRuleCall_1_0() { return cTextEMBEDDEDTEXTTerminalRuleCall_1_0; }
		
		//if=IfStatement
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }
		
		//IfStatement
		public RuleCall getIfIfStatementParserRuleCall_2_0() { return cIfIfStatementParserRuleCall_2_0; }
		
		//'(' group+=Statement group+=Statement* ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//group+=Statement
		public Assignment getGroupAssignment_3_1() { return cGroupAssignment_3_1; }
		
		//Statement
		public RuleCall getGroupStatementParserRuleCall_3_1_0() { return cGroupStatementParserRuleCall_3_1_0; }
		
		//group+=Statement*
		public Assignment getGroupAssignment_3_2() { return cGroupAssignment_3_2; }
		
		//Statement
		public RuleCall getGroupStatementParserRuleCall_3_2_0() { return cGroupStatementParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionEXPRTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyIfBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cIfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cElseIfExpressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElseIfExpressionEXPRTerminalRuleCall_3_2_0 = (RuleCall)cElseIfExpressionAssignment_3_2.eContents().get(0);
		private final Assignment cElseIfCallAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cElseIfCallIfBodyParserRuleCall_3_3_0 = (RuleCall)cElseIfCallAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseCallAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseCallIfBodyParserRuleCall_4_1_0 = (RuleCall)cElseCallAssignment_4_1.eContents().get(0);
		
		//IfStatement:
		//	'if' expression=EXPR body=IfBody ('else' 'if' elseIfExpression+=EXPR elseIfCall+=IfBody)* ('else' elseCall=IfBody)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expression=EXPR body=IfBody ('else' 'if' elseIfExpression+=EXPR elseIfCall+=IfBody)* ('else' elseCall=IfBody)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_1_0() { return cExpressionEXPRTerminalRuleCall_1_0; }
		
		//body=IfBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//IfBody
		public RuleCall getBodyIfBodyParserRuleCall_2_0() { return cBodyIfBodyParserRuleCall_2_0; }
		
		//('else' 'if' elseIfExpression+=EXPR elseIfCall+=IfBody)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'else'
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//'if'
		public Keyword getIfKeyword_3_1() { return cIfKeyword_3_1; }
		
		//elseIfExpression+=EXPR
		public Assignment getElseIfExpressionAssignment_3_2() { return cElseIfExpressionAssignment_3_2; }
		
		//EXPR
		public RuleCall getElseIfExpressionEXPRTerminalRuleCall_3_2_0() { return cElseIfExpressionEXPRTerminalRuleCall_3_2_0; }
		
		//elseIfCall+=IfBody
		public Assignment getElseIfCallAssignment_3_3() { return cElseIfCallAssignment_3_3; }
		
		//IfBody
		public RuleCall getElseIfCallIfBodyParserRuleCall_3_3_0() { return cElseIfCallIfBodyParserRuleCall_3_3_0; }
		
		//('else' elseCall=IfBody)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseCall=IfBody
		public Assignment getElseCallAssignment_4_1() { return cElseCallAssignment_4_1; }
		
		//IfBody
		public RuleCall getElseCallIfBodyParserRuleCall_4_1_0() { return cElseCallIfBodyParserRuleCall_4_1_0; }
	}
	public class IfBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.IfBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCallCallParserRuleCall_0_0 = (RuleCall)cCallAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBodyBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//IfBody:
		//	call=Call | body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//call=Call | body=Body
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//call=Call
		public Assignment getCallAssignment_0() { return cCallAssignment_0; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_0_0() { return cCallCallParserRuleCall_0_0; }
		
		//body=Body
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_1_0() { return cBodyBodyParserRuleCall_1_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cActionsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cActionsActionsParserRuleCall_2_0_1_0 = (RuleCall)cActionsAssignment_2_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Call:
		//	name=LOWERCASE_ID ('(' parameters=ParameterList? ')')? (':' actions=Actions | ';')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=LOWERCASE_ID ('(' parameters=ParameterList? ')')? (':' actions=Actions | ';')?
		public Group getGroup() { return cGroup; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_0; }
		
		//('(' parameters=ParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//(':' actions=Actions | ';')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//':' actions=Actions
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }
		
		//actions=Actions
		public Assignment getActionsAssignment_2_0_1() { return cActionsAssignment_2_0_1; }
		
		//Actions
		public RuleCall getActionsActionsParserRuleCall_2_0_1_0() { return cActionsActionsParserRuleCall_2_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCallCallParserRuleCall_0_0 = (RuleCall)cCallAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBodyBodyParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Assignment cMatchAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMatchMatchParserRuleCall_2_0 = (RuleCall)cMatchAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMatchesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMatchesMatchParserRuleCall_3_1_0 = (RuleCall)cMatchesAssignment_3_1.eContents().get(0);
		private final Assignment cMatchesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMatchesMatchParserRuleCall_3_2_0 = (RuleCall)cMatchesAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Actions:
		//	call=Call | body=Body | match=Match |
		//	'(' matches+=Match matches+=Match* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//call=Call | body=Body | match=Match | '(' matches+=Match matches+=Match* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//call=Call
		public Assignment getCallAssignment_0() { return cCallAssignment_0; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_0_0() { return cCallCallParserRuleCall_0_0; }
		
		//body=Body
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_1_0() { return cBodyBodyParserRuleCall_1_0; }
		
		//match=Match
		public Assignment getMatchAssignment_2() { return cMatchAssignment_2; }
		
		//Match
		public RuleCall getMatchMatchParserRuleCall_2_0() { return cMatchMatchParserRuleCall_2_0; }
		
		//'(' matches+=Match matches+=Match* ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//matches+=Match
		public Assignment getMatchesAssignment_3_1() { return cMatchesAssignment_3_1; }
		
		//Match
		public RuleCall getMatchesMatchParserRuleCall_3_1_0() { return cMatchesMatchParserRuleCall_3_1_0; }
		
		//matches+=Match*
		public Assignment getMatchesAssignment_3_2() { return cMatchesAssignment_3_2; }
		
		//Match
		public RuleCall getMatchesMatchParserRuleCall_3_2_0() { return cMatchesMatchParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class MatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Match");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBodyAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_0_2_0 = (RuleCall)cBodyAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRegexpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRegexpREGEXPTerminalRuleCall_1_0_0 = (RuleCall)cRegexpAssignment_1_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBodyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_1_2_0 = (RuleCall)cBodyAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cObservableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cObservableOBSERVABLETerminalRuleCall_2_0_0 = (RuleCall)cObservableAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cLiteralAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralAssignment_3_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cBodyAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_3_2_0 = (RuleCall)cBodyAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTextAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cTextAssignment_4_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBodyAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_4_2_0 = (RuleCall)cBodyAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cArgumentsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgumentsArgumentDeclarationParserRuleCall_5_0_0 = (RuleCall)cArgumentsAssignment_5_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cBodyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_5_2_0 = (RuleCall)cBodyAssignment_5_2.eContents().get(0);
		
		//Match:
		//	id?=LOWERCASE_ID '->' body=Body | regexp?=REGEXP '->' body=Body | observable?=OBSERVABLE '->' body=Body |
		//	literal?=Literal '->' body=Body | text?=STRING '->' body=Body | arguments=ArgumentDeclaration '->' body=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//id?=LOWERCASE_ID '->' body=Body | regexp?=REGEXP '->' body=Body | observable?=OBSERVABLE '->' body=Body |
		//literal?=Literal '->' body=Body | text?=STRING '->' body=Body | arguments=ArgumentDeclaration '->' body=Body
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id?=LOWERCASE_ID '->' body=Body
		public Group getGroup_0() { return cGroup_0; }
		
		//id?=LOWERCASE_ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }
		
		//body=Body
		public Assignment getBodyAssignment_0_2() { return cBodyAssignment_0_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_0_2_0() { return cBodyBodyParserRuleCall_0_2_0; }
		
		//regexp?=REGEXP '->' body=Body
		public Group getGroup_1() { return cGroup_1; }
		
		//regexp?=REGEXP
		public Assignment getRegexpAssignment_1_0() { return cRegexpAssignment_1_0; }
		
		//REGEXP
		public RuleCall getRegexpREGEXPTerminalRuleCall_1_0_0() { return cRegexpREGEXPTerminalRuleCall_1_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//body=Body
		public Assignment getBodyAssignment_1_2() { return cBodyAssignment_1_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_1_2_0() { return cBodyBodyParserRuleCall_1_2_0; }
		
		//observable?=OBSERVABLE '->' body=Body
		public Group getGroup_2() { return cGroup_2; }
		
		//observable?=OBSERVABLE
		public Assignment getObservableAssignment_2_0() { return cObservableAssignment_2_0; }
		
		//OBSERVABLE
		public RuleCall getObservableOBSERVABLETerminalRuleCall_2_0_0() { return cObservableOBSERVABLETerminalRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//body=Body
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_2_2_0() { return cBodyBodyParserRuleCall_2_2_0; }
		
		//literal?=Literal '->' body=Body
		public Group getGroup_3() { return cGroup_3; }
		
		//literal?=Literal
		public Assignment getLiteralAssignment_3_0() { return cLiteralAssignment_3_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_3_0_0() { return cLiteralLiteralParserRuleCall_3_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_1() { return cHyphenMinusGreaterThanSignKeyword_3_1; }
		
		//body=Body
		public Assignment getBodyAssignment_3_2() { return cBodyAssignment_3_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_3_2_0() { return cBodyBodyParserRuleCall_3_2_0; }
		
		//text?=STRING '->' body=Body
		public Group getGroup_4() { return cGroup_4; }
		
		//text?=STRING
		public Assignment getTextAssignment_4_0() { return cTextAssignment_4_0; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_4_0_0() { return cTextSTRINGTerminalRuleCall_4_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_1() { return cHyphenMinusGreaterThanSignKeyword_4_1; }
		
		//body=Body
		public Assignment getBodyAssignment_4_2() { return cBodyAssignment_4_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_4_2_0() { return cBodyBodyParserRuleCall_4_2_0; }
		
		//arguments=ArgumentDeclaration '->' body=Body
		public Group getGroup_5() { return cGroup_5; }
		
		//arguments=ArgumentDeclaration
		public Assignment getArgumentsAssignment_5_0() { return cArgumentsAssignment_5_0; }
		
		//ArgumentDeclaration
		public RuleCall getArgumentsArgumentDeclarationParserRuleCall_5_0_0() { return cArgumentsArgumentDeclarationParserRuleCall_5_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_1() { return cHyphenMinusGreaterThanSignKeyword_5_1; }
		
		//body=Body
		public Assignment getBodyAssignment_5_2() { return cBodyAssignment_5_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_5_2_0() { return cBodyBodyParserRuleCall_5_2_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cNegativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_0_1_0 = (Keyword)cNegativeAssignment_0_1.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRealINTTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		private final Assignment cLongAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLongLKeyword_2_0 = (Keyword)cLongAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cDecimalAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cDecimalFullStopKeyword_3_0_0_0 = (Keyword)cDecimalAssignment_3_0_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_3_0_1_0 = (RuleCall)cDecimalPartAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cExponentialAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final Alternatives cExponentialAlternatives_4_0_0_0 = (Alternatives)cExponentialAssignment_4_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_0 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_4_0_0_0_1 = (Keyword)cExponentialAlternatives_4_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_4_0_1_0 = (Keyword)cAlternatives_4_0_1.eContents().get(0);
		private final Assignment cExpNegativeAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final Keyword cExpNegativeHyphenMinusKeyword_4_0_1_1_0 = (Keyword)cExpNegativeAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cExpAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cExpINTTerminalRuleCall_4_0_2_0 = (RuleCall)cExpAssignment_4_0_2.eContents().get(0);
		
		//Number:
		//	('+' | negative?='-')? => real=INT => long?='l'? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+'
		//	| expNegative?='-')? exp=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | negative?='-')? => real=INT => long?='l'? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
		//expNegative?='-')? exp=INT)?
		public Group getGroup() { return cGroup; }
		
		//('+' | negative?='-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//negative?='-'
		public Assignment getNegativeAssignment_0_1() { return cNegativeAssignment_0_1; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_0_1_0() { return cNegativeHyphenMinusKeyword_0_1_0; }
		
		//=> real=INT
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//INT
		public RuleCall getRealINTTerminalRuleCall_1_0() { return cRealINTTerminalRuleCall_1_0; }
		
		//=> long?='l'?
		public Assignment getLongAssignment_2() { return cLongAssignment_2; }
		
		//'l'
		public Keyword getLongLKeyword_2_0() { return cLongLKeyword_2_0; }
		
		//=> (decimal?='.' decimalPart=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//(decimal?='.' decimalPart=INT)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//decimal?='.'
		public Assignment getDecimalAssignment_3_0_0() { return cDecimalAssignment_3_0_0; }
		
		//'.'
		public Keyword getDecimalFullStopKeyword_3_0_0_0() { return cDecimalFullStopKeyword_3_0_0_0; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_3_0_1() { return cDecimalPartAssignment_3_0_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_3_0_1_0() { return cDecimalPartINTTerminalRuleCall_3_0_1_0; }
		
		//=> (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//(exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//exponential?=('e' | 'E')
		public Assignment getExponentialAssignment_4_0_0() { return cExponentialAssignment_4_0_0; }
		
		//('e' | 'E')
		public Alternatives getExponentialAlternatives_4_0_0_0() { return cExponentialAlternatives_4_0_0_0; }
		
		//'e'
		public Keyword getExponentialEKeyword_4_0_0_0_0() { return cExponentialEKeyword_4_0_0_0_0; }
		
		//'E'
		public Keyword getExponentialEKeyword_4_0_0_0_1() { return cExponentialEKeyword_4_0_0_0_1; }
		
		//('+' | expNegative?='-')?
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_0_1_0() { return cPlusSignKeyword_4_0_1_0; }
		
		//expNegative?='-'
		public Assignment getExpNegativeAssignment_4_0_1_1() { return cExpNegativeAssignment_4_0_1_1; }
		
		//'-'
		public Keyword getExpNegativeHyphenMinusKeyword_4_0_1_1_0() { return cExpNegativeHyphenMinusKeyword_4_0_1_1_0; }
		
		//exp=INT
		public Assignment getExpAssignment_4_0_2() { return cExpAssignment_4_0_2; }
		
		//INT
		public RuleCall getExpINTTerminalRuleCall_4_0_2_0() { return cExpINTTerminalRuleCall_4_0_2_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cYearAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cYearINTTerminalRuleCall_0_0 = (RuleCall)cYearAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cADKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cBcAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cBcBCKeyword_1_2_0 = (Keyword)cBcAssignment_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayINTTerminalRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHourAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_6_0_0 = (RuleCall)cHourAssignment_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMinAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMinINTTerminalRuleCall_6_2_0 = (RuleCall)cMinAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cColonKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cSecAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cSecINTTerminalRuleCall_6_3_1_0 = (RuleCall)cSecAssignment_6_3_1.eContents().get(0);
		private final Group cGroup_6_3_2 = (Group)cGroup_6_3.eContents().get(2);
		private final Keyword cFullStopKeyword_6_3_2_0 = (Keyword)cGroup_6_3_2.eContents().get(0);
		private final Assignment cMsAssignment_6_3_2_1 = (Assignment)cGroup_6_3_2.eContents().get(1);
		private final RuleCall cMsINTTerminalRuleCall_6_3_2_1_0 = (RuleCall)cMsAssignment_6_3_2_1.eContents().get(0);
		
		//Date:
		//	year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup() { return cGroup; }
		
		//year=INT
		public Assignment getYearAssignment_0() { return cYearAssignment_0; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_0_0() { return cYearINTTerminalRuleCall_0_0; }
		
		//('AD' | 'CE' | bc?='BC')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'AD'
		public Keyword getADKeyword_1_0() { return cADKeyword_1_0; }
		
		//'CE'
		public Keyword getCEKeyword_1_1() { return cCEKeyword_1_1; }
		
		//bc?='BC'
		public Assignment getBcAssignment_1_2() { return cBcAssignment_1_2; }
		
		//'BC'
		public Keyword getBcBCKeyword_1_2_0() { return cBcBCKeyword_1_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//month=INT
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_3_0() { return cMonthINTTerminalRuleCall_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//day=INT
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_5_0() { return cDayINTTerminalRuleCall_5_0; }
		
		//(hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//hour=INT
		public Assignment getHourAssignment_6_0() { return cHourAssignment_6_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_6_0_0() { return cHourINTTerminalRuleCall_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//min=INT
		public Assignment getMinAssignment_6_2() { return cMinAssignment_6_2; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_6_2_0() { return cMinINTTerminalRuleCall_6_2_0; }
		
		//(':' sec=INT ('.' ms=INT)?)?
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//':'
		public Keyword getColonKeyword_6_3_0() { return cColonKeyword_6_3_0; }
		
		//sec=INT
		public Assignment getSecAssignment_6_3_1() { return cSecAssignment_6_3_1; }
		
		//INT
		public RuleCall getSecINTTerminalRuleCall_6_3_1_0() { return cSecINTTerminalRuleCall_6_3_1_0; }
		
		//('.' ms=INT)?
		public Group getGroup_6_3_2() { return cGroup_6_3_2; }
		
		//'.'
		public Keyword getFullStopKeyword_6_3_2_0() { return cFullStopKeyword_6_3_2_0; }
		
		//ms=INT
		public Assignment getMsAssignment_6_3_2_1() { return cMsAssignment_6_3_2_1; }
		
		//INT
		public RuleCall getMsINTTerminalRuleCall_6_3_2_1_0() { return cMsINTTerminalRuleCall_6_3_2_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final PreambleElements pPreamble;
	private final DefinitionElements pDefinition;
	private final ArgumentDeclarationElements pArgumentDeclaration;
	private final ParameterListElements pParameterList;
	private final KeyValuePairElements pKeyValuePair;
	private final ValueElements pValue;
	private final LiteralElements pLiteral;
	private final BodyElements pBody;
	private final StatementElements pStatement;
	private final IfStatementElements pIfStatement;
	private final IfBodyElements pIfBody;
	private final CallElements pCall;
	private final ActionsElements pActions;
	private final MatchElements pMatch;
	private final NumberElements pNumber;
	private final DateElements pDate;
	private final TerminalRule tLOWERCASE_ID;
	private final TerminalRule tARGVALUE;
	private final TerminalRule tEXPR;
	private final TerminalRule tEMBEDDEDTEXT;
	private final TerminalRule tREGEXP;
	private final TerminalRule tOBSERVABLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KapGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPreamble = new PreambleElements();
		this.pDefinition = new DefinitionElements();
		this.pArgumentDeclaration = new ArgumentDeclarationElements();
		this.pParameterList = new ParameterListElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pValue = new ValueElements();
		this.pLiteral = new LiteralElements();
		this.pBody = new BodyElements();
		this.pStatement = new StatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pIfBody = new IfBodyElements();
		this.pCall = new CallElements();
		this.pActions = new ActionsElements();
		this.pMatch = new MatchElements();
		this.pNumber = new NumberElements();
		this.pDate = new DateElements();
		this.tLOWERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.LOWERCASE_ID");
		this.tARGVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.ARGVALUE");
		this.tEXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.EXPR");
		this.tEMBEDDEDTEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.EMBEDDEDTEXT");
		this.tREGEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.REGEXP");
		this.tOBSERVABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.Kap.OBSERVABLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.integratedmodelling.Kap".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} preamble=Preamble?
	//	definitions+=Definition*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Preamble:
	//	'name' name=LOWERCASE_ID (('worldview' worldview=LOWERCASE_ID)? & ('permissions' permissions=STRING)? & ('author'
	//	authors=STRING)? & ('version' version=LOWERCASE_ID)?);
	public PreambleElements getPreambleAccess() {
		return pPreamble;
	}
	
	public ParserRule getPreambleRule() {
		return getPreambleAccess().getRule();
	}
	
	//Definition:
	//	'def' name=LOWERCASE_ID arguments=ArgumentDeclaration? ':' body=Body;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//ArgumentDeclaration:
	//	{ArgumentDeclaration}
	//	'(' (ids+=LOWERCASE_ID (',' ids+=LOWERCASE_ID)*)? ')';
	public ArgumentDeclarationElements getArgumentDeclarationAccess() {
		return pArgumentDeclaration;
	}
	
	public ParserRule getArgumentDeclarationRule() {
		return getArgumentDeclarationAccess().getRule();
	}
	
	//ParameterList:
	//	pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//KeyValuePair:
	//	(name=LOWERCASE_ID (interactive?='=?' | '='))?
	//	value=Value;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//Value:
	//	argvalue=ARGVALUE | literal=Literal | id=LOWERCASE_ID | observable=OBSERVABLE | expression=EXPR // |
	//	//	table=LookupTable ???
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Literal:
	//	number=Number | from=Number 'to' to=Number | string=STRING | date=Date | boolean=('true' | 'false');
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//Body:
	//	{Body} list+=Statement list+=Statement* | isgroup?='(' (group+=Statement group+=Statement*)? ')';
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//Statement:
	//	call=Call | text=EMBEDDEDTEXT | if=IfStatement |
	//	'(' group+=Statement group+=Statement* ')'
	//	//	WhileStatement |
	//	//	DoStatement |
	//	//	ForStatement |
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'if' expression=EXPR body=IfBody ('else' 'if' elseIfExpression+=EXPR elseIfCall+=IfBody)* ('else' elseCall=IfBody)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//IfBody:
	//	call=Call | body=Body;
	public IfBodyElements getIfBodyAccess() {
		return pIfBody;
	}
	
	public ParserRule getIfBodyRule() {
		return getIfBodyAccess().getRule();
	}
	
	//Call:
	//	name=LOWERCASE_ID ('(' parameters=ParameterList? ')')? (':' actions=Actions | ';')?;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//Actions:
	//	call=Call | body=Body | match=Match |
	//	'(' matches+=Match matches+=Match* ')';
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//Match:
	//	id?=LOWERCASE_ID '->' body=Body | regexp?=REGEXP '->' body=Body | observable?=OBSERVABLE '->' body=Body |
	//	literal?=Literal '->' body=Body | text?=STRING '->' body=Body | arguments=ArgumentDeclaration '->' body=Body;
	public MatchElements getMatchAccess() {
		return pMatch;
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	//Number:
	//	('+' | negative?='-')? => real=INT => long?='l'? => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+'
	//	| expNegative?='-')? exp=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Date:
	//	year=INT ('AD' | 'CE' | bc?='BC')? '-' month=INT '-' day=INT (hour=INT ':' min=INT (':' sec=INT ('.' ms=INT)?)?)?;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//terminal LOWERCASE_ID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getLOWERCASE_IDRule() {
		return tLOWERCASE_ID;
	}
	
	//terminal ARGVALUE:
	//	'$' '0'..'9'*;
	public TerminalRule getARGVALUERule() {
		return tARGVALUE;
	}
	
	//terminal EXPR:
	//	'[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	public TerminalRule getEXPRRule() {
		return tEXPR;
	}
	
	//terminal EMBEDDEDTEXT:
	//	'%%%' (' '* '-')* '\r'->'%%%' (' '* '-')* '\r';
	public TerminalRule getEMBEDDEDTEXTRule() {
		return tEMBEDDEDTEXT;
	}
	
	//terminal REGEXP:
	//	'%' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '%' | '\\') | !('\\' | '%'))* '%';
	public TerminalRule getREGEXPRule() {
		return tREGEXP;
	}
	
	//terminal OBSERVABLE:
	//	'{' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '\\') | !('\\' | '}'))* '}';
	public TerminalRule getOBSERVABLERule() {
		return tOBSERVABLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
