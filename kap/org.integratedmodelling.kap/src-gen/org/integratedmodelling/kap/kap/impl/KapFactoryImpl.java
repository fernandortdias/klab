/**
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kap.kap.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.integratedmodelling.kap.kap.Actions;
import org.integratedmodelling.kap.kap.ArgumentDeclaration;
import org.integratedmodelling.kap.kap.Body;
import org.integratedmodelling.kap.kap.Call;
import org.integratedmodelling.kap.kap.Date;
import org.integratedmodelling.kap.kap.Definition;
import org.integratedmodelling.kap.kap.IfBody;
import org.integratedmodelling.kap.kap.IfStatement;
import org.integratedmodelling.kap.kap.KapFactory;
import org.integratedmodelling.kap.kap.KapPackage;
import org.integratedmodelling.kap.kap.KeyValuePair;
import org.integratedmodelling.kap.kap.Literal;
import org.integratedmodelling.kap.kap.Match;
import org.integratedmodelling.kap.kap.Model;
import org.integratedmodelling.kap.kap.ParameterList;
import org.integratedmodelling.kap.kap.Preamble;
import org.integratedmodelling.kap.kap.Statement;
import org.integratedmodelling.kap.kap.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class KapFactoryImpl extends EFactoryImpl implements KapFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static KapFactory init()
  {
    try
    {
      KapFactory theKapFactory = (KapFactory)EPackage.Registry.INSTANCE.getEFactory(KapPackage.eNS_URI);
      if (theKapFactory != null)
      {
        return theKapFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new KapFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KapFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case KapPackage.MODEL: return createModel();
      case KapPackage.PREAMBLE: return createPreamble();
      case KapPackage.DEFINITION: return createDefinition();
      case KapPackage.ARGUMENT_DECLARATION: return createArgumentDeclaration();
      case KapPackage.PARAMETER_LIST: return createParameterList();
      case KapPackage.KEY_VALUE_PAIR: return createKeyValuePair();
      case KapPackage.VALUE: return createValue();
      case KapPackage.LITERAL: return createLiteral();
      case KapPackage.BODY: return createBody();
      case KapPackage.STATEMENT: return createStatement();
      case KapPackage.IF_STATEMENT: return createIfStatement();
      case KapPackage.IF_BODY: return createIfBody();
      case KapPackage.CALL: return createCall();
      case KapPackage.ACTIONS: return createActions();
      case KapPackage.MATCH: return createMatch();
      case KapPackage.NUMBER: return createNumber();
      case KapPackage.DATE: return createDate();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Preamble createPreamble()
  {
    PreambleImpl preamble = new PreambleImpl();
    return preamble;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArgumentDeclaration createArgumentDeclaration()
  {
    ArgumentDeclarationImpl argumentDeclaration = new ArgumentDeclarationImpl();
    return argumentDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyValuePair createKeyValuePair()
  {
    KeyValuePairImpl keyValuePair = new KeyValuePairImpl();
    return keyValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfBody createIfBody()
  {
    IfBodyImpl ifBody = new IfBodyImpl();
    return ifBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Call createCall()
  {
    CallImpl call = new CallImpl();
    return call;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Actions createActions()
  {
    ActionsImpl actions = new ActionsImpl();
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Match createMatch()
  {
    MatchImpl match = new MatchImpl();
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.integratedmodelling.kap.kap.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Date createDate()
  {
    DateImpl date = new DateImpl();
    return date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KapPackage getKapPackage()
  {
    return (KapPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static KapPackage getPackage()
  {
    return KapPackage.eINSTANCE;
  }

} //KapFactoryImpl
