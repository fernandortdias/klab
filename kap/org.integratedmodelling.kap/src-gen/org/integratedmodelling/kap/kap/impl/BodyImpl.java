/**
 * generated by Xtext 2.19.0
 */
package org.integratedmodelling.kap.kap.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.integratedmodelling.kap.kap.Body;
import org.integratedmodelling.kap.kap.KapPackage;
import org.integratedmodelling.kap.kap.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kap.kap.impl.BodyImpl#getList <em>List</em>}</li>
 *   <li>{@link org.integratedmodelling.kap.kap.impl.BodyImpl#isIsgroup <em>Isgroup</em>}</li>
 *   <li>{@link org.integratedmodelling.kap.kap.impl.BodyImpl#getGroup <em>Group</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BodyImpl extends MinimalEObjectImpl.Container implements Body
{
  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected EList<Statement> list;

  /**
   * The default value of the '{@link #isIsgroup() <em>Isgroup</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsgroup()
   * @generated
   * @ordered
   */
  protected static final boolean ISGROUP_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsgroup() <em>Isgroup</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsgroup()
   * @generated
   * @ordered
   */
  protected boolean isgroup = ISGROUP_EDEFAULT;

  /**
   * The cached value of the '{@link #getGroup() <em>Group</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected EList<Statement> group;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KapPackage.Literals.BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getList()
  {
    if (list == null)
    {
      list = new EObjectContainmentEList<Statement>(Statement.class, this, KapPackage.BODY__LIST);
    }
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isIsgroup()
  {
    return isgroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsgroup(boolean newIsgroup)
  {
    boolean oldIsgroup = isgroup;
    isgroup = newIsgroup;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KapPackage.BODY__ISGROUP, oldIsgroup, isgroup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getGroup()
  {
    if (group == null)
    {
      group = new EObjectContainmentEList<Statement>(Statement.class, this, KapPackage.BODY__GROUP);
    }
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KapPackage.BODY__LIST:
        return ((InternalEList<?>)getList()).basicRemove(otherEnd, msgs);
      case KapPackage.BODY__GROUP:
        return ((InternalEList<?>)getGroup()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KapPackage.BODY__LIST:
        return getList();
      case KapPackage.BODY__ISGROUP:
        return isIsgroup();
      case KapPackage.BODY__GROUP:
        return getGroup();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KapPackage.BODY__LIST:
        getList().clear();
        getList().addAll((Collection<? extends Statement>)newValue);
        return;
      case KapPackage.BODY__ISGROUP:
        setIsgroup((Boolean)newValue);
        return;
      case KapPackage.BODY__GROUP:
        getGroup().clear();
        getGroup().addAll((Collection<? extends Statement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KapPackage.BODY__LIST:
        getList().clear();
        return;
      case KapPackage.BODY__ISGROUP:
        setIsgroup(ISGROUP_EDEFAULT);
        return;
      case KapPackage.BODY__GROUP:
        getGroup().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KapPackage.BODY__LIST:
        return list != null && !list.isEmpty();
      case KapPackage.BODY__ISGROUP:
        return isgroup != ISGROUP_EDEFAULT;
      case KapPackage.BODY__GROUP:
        return group != null && !group.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (isgroup: ");
    result.append(isgroup);
    result.append(')');
    return result.toString();
  }

} //BodyImpl
