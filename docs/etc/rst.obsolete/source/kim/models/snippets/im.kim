/**
 * The im (Integrated Modelling) ontology specifies semantics used everywhere. It only assumes
 * that the basic k.LAB knowledge namespaces (bfo and observation) are available. Some concepts 
 * are hard-wired to the system, so be very afraid of making any changes here.
 * 
 */
namespace im
	"The im (Integrated Modelling) ontology specifies semantics used everywhere in the IM worldview
	 and links im-based concepts to the fundamental ontology for use in derived products."
	version 1.0
	in domain root
	
	/*
	 * The 'resolve using' clause specifies the default resolution strategy used across sessions
	 * in this worldview. Each namespace can override its criteria using the same notation. Criteria with
 	 * the same rank will be aggregated (see the docs for details). This is an advanced operation with
 	 * deep consequences, and it should only be attempted when the details and the consequences are 
 	 * fully understood.
	 */
	resolve using {
		im:lexical-scope 1
		im:evidence 4
		im:semantic-concordance 2 
		im:trait-concordance 3 
		im:subjective-concordance 5
		im:scale-coverage 6
		im:scale-specificity 7 
		im:inherency 8
		im:scale-coherency 9
		im:network-remoteness 0
		im:reliability 100
	}
	

	/*
	 * Exports statements expose identifiers used within Java code to refer to concepts. As a 
	 * general rule, if a name is exported in the IM namespace, it's because some code needs
	 * it, and changing either the ID or the concept can result in major trouble. The identifiers
	 * must correspond to @export annotations in the same namespace. 
	 * 
	 * It is, in general, safe to change the exported concepts or their definition as long as they 
	 * can be used within the same contexts (i.e., as long as their core types don't change). 
	 * That's indeed the reason for the export mechanism to exist. 
	 * 
	 * TODO will need to export more fundamental knowledge as models become smarter. 
	 * 
	 * Don't touch these, either.
	 */
	with metadata {
		dc:creator "Ferdinando Villa (ferdinando.villa@bc3research.org)"
	}
;

/**
 * -------------------------------------------------------------------------------------------------
 * The core domain hierarchy. This structures the whole domain: namespaces are structured
 * following the hierarchy of the root domain. This is only allowed in the core domain
 * namespace.
 * 
 * The abstract nature of domains is important: the core observable for any observable is 
 * decided on its basis.
 * -------------------------------------------------------------------------------------------------
 */	
domain root 
 	"Domain definition for the entire project."
 	has children 
 		(abstract Physical
 			"The domain of anything that is observed as physical, both of natural origin and
			 built or generated by human action. This domain includes only physical things,
			 processes and their qualities, but not descriptions or explanations that are not
			 directly related to those."
 			has children
 				(Nature
 					"Domain of anything physical that is not built by humans, including
					 humans."
 				),
 				(Artifacts
 					"Domain of anything physical that is designed and built by humans."
 					uses authority NAICS
 				)
 		 ),
 		 (abstract Knowledge
 		 	"The domain of anything that derives from the observation of the physical
		     world. Includes rules, norms, cultural activities and all artifacts and types 
			 we use to describe and manage things."
 		 	has children
 		 		(abstract Culture
 		 			""
 		 			has children
 		 					Art,
 		 					Belief,
 		 					(abstract Technology
 		 						""
 		 						has children
 		 							( 
 		 								Agriculture
 		 								""
 		 								uses authority AGROVOC
 		 							),
 		 							Engineering
 		 					)
 		 		),
 		 		(abstract Norms
 		 					""
 		 				has children
 		 					Policy
 		 		),
				(abstract Explanations
 		 			"The domain of all rational theories, classifications and conceptual schemata that allow us to 
					 interpret the world. Should include everything that is observed as an interpretation
					 and nothing that is observed as an absolute. Allows to specialize worldviews of 
					 physical observables. Something that can be measured isn't an explanation; something
					 that classifies the physical world into hypothesized categories is."
 		 			has children
 		 					/*
	 		 				 * TODO Explanations isn't just sciences, but see if we want to classify sciences here (plenty of
 			 				 * work is available). I think it would be OK to do so and 
 			 				 * make things more recognizable to users. If done, it should
 		 					 * reflect the accepted wisdom as much as possible - see 
 		 					 * Wikipedia on science for example.
 		 					 */
 		 				(Geography
 		 					""
 		 				),
 		 				(Geology
 		 							""
 		 				),
 		 				(Pedology
 		 					""
 		 					uses authority WRB
 		 				),
 		 				(Biology
 		 					""
 		 					uses authority GBIF		
 		 				),
 		 				(Ecology
 		 							""
 		 				),
 		 				(Sociology
 		 					"" 
 		 				),
 		 				(Hydrology
 		 					"" 
 		 				),
 		 				(Chemistry
 		 					""
 		 					uses authority IUPAC
 		 				),
 		 				(Economics
 		 					""
 		 				),
 		 				(abstract InterdisciplinarySciences
 		 					has children
 		 						(EnvironmentalSocialScience
 		 							""
 		 						)
 		 				)
 		 				// ...
				)
 );


/**
 * These below establish the link between the core types and the worldview. After these
 * statements, the fundamental types will be switched to the worldview's version so that
 * they can be referenced in regular projects. 
 */

deniable attribute Animated
	"TODO";
	
abstract thing Subject
	is core observation:Subject
	has disjoint children
		(Thing
			"" 
			inherits not Animated
		)
;
		
abstract agent Agent
	"" 
	is core observation:Agent 
	inherits Animated
;

abstract process Process
	is core observation:Process;
	
abstract event Event
	is core observation:Event;
	
/*
 * How come I never needed this before.
 */
abstract attribute Relativity
	has children
		Relative,
		Absolute;

/**
 * Dimensional is for individuals and objects. Some may be observable in 3d. This identity is required for
 * observables whose dimensional or mass-related physical properties are being observed.
 */
abstract identity Dimensional
	has children
		(abstract Puntal),
		(abstract Lineal),
		(abstract Areal),
		(abstract Volumetric);

/**
 * Orientation, both absolute and relative, in space, time etc.
 */
abstract attribute Orientation 
	has children
		(abstract SpatialOrientation
			has children
				(abstract ObserverRelativeOrientation inherits Relative
					has disjoint children
						Right,
						Left,
						Front,
						Back,
						Up,
						Down	
				),
				(abstract EuclidianRelativeOrientation2D 
					"These concepts are purely 2d - nothing in English to denote the 'applicate'
					 third dimension of a 3D space."
					inherits Relative
					has disjoint children
						Vertical,
						Horizontal
				)
		),
		(abstract TemporalOrientation
			has disjoint children
				Previous,
				Successive
		);
/*
 * -------------------------------------------------------------------------------------------------
 * Mandatory re-exposure of all core concepts so they can be used in project when necessary.
 * TODO ENABLE SYNTAX BELOW
 * TODO ENSURE THAT CORE TYPES ARE REDEFINED FOR FUTURE CONCEPTS
 * -------------------------------------------------------------------------------------------------
 */
abstract area Area 
	is core observation:Area 
	requires identity Areal;

abstract length Length
	is core observation:Length 
	requires identity im:Dimensional
;
abstract quantity Quantity     
	is core observation:QuantifiableQuality;

abstract class    Type         
	is core observation:Type; 

abstract angle Angle 
	is core observation:Angle;

abstract priority Priority 
	is core observation:Priority;

abstract velocity Velocity 
	is core observation:Speed;

abstract money MonetaryValue 
	is core observation:MonetaryValue;

abstract energy Energy 
	is core observation:Energy;

abstract duration Duration 
	is core observation:Duration;

abstract temperature Temperature 
	is core observation:Temperature;

abstract mass Mass 
	is core observation:Mass 
	requires identity Volumetric;

abstract amount Amount
	is core observation:Amount
	requires identity Volumetric;

abstract volume Volume 
	is core observation:Volume
	requires identity im:Volumetric;
	
abstract weight Weight  
	is core observation:Weight  
	requires identity im:Volumetric;

abstract length Depth requires identity im:Dimensional;
abstract length Height 
	inherits Vertical requires identity Lineal;
abstract length Width inherits Horizontal requires identity im:Dimensional;
abstract quantity Frequency; // TODO CHECK

abstract duration Age;

// TODO check this out
//abstract quantity Concentration is Ratio;
abstract angle    Direction;
abstract volume   Capacity;

abstract quantity Resilience; // TODO CHECK NOTES
abstract quantity Complexity; // TODO CHECK NOTES
abstract quantity Security;   // TODO CHECK NOTES
	
@export("IM.CONCORDANCE")
abstract priority Concordance;
 
abstract quantity Diversity; 
abstract quantity Heterogeneity equals Diversity;
abstract quantity Preference /* TODO defines observation:? */ ;

//abstract quality Accessibility
//abstract quality Availability

//abstract process Utilization;
//abstract process Access;

@fixme("move to physical")
abstract area SpatialCoverage is Area;

abstract quantity Density 
	"Density of SUBJECTS in a context. Do not use this for densities that are just quantities
	 distributed over space: those are handled automatically by just using the quantities."
;

/*
 * Core PROCESSES
 */
@example("TODO")
abstract process TransitiveProcess 
	"Transitive processes happen in a subject directly affecting other observables (their objects)"
	is Process
	has children
		(
			@example("Transportation: you transport 'something' - the object - modifying its spatial extent.")
			abstract SpatialTransitiveProcess
				"A spatial transitive process affects the spatial extent of the object."
		)
//	has at least 1 observation:Observable for hasObject
;

abstract process IntransitiveProcess 
	"Intransitive processes happen in subjects only affecting the context itself"
	is Process
	has children
		(abstract SpatialIntransitiveProcess
			"A spatial transitive process affects the spatial extent of the context - e.g. movement."
			affects Space
			has children
				(Movement
					""
				)
		);
 	 
@todo("Document")
abstract process Transport 
	is TransitiveProcess
;

@todo("flesh out")
abstract event SystemEvent
	"These apply to any subject, as any subject is a system by definition."
	has children
		(	
			@note("any vulnerability should be state as probability of collapse")
			Collapse
				"The loss of identity for the system, after which it ceases to exist as such. In 
				 living systems, it's synonymous with death."
			);		

@todo("check - broadly based on SWEET's SystemStateChange, which is terrible")
abstract process SystemTransformation
	"Any endogenous transformation happening in a system and affecting its internal structure." 
	is IntransitiveProcess
	has children 
		(Coupling
			"Building of interactions. Can affect the mereological identity of the system by creating groups."
			creates Collapse
		),
		(Decoupling
			"Destruction of interactions. Can affect the mereological identity of the system by destroying groups."
			creates Collapse
			has children 
				(Dissipation
					"Proceeds through the collapse of parts of the system."
				)
		),
		(Displacement 
			"Akin to movement but causing the system to change because of that"
			// is Movement
			affects Space
		),
		(Growth
			 "Positive or negative growth makes a system acquire a larger size or functional throughput."
			creates Collapse
		),
		(Homeostasis
			"The active maintenance of the current status and/or behavior of the system"
		);

/*
 * -------------------------------------------------------------------------------------------------
 * Core TRAITS.
 * -------------------------------------------------------------------------------------------------
 * Basic trait classes. These are "adjectives" usually adopted to express semantic nuances that
 * make up for the lack of a domain extent or dimensionality in an extent. For example, to define
 * strata of the Earth when the view of space is 2-dimensional, or add temporal constraints (e.g.
 * August Precipitation) to context where time is implicit. With the intelligent use of traits,
 * we can avoid the explosion of ontologies and make model specs read much more intuitively and
 * clearly.
 * 
 * Concepts and observables can be composed with traits by simply listing trait concepts along with
 * the concepts. Any sequence of concepts used as an observable (without commas or anything) is 
 * interpreted as one observable concept with traits, and validated as such.
 * 
 * Traits can have traits too - which can only be done in a 'trait' spec as below, because
 * in observables, exactly one concept must not be a trait (it can then be followed by multiple
 * traits), and the only composition rule is that the main observable adopts all traits.
 * 
 * Classifications promote traits into qualities by using them to classify things.
 * 
 * Traits are assumed to be objective unless they inherit from SubjectiveInterpretation. Some things
 * can be done only with objective traits, e.g., you cannot observe a im:Low im.hydrology:Precipitation
 * concept, although you can 'classify im.hydrology:Precipitation by im:Level' as im:Low.
 * 
 * All or most of the traits here are incomplete attempts only. Also, it remains to be addressed
 * whether we can use exhaustive sets for subjective traits that may not be entirely used yet still overlap,
 * like when high/medium/low is matched to something that has intermediate levels. There should be a 
 * mechanism to prevent the use of obviously inappropriate 'unknowns' in such situations.
 */


abstract attribute RelationalAttribute
	"A relational attribute is conferred to an observable through a relationship with another."
//	describes observation:Relationship
	;

abstract identity IntendedPurpose 
	"Destination is the intended purpose of a subject or practice when created or internalized by
	 another. Appropriate subclasses of this trait can be added or conferred any time a subject or
	 process incarnates a purpose."
	applies to Subject, Process
;

@todo("document")
abstract attribute Wholeness 
	"Relates to parthood roles"
	has disjoint children
		(Partial),
		(Whole);

abstract attribute DynamicStateRelated
	"These attributes have to do with the comparison of a value along time. They are important
	 in dynamic models."
    applies to Quantity 
	// describes time?
	has disjoint children
		  (Changed 
			"Applied to a numeric quantity, it makes it a derivative. Dynamic models use this
			 automatically." 
			has disjoint children
				(Added 
					"Describes the positive component of change. Implies quantifiable."
					applies to Quantity
				),
				(Removed 
					"Describes the negative component of change. Implies quantifiable."
					applies to Quantity
				)
		),
		(Differential
			""
		)
;

deniable attribute Critical // TODO associate to Relevance?
;
	
@experimental("Still unsure on how to capture intermediate levels properly, and how to allow mediation of levels when
	extremes are used in annotation but the intermediate ones are not.")
abstract subjective ordering Coarseness 
	has children
		Fine,
		Coarse;
		
/**
 * 
 */
abstract attribute TemporalConsequentiality
	has disjoint children
		Former,
		Current,
		Latter;

/** 
 * May be physical or not.
 * */
abstract attribute Perviousness
	has children
		Pervious,
		Impervious;

/** 
 * May be physical or not.
 */
deniable attribute Visible;
		     
deniable attribute Natural
	"Natural or not is a dichotomy that describes a pristine, unmanipulated state for its
	 subject."
;
        
/*
 * Traits having to do with the ways particulars are distributed across extents of reference.
 */
abstract attribute OccurencePattern;

abstract attribute Regularity
      has disjoint children
           (Regular
               has children
                  Constant
           ),
           Irregular;

abstract attribute TemporalRepresentativity
    has disjoint children
        (Decadal),
        (Annual),
        (Weekly),
        (Daily),
        (Hourly);
        
/*
 * this to take care of all data where we look at a specific seasonal period independent 
 * of the time scale of the observation being made.
 * 
 * TODO these can be extended through thinklab metadata to link to selectors, so that
 * we could enable their discovery from temporal data not tagged with the traits.
 */
attribute Seasonal is TemporalRepresentativity
	has children
			Winter,
			Spring,
			Summer,
			Fall,
			RainySeason,
			DrySeason;
			
attribute Monthly is TemporalRepresentativity;
		
abstract attribute ConnectionDirection
	has children
		Incoming,
		Outgoing;

abstract attribute RelativeDistance 
	"";
	
abstract subjective attribute Closeness
	""
	is RelativeDistance
	has disjoint children 
		(Near
			""
		),
		(Far
			""
		);

subjective deniable attribute Local
	""
	is RelativeDistance;
	
/*
 * was subjective, but this prevents some objective usages (e.g. ephemeral streams)
 */
abstract ordering FrequencyOfOccurrence
	has children
		Ephemeral,
		Rare,
		Common,
		(@fixme Continuous);

/*
 * Finiteness (the property of having known or unknown bounds) in the most general sense. Finite means
 * that ALL bounds are known - something that can only grow "up", for example, is infinite.
 */
abstract attribute Finiteness
    has children
        Finite, 
        Infinite;

/*
 * Related to being appropriate for the context or inappropriate.
 */
abstract attribute Appropriateness 
	has children
		Appropriate,
		Inappropriate;

/*
 * Relative to the origin of something. Exogenous/endogenous is the obvious dichotomy but
 * I'm sure there's more. It's often used as a kind of appropriateness but that's not universal,
 * so I'd rather leave this independent. 
 */
abstract attribute Origin
	has children
		Endogenous,
		Exogenous;
		
abstract attribute Participation
	has children
		Active,
		Passive;		

abstract subjective ordering DamageLevel
	has children
		Pristine,
		SlightlyDamaged,
		ModeratelyDamaged,
		Compromised,
		Destroyed;

abstract attribute DamageRelated
	has children
		Damaged,
		Undamaged;

abstract ordering Difficulty
	has children
		Easy,
		Difficult,
		Impossible;
		
abstract attribute EvidenceOfTruth
	"Characterizes all degrees of evidence for a hypothesis."
	has children
		(Possible
			"Hypothesis cannot be dismissed based on reasoning although no documented
	         supporting observations exist."
		),
		(Hypothetical
			"Hypothesis can be made in support of an interpretation although no documented
	         supporting observations exist. Similarly valid counter-arguments may exist/"
		),
		(Likely
			"Good, reasoned arguments can be made in favor of hypothesis and no similar
	         arguments can be made against."
		),
		(Perceived
			"Perception supports evidence but there is no documentation"
		),
		(Observed
			"Degree of evidence is supported by documented observations, but still
			 evidence is indirect."
		),
		(Certain
			"No doubt can remain about evidence - self-evident or blatant truth"
		);

abstract attribute DataReduction
	"The type of data reduction or aggregation applied to the observation."
	has children	
		(Mean),
		(Minimum), 
		(Maximum),
		Normalized
;
		
abstract attribute AccomplishmentRelated
	"The type of accomplishment or non-accomplishment related to an outcome."
	has children
		Realized,
		Potential;		

/**
 * Mother of all Bayesian discretization. We can now use these in classifications without having
 * to create new concepts. An ordering is a specialized trait that has internal order.
 */
abstract subjective ordering Level
	"Two-level hierarchy for generic discretizations. Classes are used by other orderings. The 'parent'
	keyword locates the parent concepts in the second-level hierarchy in case all children are used."
    has children
        (Low
			has children
		        Minimal,
        		ExtremelyLow,
        		VeryLow,
        		ModeratelyLow
        	),
        Moderate,
	    (High
	    	has children 
		        ModeratelyHigh,
        		VeryHigh,
        		ExtremelyHigh,
        		Maximal
        );
 
abstract subjective ordering HeightLevel
	applies to /*(Areal or */ Volumetric /*) */ Subject
	has children 
		Short,
		(abstract VerticalHeightLevel
			describes Height
			has children 
				Tall
		),
		(abstract HorizontalLenghtLevel
			describes Length
			has children 
				Long
		)
;

abstract duration Periodicity
// FIXME change trait in something that describes periodic recurrence
	is Differential Duration of ${inherent extends Event};

abstract subjective ordering VolumeLevel
	describes Volume
	applies to Volumetric Subject
	has children 
		Small,
		Large;
        
/*
 * a level for bad things, can use same categories
 */
abstract subjective ordering Severity 
	is Level;

/**
 * Relevance is useful to tag thresholds,samples etc.. Must be fleshed out and I need to solve a
 * conflict when relevance is interpreted as a subjective ordering.
 */
deniable attribute Relevant;

/*
 * Traits having to do with the way things are measured or interpreted in ways that affect their
 * value.
 * 
 * TODO much to add here I'm sure.
 * TODO find another name for the generic trait
 */
abstract attribute MeasurementRelated
	has children
		Net, 
		Gross; 

abstract attribute Ability
	has disjoint children
		(abstract Able),
		(abstract Unable);

abstract attribute SystemDescription
	has children
		Structural,
		Functional;
		
/*
 * ----------------------------------------------------------------------------------- 
 * Dimensional specifications for all known extents in the worldview. The concrete classes
 * are used to translate the shape of URN-specified data into scale specifications.
 * ----------------------------------------------------------------------------------- 
 */
extent Multiplicity is core observation:Multiplicity
	"The simple arity of objects, i.e. their ability to be more than one. Necessary to interpret data shapes 
	 that include multiple objects, each with or without other extents."
	has 1 for observation:dimensionality; 

abstract extent Space is core observation:Space
	"Space in the IM worldview is 0, 1,2 or 3-dimensional, with implied traits that describe human
     perception and modalities of description proper of an Euclidean view of the world."
	has disjoint children (
		PuntalSpace
			""
			inherits Puntal
			has 0 for observation:dimensionality
			// TODO regular and irregular
	),
	(
		LinealSpace
			""
			inherits Lineal
			has 1 for observation:dimensionality
			// TODO regular and irregular
	),
	(
		abstract ArealSpace
			""
			inherits Areal
			has 2 for observation:dimensionality
			has children 
				(
					GridSpace 
						"A spatial extent observed as a regular grid of equal contiguous cells."
						inherits Regular
				),
				(
					VectorSpace 
						"A spatial extent observed as an irregular tessellation of contiguous polygons."
						inherits Irregular
				)
	),
	(
		abstract VolumetricSpace
			""
			inherits Volumetric
			has 3 for observation:dimensionality
			has children
				(
					VoxelSpace 
						"A spatial extent observed as a regular grid of equal contiguous volumes."
						inherits Regular
				),
				(
					PolyhedricalSpace 
						"A spatial extent observed as an irregular arrangement of contiguous polyhedra."
						inherits Irregular
				)
	)
;

abstract extent Time is core observation:Time
	"Time in the IM worldview is newtonian, independent from space and 1-dimensional, 
	 differentiated according to perceived regularity only."
	has 1 for observation:dimensionality
	has disjoint children (
		RegularTime
		"Regular time is arranged as a grid of equal contiguous durations." 
		inherits Regular
	),
	(
		IrregularTime 
		"Irregular time is observed as a contiguous sequence of intervals of possibly different duration, like in
		 the case of organisms that undergo dormancy."
		inherits Irregular
	)
;

/*
 * -------------------------------------------------------------------------------------------------
 * traits that define ranking criteria. 
 * 
 * Bounded/Unbounded status is
 * important - unbounded ranks cannot be aggregated in alternative
 * ranking schemata.
 */
 @todo("check - these should be data properties, not sure it still works")
 abstract attribute RankingCriterion
	has disjoint children 
		(abstract BoundedRankingCriterion),
		(abstract UnboundedRankingCriterion);

abstract quantity QualityRanking
	"Use one of the non-abstract ones to rank any quality status for a subject
     or process."
	has children
		(ConservationStatus
			"Use this one, or one of the more specific subclasses, qualified with the
			 identity of the subject."
			has children
				(FunctionalConservationStatus
					"Defines the conservation status of a system from a functional point of view - i.e. its
					 observable functions (processes) are preserved."
					 inherits Functional
				),			
				(StructuralConservationStatus
					"Defines the conservation status of a system from a structural point of view - i.e. its
					 observable parts and relationships are preserved."	
					 inherits Structural				
				),			
				(VisualConservationStatus
					"Defines the conservation status of a system from a visual point of view - i.e. its
					 visual appearance is preserved."
					// TODO perception traits?
				)			
		);

/**
 * The number of concepts identified with these is sadly overwhelming.
 */
abstract subjective ordering RankOrder
	has children
		Quaternary,
		Tertiary,
		Secondary,
		Primary;

/*
 * the actual usable criteria in order of default consideration - these are
 * computed by k.LAB and are used for ranking according to the ranking
 * strategy given below (or redefined by the user). The values for the traits below 
 * are not aggregated by default: a criterion is only considered when the
 * ranks according to the criteria preceding it are equal.
 */
attribute LexicalScope 
 	"Locality according to definition in code: highest when in 
	 an active scenario, high when in same namespace, lowest when
	 non-private in another namespace" 		
 	is BoundedRankingCriterion;

attribute SemanticScope
	"Describes the semantic distance between the desired concept and a compatible one. Zero
	 when the concepts are the same, it decreases with length of inheritance chain and number
	 of additional roles and traits adopted by one and not the other." 		
 	is BoundedRankingCriterion;

attribute TraitConcordance
	"The number of shared traits between the context of resolution
	 (subject semantics or model observable) and the target. Given
	 a maximum of 20 traits to keep it bounded." 		
 	is BoundedRankingCriterion;

attribute ScaleCoverage
	"Represents how extensive and detailed the coverage of the context's scale by
	 the target is, using the lowest coverage among all extents (space, time...). The
	 value includes both the extent covered and the resolution match/mismatch
   	 between the original and the target scales. It
 	 will be 0 when a matching model has no context specified." 		
 	is BoundedRankingCriterion;

attribute ScaleSpecificity
	"The ratio between the intersection of the target model's coverage with
	the context and the total coverage of the target. Highest when the
	model is more specific for the context. 0 when no context is given." 		
 	is BoundedRankingCriterion;

attribute Inherency
	"The property of a model to be specifically meant for the semantics
	of the context - i.e. elevation for a region vs. elevation in general.
	Highest in the two cases above when there is no semantic mediation; lower
	values exist when a translation is required (i.e. we must take a set of
	things and de-reify an attribute to a property) or when a process is
	computed." 		
 	is BoundedRankingCriterion;

attribute Evidence
	"Highest when the observation is closest to being 'evidence' by 
	representing actual observations (data); lower for computed values
	that don't depend on any other observation, lowest for unresolved models
	that need further resolution." 		
 	is BoundedRankingCriterion;

attribute NetworkRemoteness
	"Not used by default, refers to coming from a remote server vs. a
	local knowledge base. Add when network efficiency is an issue." 		
 	is BoundedRankingCriterion;

attribute ScaleCoherency
	"The amount of explicit extents (space, time...) shared in the context scale
	and the target's. Artificially bounded at 20." 		
 	is BoundedRankingCriterion;

attribute SubjectiveConcordance
	"The aggregation of the values of any ranking metadata that express subjective
	value judgments about a target model. These are normally im.reliability,
	im.openness and the like, but they can be defined at will. The values must
	be in the range [0 100] and the default given to a criterion that is in the
	ranking strategy but not in the model's metadata is 50." 		
 	is BoundedRankingCriterion;
 	
/*
 * -------------------------------------------------------------------------------------------------
 * CORE RELATIONSHIPS
 * -------------------------------------------------------------------------------------------------
 * Basic relationships. Some of the core relationships redefined to ensure their structural or
 * functional character is defined.
 * 
 * TODO very much at the beginning obviously.
 */ 	
abstract functional relationship TransferConnection 
 	"Relationship engendered by the transfer of anything from a subject to another. Base for all flows and interactions."
	links observation:Subject to observation:Subject // TODO add process through Transfer
 	has children 
 		(abstract EnergyTransferConnection),
 		(abstract MatterTransferConnection),
 	    (abstract InformationTransferConnection)
 ;
 
/* 
 * -------------------------------------------------------------------------------------------------
 * ANNOTATIONS for metadata.
 * -------------------------------------------------------------------------------------------------
 * extra doc: im:help supplements the Dublin Core documentation and is
 * recognized and automatically parsed as Wiki syntax.
 */
// annotation help with type text;

/* Annotations to override the ordering and aggregation of ranking criteria. These have
 * a default that is reflected in the order below. The default can be redefined
 * in thinklab.properties (only by who really knows why) and namespace-specific
 * orderings can be given along with metadata for the subjective properties
 * like im.reliability. In any redefined ordering, two properties that have
 * the same order will be aggregated using the default multiplicative schema
 * as long as their range is predefined (i.e., open boundary criteria cannot
 * be aggregated, but for now all criteria are bounded, some artificially by
 * imposing bounds that should be safe for hopefully all uses).
 * 
 * CAUTION: the default ranking order below is the subject of much experimentation
 * and may change without notice.
 * 
 * Also, subjective ranks depend on further information. By current default only im:reliability
 * is used, so the ranking is essentially the value of im:reliability for each model, or
 * 50 if none is given.
 * 
 * DO NOT CHANGE THESE IDs - they're hard-wired in thinklab's default ranking strategy.
 */
//abstract annotation rank-order
//	has children 
//		// 1 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		lexical-scope,
//		// 2 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		semantic-scope,
//		// 3 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		evidence,
//		// 4 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		trait-concordance,
//		// 5 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		subjective-concordance,
//		// 6 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		scale-coverage,
//		// 7 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		scale-specificity,
//		// 8 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		inherency,
//		// 9 by hard-coded defaults, overriddable in klab.properties and individually in each namespace
//		scale-coherency,
//		// 0 (not used) by default,  overriddable in klab.properties and individually in each namespace
//		network-remoteness;

/*
 * numeric (0-100) scores for subjective model ranking. Default values for these are set at
 * 50 whenever a value is not provided. By default only 'reliability' is used.
 */
//annotation openness    is rank-order with type integer;
//annotation reliability is rank-order with type integer;
//annotation peer-review is rank-order with type integer;
//annotation efficiency  is rank-order with type integer;

/*
 * annotations to report the current status of development and
 * testing of a model or dataset; roughly following Steve McConnel's 
 * Code Complete criteria. Expected to produce an estimate of
 * "value" with 0 being least and 100 being highest. Not used
 * by default.
 * 
 */
// annotation testing is rank-order with type integer;
// annotation status  is rank-order with type integer;
// annotation integration is rank-order with type integer;
// annotation design is rank-order with type integer;

/*
 * annotation properties for metadata, used by thinklab
 * to support classification and visualization
 */
//annotation numeric-encoding with type integer;
//annotation colormap with type text;
//annotation lower-bound with type double;
//annotation upper-bound with type double;
//annotation color with type text;

 /*
  * some basic annotations complementing Dublin core
  */
// annotation name /* is dc:name */ with type text;
// annotation label /* is dc:label */ with type text;
// annotation description /* is dc:comment */ with type text;
// annotation see-also /* is dc:seealso */ with type text;
 
 /*
  * distribution can be "public", "restricted" or "prohibited"
  */
// annotation distribution with type text
//    with metadata {
//        im:help 
//            "Objects can be tagged with the values public, restricted or prohibited"
//    };

/* ---------------------------------------------------------
 * Specially handled metadata that define roles for annotated objects
 * for improved usability.
 * ------------------------------------------------------- */
 
// annotation spatial-object with type boolean
// 	with metadata {
// 		im:help 
// 			"Objects tagged with 'im:spatial-object true' in their 
//			 metadata are included in the spatial editor's \"Object type\" selection
//			 menu, so that they can be created and used directly from
//		     an interactive spatial selection."
// 	};

/*
 * FIXME these should really go in im.landcover but I don't want to do the search/replace now.
 */
//annotation nlcd-2001-encoding with type integer;
//annotation globcover-encoding with type integer;
//annotation cci-encoding with type integer;
//annotation corine-encoding with type integer;
//annotation globeland-encoding with type integer;

abstract event Occurrence
	"The general event generated when a direct observation is made. k.LAB may generate one of
	 these, with the appropriate traits, any time a subject is newly acknowledged in a context.";

abstract event PeriodExpiration
	"These are intended not as units of measurement (not observables) but as observable
	 events, signaling the expiration of a given period of time. They can be observed
	 in time as dependencies, and models can be provided for them in scenarios. Traits
     can be used or conferred by processes to distinguish particular periods."
	has disjoint children
		(Second
			"The expiration of one second after a temporal point of reference."
		),
		(Minute
			"The expiration of one minute after a temporal point of reference."			
		),
		(Hour
			"The expiration of one hour after a temporal point of reference."			
		),
		(Day
			"The expiration of one day after a temporal point of reference."			
		),
		(Month
			"The expiration of one month after a temporal point of reference."
			has children
				January,
				February,
				March,
				April,
				May,
				June,
				July,
				August,			
				September,
				October,
				November,
				December			
		),
		(Season
			"The expiration of one season after a temporal point of reference."			
		),
		(Year
			"The expiration of one year after a temporal point of reference."			
		),
		(Decade
			"The expiration of ten years after a temporal point of reference."			
		),
		(Century
			"The expiration of one hundred years after a temporal point of reference."			
		),
		(Millennium
			"The expiration of one thousand years after a temporal point of reference."			
		);

/*
 * Core configurations - those things that aren't physical but we legitimately
 * conceptualize and give qualities to.
 */
abstract configuration Network
	"A network is a configuration of subjects connected by relationships."
	// TODO this shouldn't be necessary
	applies to observation:Subject
	has children
		(SpatialNetwork 
			""
			inherits Areal
		);
	
// configurations related to three different kinds of perception - direct, instrumental and cognitive. 
abstract configuration PerceivedConfiguration
	"A perceived configuration is set into existence through its direct human perception."
	applies to observation:Subject;	

abstract configuration MeasuredConfiguration
	"A measured configuration exists because its existence is exposed by a measurement instrument or process."
	applies to observation:Subject;	

abstract configuration InferredConfiguration
	"An inferred configuration exists because humans can logically infer its existence based on other observations."
	applies to observation:Subject;	

/**
 * Roles for machine learning. Most are abstract, meaning they need
 * to be explicitly assigned to dependencies or outputs in models, and 
 * cannot be directly attributed to observables.
 */

@export("IM.LEARNED_QUALITY")
abstract role LearnedQuality
	"A learned quality is learned by matching archetypes to explanatory qualities and using the resulting knowledge to
	 assess the value."
	 applies to observation:Quality, observation:Trait;

@export("IM.EXPLANATORY_QUALITY")
abstract role ExplanatoryQuality
	"Explanatory quality is a role that is given to any quality that contributes to making an observable
	 recognizable as a particular archetype."
	applies to observation:Quality;

@export("IM.ARCHETYPE")
abstract role Archetype
	"Anything with an Archetype role can be seen as a training observation for a learning
	 process. By mandating 1+ explanatory qualities, a classifier can be automatically 
	 trained on all subjects incarnating the role and used to attribute its identities to other
	 observables."
	 applies to observation:Subject, observation:Event
;

abstract role Throughput
	"The quantifiable amount of matter, energy or information transferred through a flow connection."
	applies to observation:QuantifiableQuality;
	

@export("IM.LEARNING_PROCESS")
role LearningProcess
	"A learning process uses archetypes and explanatory qualities to produce learned qualities."
	applies to observation:Process
	implies 
		at least 1 ExplanatoryQuality,
		at least 1 Archetype,
		at least 1 LearnedQuality
	;

/*
 * Those few things that describe the scientific process. For now, and hopefully
 * forever, just a generic "Assessment" to use for those processes that describe
 * OUR observation and are meant to produce the qualities we actually care about.
 */
process Assessment 
	"A process that represents observations made by the 'implicit' observer of 
	 the root context: the k.LAB user. Do not use without thinking hard first."
	 is TransitiveProcess;
	 
/**
 * Template inverts the default meaning of 'to', making it closer to the English form in
 * the specific concept and mandatory. So 'vulnerability of X to Y' or 'vulnerability to Y within X' 
 * are the only non-abstract forms accepted, and both translate to 'vulnerability of X from Y'. 
 */
abstract quality Vulnerability
	""
	is probability of (Collapse of ${context extends Subject} from ${caused extends im:Subject});

/**
 * Template inverts the default meaning of 'to', making it closer to the English form in
 * the specific concept and mandatory.
 *
 * The proportionality statement automatically adds the inverse one to the proportional
 * concept if it doesn't have it.
 * 
 * ACHTUNG quantity won't mix with a more specialized quantity. Should remove it from the
 * type when a more specialized one is added (using describes to keep it a quantity)? Or
 * just say quality - but that must then be checked for specialization, as "JUST" a quality
 * is an abstract notion.
 */
abstract quality Resistence
	"The process leading to the return of previous conditions after perturbation in a system"
	is probability of (no Collapse of ${context extends Subject} from ${caused process})
	decreases with Vulnerability;
	
//abstract quantity Resilience
//	describes im:Duration of Recovery;
	
/**
 * ----------------------------------------------------------------------------------
 * No-nos that will appear in searches in red to discourage from common bad practices. 
 * Nothing is also produced by the reasoner when concepts are semantically inconsistent.
 * ----------------------------------------------------------------------------------
 */
thing MixedAnything 
 	"Never create a concept that contains 'mixed' anything. Unspecific classes can usually be represented through 
	 intermediate levels of abstraction - a parent class effectively represent a possible
	 'mix' of its children. In case the mixing is due to scaling - e.g. classifying a trait that can appear
	 in multiple incarnation within the same state - you can use 'all' and name the alternatives."
 	is nothing;

thing VariousThings 
 	"Never create a concept that stands for one or more undefined concept. They don't mean anything
	 except in your mind. Unspecific classes can usually be represented through 
	 intermediate levels of abstraction - a parent class effectively represent a possible
	 'mix' of its children."
 	is nothing;

thing OtherThings 
 	"Never create a concept that catches 'other' unspecified meanings. Use levels
	 of abstraction or remember that you can use 'no/not' on deniable attributes or
	 observabilities to mean 'anything but'."
 	is nothing; 	

quality Change 
 	"Amount of change is not a quality. Use traits in the im:DynamicStateRelated family to specify 
	 that what you are observing is change rather than absolute value, after accurately defining the
	 changed observable."
 	is nothing;
 	
thing NotSomething 
 	"Never create a concept that negates another. You can use deniable
	 attributes or deny the observability of any observable using 'no/not'. If this doesn't 
	 work for your application reconsider your logics."
 	is nothing;

attribute Average
	"Don't use 'average' - you can usually omit the adjective as 'average' reflects a maximum
	 likelihood estimate. If it is necessary to carry the identity of having been averaged, use 
	 im:Mean instead."
	is nothing;
	
attribute MeanAnything
	"Be careful to only use im:Mean when you need to convey that something has been averaged. The
	 mean is a maximum likelihood estimator - which means you can usually dispense with that when
	 you only need to convey the meaning of an observation, unless the 'mean' character is relevant
     to the semantics."
	is nothing;
	
attribute Total
	"Whatever does not adopt another data reduction trait can be interpreted as 'total' without
	 any further qualification. Usually you only say 'total' with respect to something else that
     is partial, and concepts can not change their meaning based on other concepts."
	 is nothing;

attribute Actual
	"If it's actual it is just what it is - there is no need to distinguish it from potential for
	 example. Actual is the natural state of anything observed. Don't use actual."
	 is nothing;

attribute NoAttribute 
 	"Never create a concept that negates another. You can use deniable
	 attributes or deny the observability of any observable using 'no/not'. If this doesn't 
	 work for your application reconsider your logics."
 	is nothing;

quality Sustainability
	"You don't need a quality named 'sustainability'. Sustainability is the continuing likelihood of
	 preserving identity, i.e. avoiding system collapse. Annotate the kind of collapse events 
	 that would cause that, and observe the probability of events of that class not happening."
	is nothing;

//quality Vulnerability
//	"You don't need a generic quality named 'vulnerability'. Vulnerability is the likelihood of
//	 succumbing to an event that destroys identity, i.e. system collapse. Annotate the kind of 
//	 collapse event it's about and observe its probability instead."
//	is nothing;
	
quality Risk
	"Risks are normally just probabilities, so use a probability instead of introducing a new
	 term."
	 is nothing;
	 
quality Suitability
	"Suitability is a value. Use value semantics after understanding which values you are describing."
	 is nothing;	 
	 
quality PotentialOfX
	"Potentials are usually just probabilities, so use a probability instead of introducing a new
	 term. If you are looking for a known physical property, look for its known name instead."
	 is nothing;