/**
 * generated by Xtext 2.9.1
 */
package org.integratedmodelling.kim.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.integratedmodelling.kim.kim.Model;
import org.integratedmodelling.kim.model.Kim;
import org.integratedmodelling.kim.model.KimNamespace;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class KimGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      EList<EObject> _contents = resource.getContents();
      for (final EObject r : _contents) {
        if (((r instanceof Model) && (((Model) r).getNamespace() != null))) {
          KimNamespace namespace = Kim.INSTANCE.getNamespace(((Model) r).getNamespace(), true);
          if ((namespace != null)) {
            Kim.Validator _validator = Kim.INSTANCE.getValidator();
            boolean _tripleNotEquals = (_validator != null);
            if (_tripleNotEquals) {
              Kim.INSTANCE.getValidator().synchronizeNamespaceWithRuntime(namespace);
            }
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof Throwable) {
        final Throwable e = (Throwable)_t;
        String _message = e.getMessage();
        String _plus = ("PPORCO: " + _message);
        InputOutput.<String>println(_plus);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
