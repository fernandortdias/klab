/*
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.integratedmodelling.kim.kdecl.Concept
import org.integratedmodelling.kim.kdecl.ConceptDeclaration
import org.integratedmodelling.kim.kdecl.ObservableSemantics
import org.integratedmodelling.kim.services.KnowledgeDeclarationGrammarAccess

class KnowledgeDeclarationFormatter extends AbstractFormatter2 {
	
	@Inject extension KnowledgeDeclarationGrammarAccess

	def dispatch void format(ObservableSemantics observableSemantics, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		observableSemantics.getDeclaration.format;
		observableSemantics.getBy.format;
		observableSemantics.getUnit.format;
		observableSemantics.getCurrency.format;
		observableSemantics.getFrom.format;
		observableSemantics.getTo.format;
	}

	def dispatch void format(ConceptDeclaration conceptDeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Concept concept : conceptDeclaration.getMain()) {
			concept.format;
		}
		conceptDeclaration.getInherency.format;
		conceptDeclaration.getContext.format;
	}
	
	// TODO: implement for Concept, UnitElement, Unit
}
