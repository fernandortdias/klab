/*
 * generated by Xtext 2.9.1
 */
package org.integratedmodelling.kim

import com.google.inject.Binder
import com.google.inject.name.Names
import org.eclipse.xtext.resource.IContainer
import org.eclipse.xtext.resource.containers.StateBasedContainerManager
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.SimpleLocalScopeProvider
import org.integratedmodelling.kim.scoping.KimGlobalScopeProvider
import org.integratedmodelling.kim.scoping.KimScopeProvider

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class KimRuntimeModule extends AbstractKimRuntimeModule {

//    override bindIGlobalScopeProvider() {
//        ImportUriGlobalScopeProvide
//    }

    override configureIScopeProviderDelegate(Binder binder) {
        binder.bind(IScopeProvider).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
            .to(SimpleLocalScopeProvider);

    }

	override Class<? extends IScopeProvider> bindIScopeProvider() {
		return typeof(KimScopeProvider);
	}

	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return typeof(KimGlobalScopeProvider);
	}

	override Class<? extends IContainer.Manager> bindIContainer$Manager() {
		return StateBasedContainerManager
	}

//	override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
//		return typeof(KimQualifiedNameProvider);
//	}

//	override Class<? extends ILinkingService> bindILinkingService() {
//		return typeof(KimLinkingService);
//	}

	override configure(Binder binder) {
		super.configure(binder)
	}

}
