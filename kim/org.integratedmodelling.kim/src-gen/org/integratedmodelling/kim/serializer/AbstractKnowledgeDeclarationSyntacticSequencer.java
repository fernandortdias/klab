/*
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.integratedmodelling.kim.services.KnowledgeDeclarationGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractKnowledgeDeclarationSyntacticSequencer extends AbstractSyntacticSequencer {

	protected KnowledgeDeclarationGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0;
	protected AbstractElementAlias match_IdentityRequirement_AttributeKeyword_0_0_1_or_ExtentKeyword_0_0_3_or_IdentityKeyword_0_0_0_or_RealmKeyword_0_0_2;
	protected AbstractElementAlias match_Number_PlusSignKeyword_0_0_q;
	protected AbstractElementAlias match_Number_PlusSignKeyword_3_0_1_0_q;
	protected AbstractElementAlias match_ObservableSemantics_RequiredKeyword_3_5_1_a;
	protected AbstractElementAlias match_RestrictionDefinition_AsKeyword_0_3_0_1_or_ForKeyword_0_3_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (KnowledgeDeclarationGrammarAccess) access;
		match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_1_2()));
		match_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConceptAccess().getFromKeyword_3_1_1()), new TokenAlias(false, false, grammarAccess.getConceptAccess().getToKeyword_3_1_0()));
		match_IdentityRequirement_AttributeKeyword_0_0_1_or_ExtentKeyword_0_0_3_or_IdentityKeyword_0_0_0_or_RealmKeyword_0_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIdentityRequirementAccess().getAttributeKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getIdentityRequirementAccess().getExtentKeyword_0_0_3()), new TokenAlias(false, false, grammarAccess.getIdentityRequirementAccess().getIdentityKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getIdentityRequirementAccess().getRealmKeyword_0_0_2()));
		match_Number_PlusSignKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getNumberAccess().getPlusSignKeyword_0_0());
		match_Number_PlusSignKeyword_3_0_1_0_q = new TokenAlias(false, true, grammarAccess.getNumberAccess().getPlusSignKeyword_3_0_1_0());
		match_ObservableSemantics_RequiredKeyword_3_5_1_a = new TokenAlias(true, true, grammarAccess.getObservableSemanticsAccess().getRequiredKeyword_3_5_1());
		match_RestrictionDefinition_AsKeyword_0_3_0_1_or_ForKeyword_0_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRestrictionDefinitionAccess().getAsKeyword_0_3_0_1()), new TokenAlias(false, false, grammarAccess.getRestrictionDefinitionAccess().getForKeyword_0_3_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0.equals(syntax))
				emit_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IdentityRequirement_AttributeKeyword_0_0_1_or_ExtentKeyword_0_0_3_or_IdentityKeyword_0_0_0_or_RealmKeyword_0_0_2.equals(syntax))
				emit_IdentityRequirement_AttributeKeyword_0_0_1_or_ExtentKeyword_0_0_3_or_IdentityKeyword_0_0_0_or_RealmKeyword_0_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Number_PlusSignKeyword_0_0_q.equals(syntax))
				emit_Number_PlusSignKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Number_PlusSignKeyword_3_0_1_0_q.equals(syntax))
				emit_Number_PlusSignKeyword_3_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObservableSemantics_RequiredKeyword_3_5_1_a.equals(syntax))
				emit_ObservableSemantics_RequiredKeyword_3_5_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RestrictionDefinition_AsKeyword_0_3_0_1_or_ForKeyword_0_3_0_0.equals(syntax))
				emit_RestrictionDefinition_AsKeyword_0_3_0_1_or_ForKeyword_0_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ANNOTATION_ID (ambiguity) (rule end)
	 */
	protected void emit_Annotation___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'to' | 'from'
	 *
	 * This ambiguous syntax occurs at:
	 *     distance?='distance' (ambiguity) concept=SimpleConceptDeclaration
	 */
	protected void emit_Concept_FromKeyword_3_1_1_or_ToKeyword_3_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'identity' | 'attribute' | 'realm' | 'extent'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) identities+=ConceptDeclaration
	 */
	protected void emit_IdentityRequirement_AttributeKeyword_0_0_1_or_ExtentKeyword_0_0_3_or_IdentityKeyword_0_0_0_or_RealmKeyword_0_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) real=INT
	 */
	protected void emit_Number_PlusSignKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     exponential?='E' (ambiguity) exp=INT
	 *     exponential?='e' (ambiguity) exp=INT
	 */
	protected void emit_Number_PlusSignKeyword_3_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'required'*
	 *
	 * This ambiguous syntax occurs at:
	 *     accordingTo=PropertyId (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     accordingTo=PropertyId (ambiguity) 'as' role=Concept
	 *     accordingTo=PropertyId (ambiguity) 'by' by=Concept
	 *     accordingTo=PropertyId (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     accordingTo=PropertyId (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     accordingTo=PropertyId (ambiguity) 'in' currency=Currency
	 *     accordingTo=PropertyId (ambiguity) 'in' unit=Unit
	 *     accordingTo=PropertyId (ambiguity) 'named' name=LOWERCASE_ID
	 *     accordingTo=PropertyId (ambiguity) 'per' unit=Unit
	 *     accordingTo=PropertyId (ambiguity) (rule end)
	 *     accordingTo=PropertyId (ambiguity) from=Number
	 *     accordingTo=PropertyId (ambiguity) optional?='optional'
	 *     by=Concept (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     by=Concept (ambiguity) 'as' role=Concept
	 *     by=Concept (ambiguity) 'by' by=Concept
	 *     by=Concept (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     by=Concept (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     by=Concept (ambiguity) 'in' currency=Currency
	 *     by=Concept (ambiguity) 'in' unit=Unit
	 *     by=Concept (ambiguity) 'named' name=LOWERCASE_ID
	 *     by=Concept (ambiguity) 'per' unit=Unit
	 *     by=Concept (ambiguity) (rule end)
	 *     by=Concept (ambiguity) from=Number
	 *     by=Concept (ambiguity) optional?='optional'
	 *     currency=Currency (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     currency=Currency (ambiguity) 'as' role=Concept
	 *     currency=Currency (ambiguity) 'by' by=Concept
	 *     currency=Currency (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     currency=Currency (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     currency=Currency (ambiguity) 'in' currency=Currency
	 *     currency=Currency (ambiguity) 'in' unit=Unit
	 *     currency=Currency (ambiguity) 'named' name=LOWERCASE_ID
	 *     currency=Currency (ambiguity) 'per' unit=Unit
	 *     currency=Currency (ambiguity) (rule end)
	 *     currency=Currency (ambiguity) from=Number
	 *     currency=Currency (ambiguity) optional?='optional'
	 *     declaration=ConceptDeclaration (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     declaration=ConceptDeclaration (ambiguity) 'as' role=Concept
	 *     declaration=ConceptDeclaration (ambiguity) 'by' by=Concept
	 *     declaration=ConceptDeclaration (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     declaration=ConceptDeclaration (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     declaration=ConceptDeclaration (ambiguity) 'in' currency=Currency
	 *     declaration=ConceptDeclaration (ambiguity) 'in' unit=Unit
	 *     declaration=ConceptDeclaration (ambiguity) 'named' name=LOWERCASE_ID
	 *     declaration=ConceptDeclaration (ambiguity) 'per' unit=Unit
	 *     declaration=ConceptDeclaration (ambiguity) (rule end)
	 *     declaration=ConceptDeclaration (ambiguity) from=Number
	 *     declaration=ConceptDeclaration (ambiguity) optional?='optional'
	 *     downTo=CAMELCASE_ID (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     downTo=CAMELCASE_ID (ambiguity) 'as' role=Concept
	 *     downTo=CAMELCASE_ID (ambiguity) 'by' by=Concept
	 *     downTo=CAMELCASE_ID (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     downTo=CAMELCASE_ID (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     downTo=CAMELCASE_ID (ambiguity) 'in' currency=Currency
	 *     downTo=CAMELCASE_ID (ambiguity) 'in' unit=Unit
	 *     downTo=CAMELCASE_ID (ambiguity) 'named' name=LOWERCASE_ID
	 *     downTo=CAMELCASE_ID (ambiguity) 'per' unit=Unit
	 *     downTo=CAMELCASE_ID (ambiguity) (rule end)
	 *     downTo=CAMELCASE_ID (ambiguity) from=Number
	 *     downTo=CAMELCASE_ID (ambiguity) optional?='optional'
	 *     downTo=NamespaceId (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     downTo=NamespaceId (ambiguity) 'as' role=Concept
	 *     downTo=NamespaceId (ambiguity) 'by' by=Concept
	 *     downTo=NamespaceId (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     downTo=NamespaceId (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     downTo=NamespaceId (ambiguity) 'in' currency=Currency
	 *     downTo=NamespaceId (ambiguity) 'in' unit=Unit
	 *     downTo=NamespaceId (ambiguity) 'named' name=LOWERCASE_ID
	 *     downTo=NamespaceId (ambiguity) 'per' unit=Unit
	 *     downTo=NamespaceId (ambiguity) (rule end)
	 *     downTo=NamespaceId (ambiguity) from=Number
	 *     downTo=NamespaceId (ambiguity) optional?='optional'
	 *     name=LOWERCASE_ID (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     name=LOWERCASE_ID (ambiguity) 'as' role=Concept
	 *     name=LOWERCASE_ID (ambiguity) 'by' by=Concept
	 *     name=LOWERCASE_ID (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     name=LOWERCASE_ID (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     name=LOWERCASE_ID (ambiguity) 'in' currency=Currency
	 *     name=LOWERCASE_ID (ambiguity) 'in' unit=Unit
	 *     name=LOWERCASE_ID (ambiguity) 'named' name=LOWERCASE_ID
	 *     name=LOWERCASE_ID (ambiguity) 'per' unit=Unit
	 *     name=LOWERCASE_ID (ambiguity) (rule end)
	 *     name=LOWERCASE_ID (ambiguity) from=Number
	 *     name=LOWERCASE_ID (ambiguity) optional?='optional'
	 *     optional?='optional' (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     optional?='optional' (ambiguity) 'as' role=Concept
	 *     optional?='optional' (ambiguity) 'by' by=Concept
	 *     optional?='optional' (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     optional?='optional' (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     optional?='optional' (ambiguity) 'in' currency=Currency
	 *     optional?='optional' (ambiguity) 'in' unit=Unit
	 *     optional?='optional' (ambiguity) 'named' name=LOWERCASE_ID
	 *     optional?='optional' (ambiguity) 'per' unit=Unit
	 *     optional?='optional' (ambiguity) (rule end)
	 *     optional?='optional' (ambiguity) from=Number
	 *     optional?='optional' (ambiguity) optional?='optional'
	 *     role=Concept (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     role=Concept (ambiguity) 'as' role=Concept
	 *     role=Concept (ambiguity) 'by' by=Concept
	 *     role=Concept (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     role=Concept (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     role=Concept (ambiguity) 'in' currency=Currency
	 *     role=Concept (ambiguity) 'in' unit=Unit
	 *     role=Concept (ambiguity) 'named' name=LOWERCASE_ID
	 *     role=Concept (ambiguity) 'per' unit=Unit
	 *     role=Concept (ambiguity) (rule end)
	 *     role=Concept (ambiguity) from=Number
	 *     role=Concept (ambiguity) optional?='optional'
	 *     to=Number (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     to=Number (ambiguity) 'as' role=Concept
	 *     to=Number (ambiguity) 'by' by=Concept
	 *     to=Number (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     to=Number (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     to=Number (ambiguity) 'in' currency=Currency
	 *     to=Number (ambiguity) 'in' unit=Unit
	 *     to=Number (ambiguity) 'named' name=LOWERCASE_ID
	 *     to=Number (ambiguity) 'per' unit=Unit
	 *     to=Number (ambiguity) (rule end)
	 *     to=Number (ambiguity) from=Number
	 *     to=Number (ambiguity) optional?='optional'
	 *     unit=Unit (ambiguity) 'according' 'to' accordingTo=PropertyId
	 *     unit=Unit (ambiguity) 'as' role=Concept
	 *     unit=Unit (ambiguity) 'by' by=Concept
	 *     unit=Unit (ambiguity) 'down' 'to' downTo=CAMELCASE_ID
	 *     unit=Unit (ambiguity) 'down' 'to' downTo=NamespaceId
	 *     unit=Unit (ambiguity) 'in' currency=Currency
	 *     unit=Unit (ambiguity) 'in' unit=Unit
	 *     unit=Unit (ambiguity) 'named' name=LOWERCASE_ID
	 *     unit=Unit (ambiguity) 'per' unit=Unit
	 *     unit=Unit (ambiguity) (rule end)
	 *     unit=Unit (ambiguity) from=Number
	 *     unit=Unit (ambiguity) optional?='optional'
	 */
	protected void emit_ObservableSemantics_RequiredKeyword_3_5_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'for' | 'as'
	 *
	 * This ambiguous syntax occurs at:
	 *     dataType=DataType (ambiguity) subject=ConceptDeclaration
	 *     source=ConceptDeclaration (ambiguity) subject=ConceptDeclaration
	 *     traitType=ConceptDeclaration (ambiguity) subject=ConceptDeclaration
	 */
	protected void emit_RestrictionDefinition_AsKeyword_0_3_0_1_or_ForKeyword_0_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
