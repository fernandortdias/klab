/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.kim.impl;

import java.util.Collection;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.integratedmodelling.kim.kim.ActionSpecification;
import org.integratedmodelling.kim.kim.Function;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.Metadata;
import org.integratedmodelling.kim.kim.ObservableSemantics;
import org.integratedmodelling.kim.kim.ObserveStatementBody;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Observe Statement Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getDocstring <em>Docstring</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getParents <em>Parents</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getObservations <em>Observations</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getStates <em>States</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getAccessor <em>Accessor</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getMetadata <em>Metadata</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObserveStatementBodyImpl#getDocumentation <em>Documentation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObserveStatementBodyImpl extends MinimalEObjectImpl.Container implements ObserveStatementBody
{
  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected ObservableSemantics concept;

  /**
   * The default value of the '{@link #getDocstring() <em>Docstring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocstring()
   * @generated
   * @ordered
   */
  protected static final String DOCSTRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDocstring() <em>Docstring</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocstring()
   * @generated
   * @ordered
   */
  protected String docstring = DOCSTRING_EDEFAULT;

  /**
   * The cached value of the '{@link #getParents() <em>Parents</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParents()
   * @generated
   * @ordered
   */
  protected EList<String> parents;

  /**
   * The cached value of the '{@link #getObservations() <em>Observations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservations()
   * @generated
   * @ordered
   */
  protected EList<ObserveStatementBody> observations;

  /**
   * The cached value of the '{@link #getStates() <em>States</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStates()
   * @generated
   * @ordered
   */
  protected EList<ObservableSemantics> states;

  /**
   * The cached value of the '{@link #getAccessor() <em>Accessor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccessor()
   * @generated
   * @ordered
   */
  protected Function accessor;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<ActionSpecification> actions;

  /**
   * The cached value of the '{@link #getMetadata() <em>Metadata</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetadata()
   * @generated
   * @ordered
   */
  protected Metadata metadata;

  /**
   * The cached value of the '{@link #getDocumentation() <em>Documentation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDocumentation()
   * @generated
   * @ordered
   */
  protected Metadata documentation;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObserveStatementBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.OBSERVE_STATEMENT_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObservableSemantics getConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConcept(ObservableSemantics newConcept, NotificationChain msgs)
  {
    ObservableSemantics oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT, oldConcept, newConcept);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConcept(ObservableSemantics newConcept)
  {
    if (newConcept != concept)
    {
      NotificationChain msgs = null;
      if (concept != null)
        msgs = ((InternalEObject)concept).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT, null, msgs);
      if (newConcept != null)
        msgs = ((InternalEObject)newConcept).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT, null, msgs);
      msgs = basicSetConcept(newConcept, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT, newConcept, newConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDocstring()
  {
    return docstring;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDocstring(String newDocstring)
  {
    String oldDocstring = docstring;
    docstring = newDocstring;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__DOCSTRING, oldDocstring, docstring));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getParents()
  {
    if (parents == null)
    {
      parents = new EDataTypeEList<String>(String.class, this, KimPackage.OBSERVE_STATEMENT_BODY__PARENTS);
    }
    return parents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ObserveStatementBody> getObservations()
  {
    if (observations == null)
    {
      observations = new EObjectContainmentEList<ObserveStatementBody>(ObserveStatementBody.class, this, KimPackage.OBSERVE_STATEMENT_BODY__OBSERVATIONS);
    }
    return observations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ObservableSemantics> getStates()
  {
    if (states == null)
    {
      states = new EObjectContainmentEList<ObservableSemantics>(ObservableSemantics.class, this, KimPackage.OBSERVE_STATEMENT_BODY__STATES);
    }
    return states;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function getAccessor()
  {
    return accessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAccessor(Function newAccessor, NotificationChain msgs)
  {
    Function oldAccessor = accessor;
    accessor = newAccessor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR, oldAccessor, newAccessor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAccessor(Function newAccessor)
  {
    if (newAccessor != accessor)
    {
      NotificationChain msgs = null;
      if (accessor != null)
        msgs = ((InternalEObject)accessor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR, null, msgs);
      if (newAccessor != null)
        msgs = ((InternalEObject)newAccessor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR, null, msgs);
      msgs = basicSetAccessor(newAccessor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR, newAccessor, newAccessor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ActionSpecification> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectContainmentEList<ActionSpecification>(ActionSpecification.class, this, KimPackage.OBSERVE_STATEMENT_BODY__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metadata getMetadata()
  {
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMetadata(Metadata newMetadata, NotificationChain msgs)
  {
    Metadata oldMetadata = metadata;
    metadata = newMetadata;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__METADATA, oldMetadata, newMetadata);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMetadata(Metadata newMetadata)
  {
    if (newMetadata != metadata)
    {
      NotificationChain msgs = null;
      if (metadata != null)
        msgs = ((InternalEObject)metadata).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__METADATA, null, msgs);
      if (newMetadata != null)
        msgs = ((InternalEObject)newMetadata).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__METADATA, null, msgs);
      msgs = basicSetMetadata(newMetadata, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__METADATA, newMetadata, newMetadata));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metadata getDocumentation()
  {
    return documentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDocumentation(Metadata newDocumentation, NotificationChain msgs)
  {
    Metadata oldDocumentation = documentation;
    documentation = newDocumentation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION, oldDocumentation, newDocumentation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDocumentation(Metadata newDocumentation)
  {
    if (newDocumentation != documentation)
    {
      NotificationChain msgs = null;
      if (documentation != null)
        msgs = ((InternalEObject)documentation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION, null, msgs);
      if (newDocumentation != null)
        msgs = ((InternalEObject)newDocumentation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION, null, msgs);
      msgs = basicSetDocumentation(newDocumentation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION, newDocumentation, newDocumentation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT:
        return basicSetConcept(null, msgs);
      case KimPackage.OBSERVE_STATEMENT_BODY__OBSERVATIONS:
        return ((InternalEList<?>)getObservations()).basicRemove(otherEnd, msgs);
      case KimPackage.OBSERVE_STATEMENT_BODY__STATES:
        return ((InternalEList<?>)getStates()).basicRemove(otherEnd, msgs);
      case KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR:
        return basicSetAccessor(null, msgs);
      case KimPackage.OBSERVE_STATEMENT_BODY__ACTIONS:
        return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
      case KimPackage.OBSERVE_STATEMENT_BODY__METADATA:
        return basicSetMetadata(null, msgs);
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION:
        return basicSetDocumentation(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT:
        return getConcept();
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCSTRING:
        return getDocstring();
      case KimPackage.OBSERVE_STATEMENT_BODY__PARENTS:
        return getParents();
      case KimPackage.OBSERVE_STATEMENT_BODY__OBSERVATIONS:
        return getObservations();
      case KimPackage.OBSERVE_STATEMENT_BODY__STATES:
        return getStates();
      case KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR:
        return getAccessor();
      case KimPackage.OBSERVE_STATEMENT_BODY__ACTIONS:
        return getActions();
      case KimPackage.OBSERVE_STATEMENT_BODY__METADATA:
        return getMetadata();
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION:
        return getDocumentation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT:
        setConcept((ObservableSemantics)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCSTRING:
        setDocstring((String)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__PARENTS:
        getParents().clear();
        getParents().addAll((Collection<? extends String>)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__OBSERVATIONS:
        getObservations().clear();
        getObservations().addAll((Collection<? extends ObserveStatementBody>)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__STATES:
        getStates().clear();
        getStates().addAll((Collection<? extends ObservableSemantics>)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR:
        setAccessor((Function)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends ActionSpecification>)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__METADATA:
        setMetadata((Metadata)newValue);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION:
        setDocumentation((Metadata)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT:
        setConcept((ObservableSemantics)null);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCSTRING:
        setDocstring(DOCSTRING_EDEFAULT);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__PARENTS:
        getParents().clear();
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__OBSERVATIONS:
        getObservations().clear();
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__STATES:
        getStates().clear();
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR:
        setAccessor((Function)null);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__ACTIONS:
        getActions().clear();
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__METADATA:
        setMetadata((Metadata)null);
        return;
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION:
        setDocumentation((Metadata)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVE_STATEMENT_BODY__CONCEPT:
        return concept != null;
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCSTRING:
        return DOCSTRING_EDEFAULT == null ? docstring != null : !DOCSTRING_EDEFAULT.equals(docstring);
      case KimPackage.OBSERVE_STATEMENT_BODY__PARENTS:
        return parents != null && !parents.isEmpty();
      case KimPackage.OBSERVE_STATEMENT_BODY__OBSERVATIONS:
        return observations != null && !observations.isEmpty();
      case KimPackage.OBSERVE_STATEMENT_BODY__STATES:
        return states != null && !states.isEmpty();
      case KimPackage.OBSERVE_STATEMENT_BODY__ACCESSOR:
        return accessor != null;
      case KimPackage.OBSERVE_STATEMENT_BODY__ACTIONS:
        return actions != null && !actions.isEmpty();
      case KimPackage.OBSERVE_STATEMENT_BODY__METADATA:
        return metadata != null;
      case KimPackage.OBSERVE_STATEMENT_BODY__DOCUMENTATION:
        return documentation != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (docstring: ");
    result.append(docstring);
    result.append(", parents: ");
    result.append(parents);
    result.append(')');
    return result.toString();
  }

} //ObserveStatementBodyImpl
