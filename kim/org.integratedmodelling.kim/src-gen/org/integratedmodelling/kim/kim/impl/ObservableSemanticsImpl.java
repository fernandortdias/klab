/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.kim.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kim.Concept;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.Currency;
import org.integratedmodelling.kim.kim.KimPackage;
import org.integratedmodelling.kim.kim.ObservableSemantics;
import org.integratedmodelling.kim.kim.Unit;
import org.integratedmodelling.kim.kim.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Observable Semantics</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#isGeneric <em>Generic</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getBy <em>By</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getDownTo <em>Down To</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getRole <em>Role</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getAccordingTo <em>According To</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getUnit <em>Unit</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getCurrency <em>Currency</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#isOptional <em>Optional</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getFrom <em>From</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getTo <em>To</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kim.impl.ObservableSemanticsImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObservableSemanticsImpl extends MinimalEObjectImpl.Container implements ObservableSemantics
{
  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected Value value;

  /**
   * The default value of the '{@link #isGeneric() <em>Generic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isGeneric()
   * @generated
   * @ordered
   */
  protected static final boolean GENERIC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isGeneric() <em>Generic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isGeneric()
   * @generated
   * @ordered
   */
  protected boolean generic = GENERIC_EDEFAULT;

  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration declaration;

  /**
   * The cached value of the '{@link #getBy() <em>By</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBy()
   * @generated
   * @ordered
   */
  protected Concept by;

  /**
   * The cached value of the '{@link #getDownTo() <em>Down To</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDownTo()
   * @generated
   * @ordered
   */
  protected Concept downTo;

  /**
   * The cached value of the '{@link #getRole() <em>Role</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRole()
   * @generated
   * @ordered
   */
  protected Concept role;

  /**
   * The default value of the '{@link #getAccordingTo() <em>According To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccordingTo()
   * @generated
   * @ordered
   */
  protected static final String ACCORDING_TO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAccordingTo() <em>According To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAccordingTo()
   * @generated
   * @ordered
   */
  protected String accordingTo = ACCORDING_TO_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected Unit unit;

  /**
   * The cached value of the '{@link #getCurrency() <em>Currency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCurrency()
   * @generated
   * @ordered
   */
  protected Currency currency;

  /**
   * The default value of the '{@link #isOptional() <em>Optional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOptional()
   * @generated
   * @ordered
   */
  protected static final boolean OPTIONAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOptional() <em>Optional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOptional()
   * @generated
   * @ordered
   */
  protected boolean optional = OPTIONAL_EDEFAULT;

  /**
   * The cached value of the '{@link #getFrom() <em>From</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kim.kim.Number from;

  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected org.integratedmodelling.kim.kim.Number to;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObservableSemanticsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KimPackage.Literals.OBSERVABLE_SEMANTICS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValue(Value newValue, NotificationChain msgs)
  {
    Value oldValue = value;
    value = newValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__VALUE, oldValue, newValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValue(Value newValue)
  {
    if (newValue != value)
    {
      NotificationChain msgs = null;
      if (value != null)
        msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__VALUE, null, msgs);
      if (newValue != null)
        msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__VALUE, null, msgs);
      msgs = basicSetValue(newValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__VALUE, newValue, newValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isGeneric()
  {
    return generic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGeneric(boolean newGeneric)
  {
    boolean oldGeneric = generic;
    generic = newGeneric;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__GENERIC, oldGeneric, generic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptDeclaration getDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclaration(ConceptDeclaration newDeclaration, NotificationChain msgs)
  {
    ConceptDeclaration oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__DECLARATION, oldDeclaration, newDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclaration(ConceptDeclaration newDeclaration)
  {
    if (newDeclaration != declaration)
    {
      NotificationChain msgs = null;
      if (declaration != null)
        msgs = ((InternalEObject)declaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__DECLARATION, null, msgs);
      if (newDeclaration != null)
        msgs = ((InternalEObject)newDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__DECLARATION, null, msgs);
      msgs = basicSetDeclaration(newDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__DECLARATION, newDeclaration, newDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept getBy()
  {
    return by;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBy(Concept newBy, NotificationChain msgs)
  {
    Concept oldBy = by;
    by = newBy;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__BY, oldBy, newBy);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBy(Concept newBy)
  {
    if (newBy != by)
    {
      NotificationChain msgs = null;
      if (by != null)
        msgs = ((InternalEObject)by).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__BY, null, msgs);
      if (newBy != null)
        msgs = ((InternalEObject)newBy).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__BY, null, msgs);
      msgs = basicSetBy(newBy, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__BY, newBy, newBy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept getDownTo()
  {
    return downTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDownTo(Concept newDownTo, NotificationChain msgs)
  {
    Concept oldDownTo = downTo;
    downTo = newDownTo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO, oldDownTo, newDownTo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDownTo(Concept newDownTo)
  {
    if (newDownTo != downTo)
    {
      NotificationChain msgs = null;
      if (downTo != null)
        msgs = ((InternalEObject)downTo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO, null, msgs);
      if (newDownTo != null)
        msgs = ((InternalEObject)newDownTo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO, null, msgs);
      msgs = basicSetDownTo(newDownTo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO, newDownTo, newDownTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept getRole()
  {
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRole(Concept newRole, NotificationChain msgs)
  {
    Concept oldRole = role;
    role = newRole;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__ROLE, oldRole, newRole);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRole(Concept newRole)
  {
    if (newRole != role)
    {
      NotificationChain msgs = null;
      if (role != null)
        msgs = ((InternalEObject)role).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__ROLE, null, msgs);
      if (newRole != null)
        msgs = ((InternalEObject)newRole).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__ROLE, null, msgs);
      msgs = basicSetRole(newRole, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__ROLE, newRole, newRole));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAccordingTo()
  {
    return accordingTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAccordingTo(String newAccordingTo)
  {
    String oldAccordingTo = accordingTo;
    accordingTo = newAccordingTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__ACCORDING_TO, oldAccordingTo, accordingTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Unit getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnit(Unit newUnit, NotificationChain msgs)
  {
    Unit oldUnit = unit;
    unit = newUnit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__UNIT, oldUnit, newUnit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnit(Unit newUnit)
  {
    if (newUnit != unit)
    {
      NotificationChain msgs = null;
      if (unit != null)
        msgs = ((InternalEObject)unit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__UNIT, null, msgs);
      if (newUnit != null)
        msgs = ((InternalEObject)newUnit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__UNIT, null, msgs);
      msgs = basicSetUnit(newUnit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__UNIT, newUnit, newUnit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Currency getCurrency()
  {
    return currency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCurrency(Currency newCurrency, NotificationChain msgs)
  {
    Currency oldCurrency = currency;
    currency = newCurrency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__CURRENCY, oldCurrency, newCurrency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCurrency(Currency newCurrency)
  {
    if (newCurrency != currency)
    {
      NotificationChain msgs = null;
      if (currency != null)
        msgs = ((InternalEObject)currency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__CURRENCY, null, msgs);
      if (newCurrency != null)
        msgs = ((InternalEObject)newCurrency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__CURRENCY, null, msgs);
      msgs = basicSetCurrency(newCurrency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__CURRENCY, newCurrency, newCurrency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isOptional()
  {
    return optional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOptional(boolean newOptional)
  {
    boolean oldOptional = optional;
    optional = newOptional;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__OPTIONAL, oldOptional, optional));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.integratedmodelling.kim.kim.Number getFrom()
  {
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFrom(org.integratedmodelling.kim.kim.Number newFrom, NotificationChain msgs)
  {
    org.integratedmodelling.kim.kim.Number oldFrom = from;
    from = newFrom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__FROM, oldFrom, newFrom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFrom(org.integratedmodelling.kim.kim.Number newFrom)
  {
    if (newFrom != from)
    {
      NotificationChain msgs = null;
      if (from != null)
        msgs = ((InternalEObject)from).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__FROM, null, msgs);
      if (newFrom != null)
        msgs = ((InternalEObject)newFrom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__FROM, null, msgs);
      msgs = basicSetFrom(newFrom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__FROM, newFrom, newFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.integratedmodelling.kim.kim.Number getTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTo(org.integratedmodelling.kim.kim.Number newTo, NotificationChain msgs)
  {
    org.integratedmodelling.kim.kim.Number oldTo = to;
    to = newTo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__TO, oldTo, newTo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTo(org.integratedmodelling.kim.kim.Number newTo)
  {
    if (newTo != to)
    {
      NotificationChain msgs = null;
      if (to != null)
        msgs = ((InternalEObject)to).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__TO, null, msgs);
      if (newTo != null)
        msgs = ((InternalEObject)newTo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KimPackage.OBSERVABLE_SEMANTICS__TO, null, msgs);
      msgs = basicSetTo(newTo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__TO, newTo, newTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KimPackage.OBSERVABLE_SEMANTICS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVABLE_SEMANTICS__VALUE:
        return basicSetValue(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        return basicSetDeclaration(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__BY:
        return basicSetBy(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO:
        return basicSetDownTo(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__ROLE:
        return basicSetRole(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__UNIT:
        return basicSetUnit(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        return basicSetCurrency(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__FROM:
        return basicSetFrom(null, msgs);
      case KimPackage.OBSERVABLE_SEMANTICS__TO:
        return basicSetTo(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVABLE_SEMANTICS__VALUE:
        return getValue();
      case KimPackage.OBSERVABLE_SEMANTICS__GENERIC:
        return isGeneric();
      case KimPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        return getDeclaration();
      case KimPackage.OBSERVABLE_SEMANTICS__BY:
        return getBy();
      case KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO:
        return getDownTo();
      case KimPackage.OBSERVABLE_SEMANTICS__ROLE:
        return getRole();
      case KimPackage.OBSERVABLE_SEMANTICS__ACCORDING_TO:
        return getAccordingTo();
      case KimPackage.OBSERVABLE_SEMANTICS__UNIT:
        return getUnit();
      case KimPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        return getCurrency();
      case KimPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        return isOptional();
      case KimPackage.OBSERVABLE_SEMANTICS__FROM:
        return getFrom();
      case KimPackage.OBSERVABLE_SEMANTICS__TO:
        return getTo();
      case KimPackage.OBSERVABLE_SEMANTICS__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVABLE_SEMANTICS__VALUE:
        setValue((Value)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__GENERIC:
        setGeneric((Boolean)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        setDeclaration((ConceptDeclaration)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__BY:
        setBy((Concept)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO:
        setDownTo((Concept)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__ROLE:
        setRole((Concept)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__ACCORDING_TO:
        setAccordingTo((String)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__UNIT:
        setUnit((Unit)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        setCurrency((Currency)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        setOptional((Boolean)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__FROM:
        setFrom((org.integratedmodelling.kim.kim.Number)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__TO:
        setTo((org.integratedmodelling.kim.kim.Number)newValue);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVABLE_SEMANTICS__VALUE:
        setValue((Value)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__GENERIC:
        setGeneric(GENERIC_EDEFAULT);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        setDeclaration((ConceptDeclaration)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__BY:
        setBy((Concept)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO:
        setDownTo((Concept)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__ROLE:
        setRole((Concept)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__ACCORDING_TO:
        setAccordingTo(ACCORDING_TO_EDEFAULT);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__UNIT:
        setUnit((Unit)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        setCurrency((Currency)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        setOptional(OPTIONAL_EDEFAULT);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__FROM:
        setFrom((org.integratedmodelling.kim.kim.Number)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__TO:
        setTo((org.integratedmodelling.kim.kim.Number)null);
        return;
      case KimPackage.OBSERVABLE_SEMANTICS__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KimPackage.OBSERVABLE_SEMANTICS__VALUE:
        return value != null;
      case KimPackage.OBSERVABLE_SEMANTICS__GENERIC:
        return generic != GENERIC_EDEFAULT;
      case KimPackage.OBSERVABLE_SEMANTICS__DECLARATION:
        return declaration != null;
      case KimPackage.OBSERVABLE_SEMANTICS__BY:
        return by != null;
      case KimPackage.OBSERVABLE_SEMANTICS__DOWN_TO:
        return downTo != null;
      case KimPackage.OBSERVABLE_SEMANTICS__ROLE:
        return role != null;
      case KimPackage.OBSERVABLE_SEMANTICS__ACCORDING_TO:
        return ACCORDING_TO_EDEFAULT == null ? accordingTo != null : !ACCORDING_TO_EDEFAULT.equals(accordingTo);
      case KimPackage.OBSERVABLE_SEMANTICS__UNIT:
        return unit != null;
      case KimPackage.OBSERVABLE_SEMANTICS__CURRENCY:
        return currency != null;
      case KimPackage.OBSERVABLE_SEMANTICS__OPTIONAL:
        return optional != OPTIONAL_EDEFAULT;
      case KimPackage.OBSERVABLE_SEMANTICS__FROM:
        return from != null;
      case KimPackage.OBSERVABLE_SEMANTICS__TO:
        return to != null;
      case KimPackage.OBSERVABLE_SEMANTICS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (generic: ");
    result.append(generic);
    result.append(", accordingTo: ");
    result.append(accordingTo);
    result.append(", optional: ");
    result.append(optional);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ObservableSemanticsImpl
