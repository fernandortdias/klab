/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.kim.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.integratedmodelling.kim.kim.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.integratedmodelling.kim.kim.KimPackage
 * @generated
 */
public class KimAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static KimPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KimAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = KimPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KimSwitch<Adapter> modelSwitch =
    new KimSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseModelStatement(ModelStatement object)
      {
        return createModelStatementAdapter();
      }
      @Override
      public Adapter caseModelBodyStatement(ModelBodyStatement object)
      {
        return createModelBodyStatementAdapter();
      }
      @Override
      public Adapter caseContextualization(Contextualization object)
      {
        return createContextualizationAdapter();
      }
      @Override
      public Adapter caseAttributeIdentifier(AttributeIdentifier object)
      {
        return createAttributeIdentifierAdapter();
      }
      @Override
      public Adapter caseClassification(Classification object)
      {
        return createClassificationAdapter();
      }
      @Override
      public Adapter caseClassifier(Classifier object)
      {
        return createClassifierAdapter();
      }
      @Override
      public Adapter caseClassifierRHS(ClassifierRHS object)
      {
        return createClassifierRHSAdapter();
      }
      @Override
      public Adapter caseLookupTable(LookupTable object)
      {
        return createLookupTableAdapter();
      }
      @Override
      public Adapter caseUrn(Urn object)
      {
        return createUrnAdapter();
      }
      @Override
      public Adapter caseTable(Table object)
      {
        return createTableAdapter();
      }
      @Override
      public Adapter caseActionSpecification(ActionSpecification object)
      {
        return createActionSpecificationAdapter();
      }
      @Override
      public Adapter caseFunctionOrID(FunctionOrID object)
      {
        return createFunctionOrIDAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseValueAssignment(ValueAssignment object)
      {
        return createValueAssignmentAdapter();
      }
      @Override
      public Adapter caseComputableValue(ComputableValue object)
      {
        return createComputableValueAdapter();
      }
      @Override
      public Adapter caseNamespace(Namespace object)
      {
        return createNamespaceAdapter();
      }
      @Override
      public Adapter caseOwlImport(OwlImport object)
      {
        return createOwlImportAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseObserveStatement(ObserveStatement object)
      {
        return createObserveStatementAdapter();
      }
      @Override
      public Adapter caseObserveStatementBody(ObserveStatementBody object)
      {
        return createObserveStatementBodyAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ModelStatement <em>Model Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ModelStatement
   * @generated
   */
  public Adapter createModelStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ModelBodyStatement <em>Model Body Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ModelBodyStatement
   * @generated
   */
  public Adapter createModelBodyStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Contextualization <em>Contextualization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Contextualization
   * @generated
   */
  public Adapter createContextualizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.AttributeIdentifier <em>Attribute Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.AttributeIdentifier
   * @generated
   */
  public Adapter createAttributeIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Classification <em>Classification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Classification
   * @generated
   */
  public Adapter createClassificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Classifier <em>Classifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Classifier
   * @generated
   */
  public Adapter createClassifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ClassifierRHS <em>Classifier RHS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ClassifierRHS
   * @generated
   */
  public Adapter createClassifierRHSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.LookupTable <em>Lookup Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.LookupTable
   * @generated
   */
  public Adapter createLookupTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Urn <em>Urn</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Urn
   * @generated
   */
  public Adapter createUrnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Table <em>Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Table
   * @generated
   */
  public Adapter createTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ActionSpecification <em>Action Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ActionSpecification
   * @generated
   */
  public Adapter createActionSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.FunctionOrID <em>Function Or ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.FunctionOrID
   * @generated
   */
  public Adapter createFunctionOrIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ValueAssignment <em>Value Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ValueAssignment
   * @generated
   */
  public Adapter createValueAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ComputableValue <em>Computable Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ComputableValue
   * @generated
   */
  public Adapter createComputableValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Namespace <em>Namespace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Namespace
   * @generated
   */
  public Adapter createNamespaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.OwlImport <em>Owl Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.OwlImport
   * @generated
   */
  public Adapter createOwlImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ObserveStatement <em>Observe Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ObserveStatement
   * @generated
   */
  public Adapter createObserveStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.integratedmodelling.kim.kim.ObserveStatementBody <em>Observe Statement Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.integratedmodelling.kim.kim.ObserveStatementBody
   * @generated
   */
  public Adapter createObserveStatementBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //KimAdapterFactory
