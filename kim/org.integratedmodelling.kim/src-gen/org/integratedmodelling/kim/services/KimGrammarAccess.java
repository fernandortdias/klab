/*
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KimGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceNamespaceParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		///*
		// * Namespace is mandatory at the beginning, but we check at validation of the
		// * first statement, so that special situations such as empty files or default 
		// * namespaces are possible without errors.
		// */
		//Model:
		//	namespace=Namespace? statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//namespace=Namespace? statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//namespace=Namespace?
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }
		
		//Namespace
		public RuleCall getNamespaceNamespaceParserRuleCall_0_0() { return cNamespaceNamespaceParserRuleCall_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConceptStatementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConceptStatementConceptStatementParserRuleCall_0_0_0 = (RuleCall)cConceptStatementAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cModelStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cModelStatementModelStatementParserRuleCall_1_0_0 = (RuleCall)cModelStatementAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cUpperOntologyStatementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cUpperOntologyStatementUpperOntologyDefinitionParserRuleCall_2_0_0 = (RuleCall)cUpperOntologyStatementAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cObserveStatementAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cObserveStatementObserveStatementParserRuleCall_3_0_0 = (RuleCall)cObserveStatementAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Statement:
		//	conceptStatement=ConceptStatement ';' | modelStatement=ModelStatement ';' |
		//	upperOntologyStatement=UpperOntologyDefinition ';' | observeStatement=ObserveStatement ';';
		@Override public ParserRule getRule() { return rule; }
		
		//conceptStatement=ConceptStatement ';' | modelStatement=ModelStatement ';' |
		//upperOntologyStatement=UpperOntologyDefinition ';' | observeStatement=ObserveStatement ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//conceptStatement=ConceptStatement ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//conceptStatement=ConceptStatement
		public Assignment getConceptStatementAssignment_0_0() { return cConceptStatementAssignment_0_0; }
		
		//ConceptStatement
		public RuleCall getConceptStatementConceptStatementParserRuleCall_0_0_0() { return cConceptStatementConceptStatementParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//modelStatement=ModelStatement ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//modelStatement=ModelStatement
		public Assignment getModelStatementAssignment_1_0() { return cModelStatementAssignment_1_0; }
		
		//ModelStatement
		public RuleCall getModelStatementModelStatementParserRuleCall_1_0_0() { return cModelStatementModelStatementParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//upperOntologyStatement=UpperOntologyDefinition ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//upperOntologyStatement=UpperOntologyDefinition
		public Assignment getUpperOntologyStatementAssignment_2_0() { return cUpperOntologyStatementAssignment_2_0; }
		
		//UpperOntologyDefinition
		public RuleCall getUpperOntologyStatementUpperOntologyDefinitionParserRuleCall_2_0_0() { return cUpperOntologyStatementUpperOntologyDefinitionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//observeStatement=ObserveStatement ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//observeStatement=ObserveStatement
		public Assignment getObserveStatementAssignment_3_0() { return cObserveStatementAssignment_3_0; }
		
		//ObserveStatement
		public RuleCall getObserveStatementObserveStatementParserRuleCall_3_0_0() { return cObserveStatementObserveStatementParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class ModelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ModelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cInactiveAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cInactiveVoidKeyword_1_0_0 = (Keyword)cInactiveAssignment_1_0.eContents().get(0);
		private final Assignment cPrivateAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_1_0 = (Keyword)cPrivateAssignment_1_1.eContents().get(0);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelMODEL_TYPEParserRuleCall_2_0 = (RuleCall)cModelAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyModelBodyStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//ModelStatement:
		//	annotations+=Annotation* (inactive?='void'? & private?='private'?) model=MODEL_TYPE body=ModelBodyStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* (inactive?='void'? & private?='private'?) model=MODEL_TYPE body=ModelBodyStatement
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//inactive?='void'? & private?='private'?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//inactive?='void'?
		public Assignment getInactiveAssignment_1_0() { return cInactiveAssignment_1_0; }
		
		//'void'
		public Keyword getInactiveVoidKeyword_1_0_0() { return cInactiveVoidKeyword_1_0_0; }
		
		//private?='private'?
		public Assignment getPrivateAssignment_1_1() { return cPrivateAssignment_1_1; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_1_0() { return cPrivatePrivateKeyword_1_1_0; }
		
		//model=MODEL_TYPE
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }
		
		//MODEL_TYPE
		public RuleCall getModelMODEL_TYPEParserRuleCall_2_0() { return cModelMODEL_TYPEParserRuleCall_2_0; }
		
		//body=ModelBodyStatement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ModelBodyStatement
		public RuleCall getBodyModelBodyStatementParserRuleCall_3_0() { return cBodyModelBodyStatementParserRuleCall_3_0; }
	}
	public class ModelBodyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ModelBodyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstantiatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInstantiatorEachKeyword_0_0 = (Keyword)cInstantiatorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cUrnAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cUrnUrnParserRuleCall_1_0_0_0 = (RuleCall)cUrnAssignment_1_0_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0_1_0 = (RuleCall)cFunctionAssignment_1_0_1.eContents().get(0);
		private final Assignment cNumberAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cNumberNumberParserRuleCall_1_0_2_0 = (RuleCall)cNumberAssignment_1_0_2.eContents().get(0);
		private final Assignment cBooleanAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final Alternatives cBooleanAlternatives_1_0_3_0 = (Alternatives)cBooleanAssignment_1_0_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_1_0_3_0_0 = (Keyword)cBooleanAlternatives_1_0_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_1_0_3_0_1 = (Keyword)cBooleanAlternatives_1_0_3_0.eContents().get(1);
		private final Assignment cConceptAssignment_1_0_4 = (Assignment)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cConceptSimpleObservableSemanticsParserRuleCall_1_0_4_0 = (RuleCall)cConceptAssignment_1_0_4.eContents().get(0);
		private final Keyword cAsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cObservablesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cObservablesObservableSemanticsParserRuleCall_2_1_0_0 = (RuleCall)cObservablesAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cObservablesAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cObservablesObservableSemanticsParserRuleCall_2_1_1_1_0 = (RuleCall)cObservablesAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cObservingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDependenciesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDependenciesObservableSemanticsParserRuleCall_3_1_0 = (RuleCall)cDependenciesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cDependenciesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cDependenciesObservableSemanticsParserRuleCall_3_2_1_0 = (RuleCall)cDependenciesAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContextualizersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContextualizersContextualizationParserRuleCall_4_1_0 = (RuleCall)cContextualizersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cContextualizersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cContextualizersContextualizationParserRuleCall_4_2_1_0 = (RuleCall)cContextualizersAssignment_4_2_1.eContents().get(0);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionSpecificationParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cMetadataKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMetadataAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMetadataMetadataParserRuleCall_6_2_0 = (RuleCall)cMetadataAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cDocumentationKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDocumentationAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDocumentationDocumentationParserRuleCall_7_2_0 = (RuleCall)cDocumentationAssignment_7_2.eContents().get(0);
		
		//ModelBodyStatement:
		//	instantiator?='each'? ((urn=Urn | function=Function | number=Number | boolean=('true' | 'false') |
		//	concept=SimpleObservableSemantics) 'as')? (name=LOWERCASE_ID | observables+=ObservableSemantics (','
		//	observables+=ObservableSemantics)*) ('observing' dependencies+=ObservableSemantics (','
		//	dependencies+=ObservableSemantics)*)? ('using' contextualizers+=Contextualization (','
		//	contextualizers+=Contextualization)*)? actions+=ActionSpecification* ('with' 'metadata' metadata=Metadata)? ('with'
		//	'documentation' documentation=Documentation)?;
		@Override public ParserRule getRule() { return rule; }
		
		//instantiator?='each'? ((urn=Urn | function=Function | number=Number | boolean=('true' | 'false') |
		//concept=SimpleObservableSemantics) 'as')? (name=LOWERCASE_ID | observables+=ObservableSemantics (','
		//observables+=ObservableSemantics)*) ('observing' dependencies+=ObservableSemantics (','
		//dependencies+=ObservableSemantics)*)? ('using' contextualizers+=Contextualization (','
		//contextualizers+=Contextualization)*)? actions+=ActionSpecification* ('with' 'metadata' metadata=Metadata)? ('with'
		//'documentation' documentation=Documentation)?
		public Group getGroup() { return cGroup; }
		
		//instantiator?='each'?
		public Assignment getInstantiatorAssignment_0() { return cInstantiatorAssignment_0; }
		
		//'each'
		public Keyword getInstantiatorEachKeyword_0_0() { return cInstantiatorEachKeyword_0_0; }
		
		//((urn=Urn | function=Function | number=Number | boolean=('true' | 'false') | concept=SimpleObservableSemantics) 'as')?
		public Group getGroup_1() { return cGroup_1; }
		
		//urn=Urn | function=Function | number=Number | boolean=('true' | 'false') | concept=SimpleObservableSemantics
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//urn=Urn
		public Assignment getUrnAssignment_1_0_0() { return cUrnAssignment_1_0_0; }
		
		//Urn
		public RuleCall getUrnUrnParserRuleCall_1_0_0_0() { return cUrnUrnParserRuleCall_1_0_0_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_1_0_1() { return cFunctionAssignment_1_0_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0_1_0() { return cFunctionFunctionParserRuleCall_1_0_1_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1_0_2() { return cNumberAssignment_1_0_2; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0_2_0() { return cNumberNumberParserRuleCall_1_0_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_1_0_3() { return cBooleanAssignment_1_0_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_1_0_3_0() { return cBooleanAlternatives_1_0_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_1_0_3_0_0() { return cBooleanTrueKeyword_1_0_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_1_0_3_0_1() { return cBooleanFalseKeyword_1_0_3_0_1; }
		
		//concept=SimpleObservableSemantics
		public Assignment getConceptAssignment_1_0_4() { return cConceptAssignment_1_0_4; }
		
		//SimpleObservableSemantics
		public RuleCall getConceptSimpleObservableSemanticsParserRuleCall_1_0_4_0() { return cConceptSimpleObservableSemanticsParserRuleCall_1_0_4_0; }
		
		//'as'
		public Keyword getAsKeyword_1_1() { return cAsKeyword_1_1; }
		
		///*
		//		 * If the observable is a single role, then concept must be the actual observable and we're reinterpreting it.
		//		 */
		//name=LOWERCASE_ID | observables+=ObservableSemantics (',' observables+=ObservableSemantics)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_2_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_2_0_0; }
		
		//observables+=ObservableSemantics (',' observables+=ObservableSemantics)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//observables+=ObservableSemantics
		public Assignment getObservablesAssignment_2_1_0() { return cObservablesAssignment_2_1_0; }
		
		//ObservableSemantics
		public RuleCall getObservablesObservableSemanticsParserRuleCall_2_1_0_0() { return cObservablesObservableSemanticsParserRuleCall_2_1_0_0; }
		
		//(',' observables+=ObservableSemantics)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//observables+=ObservableSemantics
		public Assignment getObservablesAssignment_2_1_1_1() { return cObservablesAssignment_2_1_1_1; }
		
		//ObservableSemantics
		public RuleCall getObservablesObservableSemanticsParserRuleCall_2_1_1_1_0() { return cObservablesObservableSemanticsParserRuleCall_2_1_1_1_0; }
		
		//('observing' dependencies+=ObservableSemantics (',' dependencies+=ObservableSemantics)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'observing'
		public Keyword getObservingKeyword_3_0() { return cObservingKeyword_3_0; }
		
		//dependencies+=ObservableSemantics
		public Assignment getDependenciesAssignment_3_1() { return cDependenciesAssignment_3_1; }
		
		//ObservableSemantics
		public RuleCall getDependenciesObservableSemanticsParserRuleCall_3_1_0() { return cDependenciesObservableSemanticsParserRuleCall_3_1_0; }
		
		//(',' dependencies+=ObservableSemantics)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//dependencies+=ObservableSemantics
		public Assignment getDependenciesAssignment_3_2_1() { return cDependenciesAssignment_3_2_1; }
		
		//ObservableSemantics
		public RuleCall getDependenciesObservableSemanticsParserRuleCall_3_2_1_0() { return cDependenciesObservableSemanticsParserRuleCall_3_2_1_0; }
		
		//('using' contextualizers+=Contextualization (',' contextualizers+=Contextualization)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'using'
		public Keyword getUsingKeyword_4_0() { return cUsingKeyword_4_0; }
		
		//contextualizers+=Contextualization
		public Assignment getContextualizersAssignment_4_1() { return cContextualizersAssignment_4_1; }
		
		//Contextualization
		public RuleCall getContextualizersContextualizationParserRuleCall_4_1_0() { return cContextualizersContextualizationParserRuleCall_4_1_0; }
		
		//(',' contextualizers+=Contextualization)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//contextualizers+=Contextualization
		public Assignment getContextualizersAssignment_4_2_1() { return cContextualizersAssignment_4_2_1; }
		
		//Contextualization
		public RuleCall getContextualizersContextualizationParserRuleCall_4_2_1_0() { return cContextualizersContextualizationParserRuleCall_4_2_1_0; }
		
		//actions+=ActionSpecification*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//ActionSpecification
		public RuleCall getActionsActionSpecificationParserRuleCall_5_0() { return cActionsActionSpecificationParserRuleCall_5_0; }
		
		//('with' 'metadata' metadata=Metadata)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'with'
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_6_1() { return cMetadataKeyword_6_1; }
		
		//metadata=Metadata
		public Assignment getMetadataAssignment_6_2() { return cMetadataAssignment_6_2; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_6_2_0() { return cMetadataMetadataParserRuleCall_6_2_0; }
		
		//('with' 'documentation' documentation=Documentation)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }
		
		//'documentation'
		public Keyword getDocumentationKeyword_7_1() { return cDocumentationKeyword_7_1; }
		
		//documentation=Documentation
		public Assignment getDocumentationAssignment_7_2() { return cDocumentationAssignment_7_2; }
		
		//Documentation
		public RuleCall getDocumentationDocumentationParserRuleCall_7_2_0() { return cDocumentationDocumentationParserRuleCall_7_2_0; }
	}
	public class ContextualizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Contextualization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueValueExecutionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cClassificationKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Assignment cDiscretizationAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cDiscretizationDiscretizationKeyword_1_0_1_0 = (Keyword)cDiscretizationAssignment_1_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cClassificationAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cClassificationClassificationParserRuleCall_1_2_0 = (RuleCall)cClassificationAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLookupKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLookupTableAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLookupTableLookupTableParserRuleCall_2_1_0 = (RuleCall)cLookupTableAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cClassifiedKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Assignment cDiscretizationAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final Keyword cDiscretizationDiscretizedKeyword_3_0_1_0 = (Keyword)cDiscretizationAssignment_3_0_1.eContents().get(0);
		private final Keyword cAccordingKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cToKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cClassificationPropertyAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cClassificationPropertyPropertyIdParserRuleCall_3_3_0 = (RuleCall)cClassificationPropertyAssignment_3_3.eContents().get(0);
		
		//Contextualization:
		//	value=ValueExecution | ('classification' | discretization?='discretization') '(' classification=Classification ')' |
		//	'lookup' lookupTable=LookupTable | ('classified' | discretization?='discretized') 'according' 'to'
		//	classificationProperty=PropertyId;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ValueExecution | ('classification' | discretization?='discretization') '(' classification=Classification ')' |
		//'lookup' lookupTable=LookupTable | ('classified' | discretization?='discretized') 'according' 'to'
		//classificationProperty=PropertyId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ValueExecution
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ValueExecution
		public RuleCall getValueValueExecutionParserRuleCall_0_0() { return cValueValueExecutionParserRuleCall_0_0; }
		
		//('classification' | discretization?='discretization') '(' classification=Classification ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'classification' | discretization?='discretization'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'classification'
		public Keyword getClassificationKeyword_1_0_0() { return cClassificationKeyword_1_0_0; }
		
		//discretization?='discretization'
		public Assignment getDiscretizationAssignment_1_0_1() { return cDiscretizationAssignment_1_0_1; }
		
		//'discretization'
		public Keyword getDiscretizationDiscretizationKeyword_1_0_1_0() { return cDiscretizationDiscretizationKeyword_1_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//classification=Classification
		public Assignment getClassificationAssignment_1_2() { return cClassificationAssignment_1_2; }
		
		//Classification
		public RuleCall getClassificationClassificationParserRuleCall_1_2_0() { return cClassificationClassificationParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'lookup' lookupTable=LookupTable
		public Group getGroup_2() { return cGroup_2; }
		
		//'lookup'
		public Keyword getLookupKeyword_2_0() { return cLookupKeyword_2_0; }
		
		//lookupTable=LookupTable
		public Assignment getLookupTableAssignment_2_1() { return cLookupTableAssignment_2_1; }
		
		//LookupTable
		public RuleCall getLookupTableLookupTableParserRuleCall_2_1_0() { return cLookupTableLookupTableParserRuleCall_2_1_0; }
		
		//('classified' | discretization?='discretized') 'according' 'to' classificationProperty=PropertyId
		public Group getGroup_3() { return cGroup_3; }
		
		//'classified' | discretization?='discretized'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'classified'
		public Keyword getClassifiedKeyword_3_0_0() { return cClassifiedKeyword_3_0_0; }
		
		//discretization?='discretized'
		public Assignment getDiscretizationAssignment_3_0_1() { return cDiscretizationAssignment_3_0_1; }
		
		//'discretized'
		public Keyword getDiscretizationDiscretizedKeyword_3_0_1_0() { return cDiscretizationDiscretizedKeyword_3_0_1_0; }
		
		//'according'
		public Keyword getAccordingKeyword_3_1() { return cAccordingKeyword_3_1; }
		
		//'to'
		public Keyword getToKeyword_3_2() { return cToKeyword_3_2; }
		
		//classificationProperty=PropertyId
		public Assignment getClassificationPropertyAssignment_3_3() { return cClassificationPropertyAssignment_3_3; }
		
		//PropertyId
		public RuleCall getClassificationPropertyPropertyIdParserRuleCall_3_3_0() { return cClassificationPropertyPropertyIdParserRuleCall_3_3_0; }
	}
	public class AttributeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.AttributeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameUPPERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Assignment cFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionEXPRTerminalRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AttributeIdentifier:
		//	name=(LOWERCASE_ID | UPPERCASE_ID) | function=Function | expression=EXPR;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(LOWERCASE_ID | UPPERCASE_ID) | function=Function | expression=EXPR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=(LOWERCASE_ID | UPPERCASE_ID)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(LOWERCASE_ID | UPPERCASE_ID)
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getNameUPPERCASE_IDTerminalRuleCall_0_0_1() { return cNameUPPERCASE_IDTerminalRuleCall_0_0_1; }
		
		//function=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//expression=EXPR
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//EXPR
		public RuleCall getExpressionEXPRTerminalRuleCall_2_0() { return cExpressionEXPRTerminalRuleCall_2_0; }
	}
	public class ClassificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Classification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassifiersClassifierParserRuleCall_0_0 = (RuleCall)cClassifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClassifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClassifiersClassifierParserRuleCall_1_1_0 = (RuleCall)cClassifiersAssignment_1_1.eContents().get(0);
		
		//Classification:
		//	classifiers+=Classifier (=> ',' classifiers+=Classifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//classifiers+=Classifier (=> ',' classifiers+=Classifier)*
		public Group getGroup() { return cGroup; }
		
		//classifiers+=Classifier
		public Assignment getClassifiersAssignment_0() { return cClassifiersAssignment_0; }
		
		//Classifier
		public RuleCall getClassifiersClassifierParserRuleCall_0_0() { return cClassifiersClassifierParserRuleCall_0_0; }
		
		//(=> ',' classifiers+=Classifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//classifiers+=Classifier
		public Assignment getClassifiersAssignment_1_1() { return cClassifiersAssignment_1_1; }
		
		//Classifier
		public RuleCall getClassifiersClassifierParserRuleCall_1_1_0() { return cClassifiersClassifierParserRuleCall_1_1_0; }
	}
	public class ClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Classifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cOtherwiseAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cOtherwiseOtherwiseKeyword_1_0_0 = (Keyword)cOtherwiseAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cIfKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Assignment cNegatedAssignment_1_1_0_1 = (Assignment)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNegatedUnlessKeyword_1_1_0_1_0 = (Keyword)cNegatedAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cClassifierAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cClassifierClassifierRHSParserRuleCall_1_1_1_0 = (RuleCall)cClassifierAssignment_1_1_1.eContents().get(0);
		
		//Classifier:
		//	declaration=ConceptDeclaration (otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=ConceptDeclaration (otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?
		public Group getGroup() { return cGroup; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_0_0() { return cDeclarationConceptDeclarationParserRuleCall_0_0; }
		
		//(otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//otherwise?='otherwise'
		public Assignment getOtherwiseAssignment_1_0() { return cOtherwiseAssignment_1_0; }
		
		//'otherwise'
		public Keyword getOtherwiseOtherwiseKeyword_1_0_0() { return cOtherwiseOtherwiseKeyword_1_0_0; }
		
		//('if' | negated?='unless') classifier=ClassifierRHS
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'if' | negated?='unless'
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'if'
		public Keyword getIfKeyword_1_1_0_0() { return cIfKeyword_1_1_0_0; }
		
		//negated?='unless'
		public Assignment getNegatedAssignment_1_1_0_1() { return cNegatedAssignment_1_1_0_1; }
		
		//'unless'
		public Keyword getNegatedUnlessKeyword_1_1_0_1_0() { return cNegatedUnlessKeyword_1_1_0_1_0; }
		
		//classifier=ClassifierRHS
		public Assignment getClassifierAssignment_1_1_1() { return cClassifierAssignment_1_1_1; }
		
		//ClassifierRHS
		public RuleCall getClassifierClassifierRHSParserRuleCall_1_1_1_0() { return cClassifierClassifierRHSParserRuleCall_1_1_1_0; }
	}
	public class ClassifierRHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ClassifierRHS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cConceptAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_5_0 = (RuleCall)cConceptAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cToResolveAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cToResolveConceptDeclarationParserRuleCall_6_1_0 = (RuleCall)cToResolveAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cToResolveAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cToResolveConceptDeclarationParserRuleCall_6_2_1_0 = (RuleCall)cToResolveAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_7_0_0 = (RuleCall)cOpAssignment_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_7_1_0 = (RuleCall)cExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cNodataAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNodataUnknownKeyword_8_0 = (Keyword)cNodataAssignment_8.eContents().get(0);
		private final Assignment cStarAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cStarAsteriskKeyword_9_0 = (Keyword)cStarAssignment_9.eContents().get(0);
		
		//ClassifierRHS:
		//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//	(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | concept=ConceptDeclaration |
		//	'(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')' | op=REL_OPERATOR expression=Number |
		//	nodata='unknown' | star?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | concept=ConceptDeclaration |
		//'(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')' | op=REL_OPERATOR expression=Number |
		//nodata='unknown' | star?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_5() { return cConceptAssignment_5; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_5_0() { return cConceptConceptDeclarationParserRuleCall_5_0; }
		
		//'(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//toResolve+=ConceptDeclaration
		public Assignment getToResolveAssignment_6_1() { return cToResolveAssignment_6_1; }
		
		//ConceptDeclaration
		public RuleCall getToResolveConceptDeclarationParserRuleCall_6_1_0() { return cToResolveConceptDeclarationParserRuleCall_6_1_0; }
		
		//(=> ',' toResolve+=ConceptDeclaration)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//=> ','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//toResolve+=ConceptDeclaration
		public Assignment getToResolveAssignment_6_2_1() { return cToResolveAssignment_6_2_1; }
		
		//ConceptDeclaration
		public RuleCall getToResolveConceptDeclarationParserRuleCall_6_2_1_0() { return cToResolveConceptDeclarationParserRuleCall_6_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_7() { return cGroup_7; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_7_0_0() { return cOpREL_OPERATORParserRuleCall_7_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_7_1() { return cExpressionAssignment_7_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_7_1_0() { return cExpressionNumberParserRuleCall_7_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_8() { return cNodataAssignment_8; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_8_0() { return cNodataUnknownKeyword_8_0; }
		
		//star?='*'
		public Assignment getStarAssignment_9() { return cStarAssignment_9; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_9_0() { return cStarAsteriskKeyword_9_0; }
	}
	public class LookupTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LookupTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArgsAlternatives_1_0 = (Alternatives)cArgsAssignment_1.eContents().get(0);
		private final RuleCall cArgsLOWERCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cArgsAlternatives_1_0.eContents().get(0);
		private final Keyword cArgsQuestionMarkKeyword_1_0_1 = (Keyword)cArgsAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cArgsAlternatives_2_1_0 = (Alternatives)cArgsAssignment_2_1.eContents().get(0);
		private final RuleCall cArgsLOWERCASE_IDTerminalRuleCall_2_1_0_0 = (RuleCall)cArgsAlternatives_2_1_0.eContents().get(0);
		private final Keyword cArgsQuestionMarkKeyword_2_1_0_1 = (Keyword)cArgsAlternatives_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIntoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cTableKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cTableAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTableTableParserRuleCall_5_0_1_0 = (RuleCall)cTableAssignment_5_0_1.eContents().get(0);
		private final Assignment cRefAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cRefLOWERCASE_IDTerminalRuleCall_5_1_0 = (RuleCall)cRefAssignment_5_1.eContents().get(0);
		
		//LookupTable:
		//	'(' args+=(LOWERCASE_ID | '?') (',' args+=(LOWERCASE_ID | '?'))* ')' 'into' ('table' table=Table | ref=LOWERCASE_ID);
		@Override public ParserRule getRule() { return rule; }
		
		//'(' args+=(LOWERCASE_ID | '?') (',' args+=(LOWERCASE_ID | '?'))* ')' 'into' ('table' table=Table | ref=LOWERCASE_ID)
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//args+=(LOWERCASE_ID | '?')
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//(LOWERCASE_ID | '?')
		public Alternatives getArgsAlternatives_1_0() { return cArgsAlternatives_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getArgsLOWERCASE_IDTerminalRuleCall_1_0_0() { return cArgsLOWERCASE_IDTerminalRuleCall_1_0_0; }
		
		//'?'
		public Keyword getArgsQuestionMarkKeyword_1_0_1() { return cArgsQuestionMarkKeyword_1_0_1; }
		
		//(',' args+=(LOWERCASE_ID | '?'))*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//args+=(LOWERCASE_ID | '?')
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }
		
		//(LOWERCASE_ID | '?')
		public Alternatives getArgsAlternatives_2_1_0() { return cArgsAlternatives_2_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getArgsLOWERCASE_IDTerminalRuleCall_2_1_0_0() { return cArgsLOWERCASE_IDTerminalRuleCall_2_1_0_0; }
		
		//'?'
		public Keyword getArgsQuestionMarkKeyword_2_1_0_1() { return cArgsQuestionMarkKeyword_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'into'
		public Keyword getIntoKeyword_4() { return cIntoKeyword_4; }
		
		//'table' table=Table | ref=LOWERCASE_ID
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'table' table=Table
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'table'
		public Keyword getTableKeyword_5_0_0() { return cTableKeyword_5_0_0; }
		
		//table=Table
		public Assignment getTableAssignment_5_0_1() { return cTableAssignment_5_0_1; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_5_0_1_0() { return cTableTableParserRuleCall_5_0_1_0; }
		
		//ref=LOWERCASE_ID
		public Assignment getRefAssignment_5_1() { return cRefAssignment_5_1; }
		
		//LOWERCASE_ID
		public RuleCall getRefLOWERCASE_IDTerminalRuleCall_5_1_0() { return cRefLOWERCASE_IDTerminalRuleCall_5_1_0; }
	}
	public class UrnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Urn");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameUrnIdParserRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		private final RuleCall cNameLocalFilePathParserRuleCall_0_2 = (RuleCall)cNameAlternatives_0.eContents().get(2);
		
		//Urn:
		//	name=(UrnId | STRING | LocalFilePath);
		@Override public ParserRule getRule() { return rule; }
		
		//// String used when there are strange chars or keywords in the URN.
		// name=(UrnId | STRING | LocalFilePath)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(UrnId | STRING | LocalFilePath)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//UrnId
		public RuleCall getNameUrnIdParserRuleCall_0_0() { return cNameUrnIdParserRuleCall_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1() { return cNameSTRINGTerminalRuleCall_0_1; }
		
		//LocalFilePath
		public RuleCall getNameLocalFilePathParserRuleCall_0_2() { return cNameLocalFilePathParserRuleCall_0_2; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cArgsLOWERCASE_IDTerminalRuleCall_1_0_0_0 = (RuleCall)cArgsAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cArgsLOWERCASE_IDTerminalRuleCall_1_0_1_1_0 = (RuleCall)cArgsAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExprAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_1_1_0_0 = (RuleCall)cExprAssignment_1_1_0.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprEXPRTerminalRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsTableClassifierParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElementsTableClassifierParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		
		//Table:
		//	'(' (args+=LOWERCASE_ID (',' args+=LOWERCASE_ID)* | expr+=EXPR expr+=EXPR*) ')' ':' elements+=TableClassifier (=> ','
		//	elements+=TableClassifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (args+=LOWERCASE_ID (',' args+=LOWERCASE_ID)* | expr+=EXPR expr+=EXPR*) ')' ':' elements+=TableClassifier (=> ','
		//elements+=TableClassifier)*
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//args+=LOWERCASE_ID (',' args+=LOWERCASE_ID)* | expr+=EXPR expr+=EXPR*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//args+=LOWERCASE_ID (',' args+=LOWERCASE_ID)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//args+=LOWERCASE_ID
		public Assignment getArgsAssignment_1_0_0() { return cArgsAssignment_1_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getArgsLOWERCASE_IDTerminalRuleCall_1_0_0_0() { return cArgsLOWERCASE_IDTerminalRuleCall_1_0_0_0; }
		
		//(',' args+=LOWERCASE_ID)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }
		
		//args+=LOWERCASE_ID
		public Assignment getArgsAssignment_1_0_1_1() { return cArgsAssignment_1_0_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getArgsLOWERCASE_IDTerminalRuleCall_1_0_1_1_0() { return cArgsLOWERCASE_IDTerminalRuleCall_1_0_1_1_0; }
		
		//expr+=EXPR expr+=EXPR*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expr+=EXPR
		public Assignment getExprAssignment_1_1_0() { return cExprAssignment_1_1_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_1_1_0_0() { return cExprEXPRTerminalRuleCall_1_1_0_0; }
		
		//expr+=EXPR*
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_1_1_1_0() { return cExprEXPRTerminalRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_4_0() { return cElementsTableClassifierParserRuleCall_4_0; }
		
		//(=> ',' elements+=TableClassifier)*
		public Group getGroup_5() { return cGroup_5; }
		
		//=> ','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//elements+=TableClassifier
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }
		
		//TableClassifier
		public RuleCall getElementsTableClassifierParserRuleCall_5_1_0() { return cElementsTableClassifierParserRuleCall_5_1_0; }
	}
	public class TableClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.TableClassifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cBooleanAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_0_0_0 = (Keyword)cBooleanAssignment_0_0.eContents().get(0);
		private final Assignment cBooleanAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cBooleanFalseKeyword_0_1_0 = (Keyword)cBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInt0Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInt0NumberParserRuleCall_1_0_0 = (RuleCall)cInt0Assignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cLeftLimitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLeftLimitInclusiveKeyword_1_1_0_0 = (Keyword)cLeftLimitAssignment_1_1_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cInt1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cInt1NumberParserRuleCall_1_3_0 = (RuleCall)cInt1Assignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Assignment cRightLimitAssignment_1_4_0 = (Assignment)cAlternatives_1_4.eContents().get(0);
		private final Keyword cRightLimitInclusiveKeyword_1_4_0_0 = (Keyword)cRightLimitAssignment_1_4_0.eContents().get(0);
		private final Keyword cExclusiveKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final Assignment cNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumNumberParserRuleCall_2_0 = (RuleCall)cNumAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSetListParserRuleCall_3_1_0 = (RuleCall)cSetAssignment_3_1.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cConceptAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cConceptConceptDeclarationParserRuleCall_5_0 = (RuleCall)cConceptAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cOpAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOpREL_OPERATORParserRuleCall_6_0_0 = (RuleCall)cOpAssignment_6_0.eContents().get(0);
		private final Assignment cExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionNumberParserRuleCall_6_1_0 = (RuleCall)cExpressionAssignment_6_1.eContents().get(0);
		private final Assignment cNodataAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cNodataUnknownKeyword_7_0 = (Keyword)cNodataAssignment_7.eContents().get(0);
		private final Assignment cStarAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cStarAsteriskKeyword_8_0 = (Keyword)cStarAssignment_8.eContents().get(0);
		private final Assignment cAnythingAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cAnythingNumberSignKeyword_9_0 = (Keyword)cAnythingAssignment_9.eContents().get(0);
		
		//TableClassifier ClassifierRHS:
		//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//	(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | concept=ConceptDeclaration |
		//	op=REL_OPERATOR expression=Number | nodata='unknown' | star?='*' | anything?='#';
		@Override public ParserRule getRule() { return rule; }
		
		//(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
		//(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | concept=ConceptDeclaration |
		//op=REL_OPERATOR expression=Number | nodata='unknown' | star?='*' | anything?='#'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(boolean='true' | boolean='false')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//boolean='true'
		public Assignment getBooleanAssignment_0_0() { return cBooleanAssignment_0_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_0_0_0() { return cBooleanTrueKeyword_0_0_0; }
		
		//boolean='false'
		public Assignment getBooleanAssignment_0_1() { return cBooleanAssignment_0_1; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_0_1_0() { return cBooleanFalseKeyword_0_1_0; }
		
		//int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number (rightLimit='inclusive' | 'exclusive')?
		public Group getGroup_1() { return cGroup_1; }
		
		//int0=Number
		public Assignment getInt0Assignment_1_0() { return cInt0Assignment_1_0; }
		
		//Number
		public RuleCall getInt0NumberParserRuleCall_1_0_0() { return cInt0NumberParserRuleCall_1_0_0; }
		
		//(leftLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//leftLimit='inclusive'
		public Assignment getLeftLimitAssignment_1_1_0() { return cLeftLimitAssignment_1_1_0; }
		
		//'inclusive'
		public Keyword getLeftLimitInclusiveKeyword_1_1_0_0() { return cLeftLimitInclusiveKeyword_1_1_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_1_1() { return cExclusiveKeyword_1_1_1; }
		
		//=> 'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }
		
		//=> int1=Number
		public Assignment getInt1Assignment_1_3() { return cInt1Assignment_1_3; }
		
		//Number
		public RuleCall getInt1NumberParserRuleCall_1_3_0() { return cInt1NumberParserRuleCall_1_3_0; }
		
		//(rightLimit='inclusive' | 'exclusive')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//rightLimit='inclusive'
		public Assignment getRightLimitAssignment_1_4_0() { return cRightLimitAssignment_1_4_0; }
		
		//'inclusive'
		public Keyword getRightLimitInclusiveKeyword_1_4_0_0() { return cRightLimitInclusiveKeyword_1_4_0_0; }
		
		//'exclusive'
		public Keyword getExclusiveKeyword_1_4_1() { return cExclusiveKeyword_1_4_1; }
		
		//num=Number
		public Assignment getNumAssignment_2() { return cNumAssignment_2; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_2_0() { return cNumNumberParserRuleCall_2_0; }
		
		//'in' set=List
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//set=List
		public Assignment getSetAssignment_3_1() { return cSetAssignment_3_1; }
		
		//List
		public RuleCall getSetListParserRuleCall_3_1_0() { return cSetListParserRuleCall_3_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }
		
		//concept=ConceptDeclaration
		public Assignment getConceptAssignment_5() { return cConceptAssignment_5; }
		
		//ConceptDeclaration
		public RuleCall getConceptConceptDeclarationParserRuleCall_5_0() { return cConceptConceptDeclarationParserRuleCall_5_0; }
		
		//op=REL_OPERATOR expression=Number
		public Group getGroup_6() { return cGroup_6; }
		
		//op=REL_OPERATOR
		public Assignment getOpAssignment_6_0() { return cOpAssignment_6_0; }
		
		//REL_OPERATOR
		public RuleCall getOpREL_OPERATORParserRuleCall_6_0_0() { return cOpREL_OPERATORParserRuleCall_6_0_0; }
		
		//expression=Number
		public Assignment getExpressionAssignment_6_1() { return cExpressionAssignment_6_1; }
		
		//Number
		public RuleCall getExpressionNumberParserRuleCall_6_1_0() { return cExpressionNumberParserRuleCall_6_1_0; }
		
		//nodata='unknown'
		public Assignment getNodataAssignment_7() { return cNodataAssignment_7; }
		
		//'unknown'
		public Keyword getNodataUnknownKeyword_7_0() { return cNodataUnknownKeyword_7_0; }
		
		//star?='*'
		public Assignment getStarAssignment_8() { return cStarAssignment_8; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_8_0() { return cStarAsteriskKeyword_8_0; }
		
		//anything?='#'
		public Assignment getAnythingAssignment_9() { return cAnythingAssignment_9; }
		
		//'#'
		public Keyword getAnythingNumberSignKeyword_9_0() { return cAnythingNumberSignKeyword_9_0; }
	}
	public class ActionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ActionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIntegratedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIntegratedAggregatedKeyword_0_0_0 = (Keyword)cIntegratedAssignment_0_0.eContents().get(0);
		private final Keyword cOverKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDomainAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDomainFunctionOrIDParserRuleCall_0_2_0 = (RuleCall)cDomainAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cDomainAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cDomainFunctionOrIDParserRuleCall_0_3_1_0 = (RuleCall)cDomainAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cActionsAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_0_4_0_0 = (RuleCall)cActionsAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cGroup_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_0_4_1_0 = (Keyword)cGroup_0_4_1.eContents().get(0);
		private final Assignment cActionsAssignment_0_4_1_1 = (Assignment)cGroup_0_4_1.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_0_4_1_1_0 = (RuleCall)cActionsAssignment_0_4_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTriggerAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTriggerOnKeyword_1_0_0 = (Keyword)cTriggerAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cInitializationAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cInitializationDefinitionKeyword_1_1_0_0 = (Keyword)cInitializationAssignment_1_1_0.eContents().get(0);
		private final Assignment cResolutionAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cResolutionResolutionKeyword_1_1_1_0 = (Keyword)cResolutionAssignment_1_1_1.eContents().get(0);
		private final Assignment cInstantiationAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cInstantiationInstantiationKeyword_1_1_2_0 = (Keyword)cInstantiationAssignment_1_1_2.eContents().get(0);
		private final Assignment cTerminationAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final Keyword cTerminationTerminationKeyword_1_1_3_0 = (Keyword)cTerminationAssignment_1_1_3.eContents().get(0);
		private final Assignment cStateInitializationAssignment_1_1_4 = (Assignment)cAlternatives_1_1.eContents().get(4);
		private final Keyword cStateInitializationInitializationKeyword_1_1_4_0 = (Keyword)cStateInitializationAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cAlternatives_1_1.eContents().get(5);
		private final Assignment cEventAssignment_1_1_5_0 = (Assignment)cGroup_1_1_5.eContents().get(0);
		private final RuleCall cEventConceptDeclarationParserRuleCall_1_1_5_0_0 = (RuleCall)cEventAssignment_1_1_5_0.eContents().get(0);
		private final Group cGroup_1_1_5_1 = (Group)cGroup_1_1_5.eContents().get(1);
		private final Keyword cInKeyword_1_1_5_1_0 = (Keyword)cGroup_1_1_5_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_5_1_1 = (Alternatives)cGroup_1_1_5_1.eContents().get(1);
		private final Assignment cAnyContextEventAssignment_1_1_5_1_1_0 = (Assignment)cAlternatives_1_1_5_1_1.eContents().get(0);
		private final Keyword cAnyContextEventContextKeyword_1_1_5_1_1_0_0 = (Keyword)cAnyContextEventAssignment_1_1_5_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_5_1_1_1 = (Group)cAlternatives_1_1_5_1_1.eContents().get(1);
		private final Assignment cRelatedEventContextAssignment_1_1_5_1_1_1_0 = (Assignment)cGroup_1_1_5_1_1_1.eContents().get(0);
		private final Keyword cRelatedEventContextRelatedKeyword_1_1_5_1_1_1_0_0 = (Keyword)cRelatedEventContextAssignment_1_1_5_1_1_1_0.eContents().get(0);
		private final Assignment cEventContextAssignment_1_1_5_1_1_1_1 = (Assignment)cGroup_1_1_5_1_1_1.eContents().get(1);
		private final RuleCall cEventContextConceptDeclarationParserRuleCall_1_1_5_1_1_1_1_0 = (RuleCall)cEventContextAssignment_1_1_5_1_1_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParametersListParserRuleCall_1_2_0 = (RuleCall)cParametersAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Assignment cActionsAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cActionsActionParserRuleCall_1_3_0_0 = (RuleCall)cActionsAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cActionsAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_3_1_1_0 = (RuleCall)cActionsAssignment_1_3_1_1.eContents().get(0);
		
		//ActionSpecification:
		//	integrated?='aggregated'? 'over' domain+=FunctionOrID (=> ',' domain+=FunctionOrID)* (actions+=Action (=> ','
		//	actions+=Action)*)? | trigger?='on' (initialization?='definition' | resolution?='resolution' |
		//	instantiation?='instantiation' | termination?='termination' | stateInitialization?='initialization' |
		//	event=ConceptDeclaration ('in' (anyContextEvent?='context' | relatedEventContext?='related'
		//	eventContext=ConceptDeclaration))?) parameters=List? (actions+=Action (=> ',' actions+=Action)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//integrated?='aggregated'? 'over' domain+=FunctionOrID (=> ',' domain+=FunctionOrID)* (actions+=Action (=> ','
		//actions+=Action)*)? | trigger?='on' (initialization?='definition' | resolution?='resolution' |
		//instantiation?='instantiation' | termination?='termination' | stateInitialization?='initialization' |
		//event=ConceptDeclaration ('in' (anyContextEvent?='context' | relatedEventContext?='related'
		//eventContext=ConceptDeclaration))?) parameters=List? (actions+=Action (=> ',' actions+=Action)*)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integrated?='aggregated'? 'over' domain+=FunctionOrID (=> ',' domain+=FunctionOrID)* (actions+=Action (=> ','
		//actions+=Action)*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//integrated?='aggregated'?
		public Assignment getIntegratedAssignment_0_0() { return cIntegratedAssignment_0_0; }
		
		//'aggregated'
		public Keyword getIntegratedAggregatedKeyword_0_0_0() { return cIntegratedAggregatedKeyword_0_0_0; }
		
		//'over'
		public Keyword getOverKeyword_0_1() { return cOverKeyword_0_1; }
		
		//domain+=FunctionOrID
		public Assignment getDomainAssignment_0_2() { return cDomainAssignment_0_2; }
		
		//FunctionOrID
		public RuleCall getDomainFunctionOrIDParserRuleCall_0_2_0() { return cDomainFunctionOrIDParserRuleCall_0_2_0; }
		
		//(=> ',' domain+=FunctionOrID)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//=> ','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//domain+=FunctionOrID
		public Assignment getDomainAssignment_0_3_1() { return cDomainAssignment_0_3_1; }
		
		//FunctionOrID
		public RuleCall getDomainFunctionOrIDParserRuleCall_0_3_1_0() { return cDomainFunctionOrIDParserRuleCall_0_3_1_0; }
		
		//(actions+=Action (=> ',' actions+=Action)*)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//actions+=Action
		public Assignment getActionsAssignment_0_4_0() { return cActionsAssignment_0_4_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_0_4_0_0() { return cActionsActionParserRuleCall_0_4_0_0; }
		
		//(=> ',' actions+=Action)*
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//=> ','
		public Keyword getCommaKeyword_0_4_1_0() { return cCommaKeyword_0_4_1_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_0_4_1_1() { return cActionsAssignment_0_4_1_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_0_4_1_1_0() { return cActionsActionParserRuleCall_0_4_1_1_0; }
		
		//trigger?='on' (initialization?='definition' | resolution?='resolution' | instantiation?='instantiation' |
		//termination?='termination' | stateInitialization?='initialization' | event=ConceptDeclaration ('in'
		//(anyContextEvent?='context' | relatedEventContext?='related' eventContext=ConceptDeclaration))?) parameters=List?
		//(actions+=Action (=> ',' actions+=Action)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//trigger?='on'
		public Assignment getTriggerAssignment_1_0() { return cTriggerAssignment_1_0; }
		
		//'on'
		public Keyword getTriggerOnKeyword_1_0_0() { return cTriggerOnKeyword_1_0_0; }
		
		//initialization?='definition' | resolution?='resolution' | instantiation?='instantiation' | termination?='termination' |
		//stateInitialization?='initialization' | event=ConceptDeclaration ('in' (anyContextEvent?='context' |
		//relatedEventContext?='related' eventContext=ConceptDeclaration))?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//initialization?='definition'
		public Assignment getInitializationAssignment_1_1_0() { return cInitializationAssignment_1_1_0; }
		
		//'definition'
		public Keyword getInitializationDefinitionKeyword_1_1_0_0() { return cInitializationDefinitionKeyword_1_1_0_0; }
		
		//resolution?='resolution'
		public Assignment getResolutionAssignment_1_1_1() { return cResolutionAssignment_1_1_1; }
		
		//'resolution'
		public Keyword getResolutionResolutionKeyword_1_1_1_0() { return cResolutionResolutionKeyword_1_1_1_0; }
		
		//instantiation?='instantiation'
		public Assignment getInstantiationAssignment_1_1_2() { return cInstantiationAssignment_1_1_2; }
		
		//'instantiation'
		public Keyword getInstantiationInstantiationKeyword_1_1_2_0() { return cInstantiationInstantiationKeyword_1_1_2_0; }
		
		//termination?='termination'
		public Assignment getTerminationAssignment_1_1_3() { return cTerminationAssignment_1_1_3; }
		
		//'termination'
		public Keyword getTerminationTerminationKeyword_1_1_3_0() { return cTerminationTerminationKeyword_1_1_3_0; }
		
		//stateInitialization?='initialization'
		public Assignment getStateInitializationAssignment_1_1_4() { return cStateInitializationAssignment_1_1_4; }
		
		//'initialization'
		public Keyword getStateInitializationInitializationKeyword_1_1_4_0() { return cStateInitializationInitializationKeyword_1_1_4_0; }
		
		//event=ConceptDeclaration ('in' (anyContextEvent?='context' | relatedEventContext?='related'
		//eventContext=ConceptDeclaration))?
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }
		
		//event=ConceptDeclaration
		public Assignment getEventAssignment_1_1_5_0() { return cEventAssignment_1_1_5_0; }
		
		//ConceptDeclaration
		public RuleCall getEventConceptDeclarationParserRuleCall_1_1_5_0_0() { return cEventConceptDeclarationParserRuleCall_1_1_5_0_0; }
		
		//('in' (anyContextEvent?='context' | relatedEventContext?='related' eventContext=ConceptDeclaration))?
		public Group getGroup_1_1_5_1() { return cGroup_1_1_5_1; }
		
		//'in'
		public Keyword getInKeyword_1_1_5_1_0() { return cInKeyword_1_1_5_1_0; }
		
		//anyContextEvent?='context' | relatedEventContext?='related' eventContext=ConceptDeclaration
		public Alternatives getAlternatives_1_1_5_1_1() { return cAlternatives_1_1_5_1_1; }
		
		//anyContextEvent?='context'
		public Assignment getAnyContextEventAssignment_1_1_5_1_1_0() { return cAnyContextEventAssignment_1_1_5_1_1_0; }
		
		//'context'
		public Keyword getAnyContextEventContextKeyword_1_1_5_1_1_0_0() { return cAnyContextEventContextKeyword_1_1_5_1_1_0_0; }
		
		//relatedEventContext?='related' eventContext=ConceptDeclaration
		public Group getGroup_1_1_5_1_1_1() { return cGroup_1_1_5_1_1_1; }
		
		//relatedEventContext?='related'
		public Assignment getRelatedEventContextAssignment_1_1_5_1_1_1_0() { return cRelatedEventContextAssignment_1_1_5_1_1_1_0; }
		
		//'related'
		public Keyword getRelatedEventContextRelatedKeyword_1_1_5_1_1_1_0_0() { return cRelatedEventContextRelatedKeyword_1_1_5_1_1_1_0_0; }
		
		//eventContext=ConceptDeclaration
		public Assignment getEventContextAssignment_1_1_5_1_1_1_1() { return cEventContextAssignment_1_1_5_1_1_1_1; }
		
		//ConceptDeclaration
		public RuleCall getEventContextConceptDeclarationParserRuleCall_1_1_5_1_1_1_1_0() { return cEventContextConceptDeclarationParserRuleCall_1_1_5_1_1_1_1_0; }
		
		//parameters=List?
		public Assignment getParametersAssignment_1_2() { return cParametersAssignment_1_2; }
		
		//List
		public RuleCall getParametersListParserRuleCall_1_2_0() { return cParametersListParserRuleCall_1_2_0; }
		
		//(actions+=Action (=> ',' actions+=Action)*)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_3_0() { return cActionsAssignment_1_3_0; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_3_0_0() { return cActionsActionParserRuleCall_1_3_0_0; }
		
		//(=> ',' actions+=Action)*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_3_1_0() { return cCommaKeyword_1_3_1_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_1_3_1_1() { return cActionsAssignment_1_3_1_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_1_3_1_1_0() { return cActionsActionParserRuleCall_1_3_1_1_0; }
	}
	public class FunctionOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.FunctionOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cFunctionIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cFunctionIdAlternatives_1_0 = (Alternatives)cFunctionIdAssignment_1.eContents().get(0);
		private final RuleCall cFunctionIdLOWERCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cFunctionIdAlternatives_1_0.eContents().get(0);
		private final RuleCall cFunctionIdNamespaceIdParserRuleCall_1_0_1 = (RuleCall)cFunctionIdAlternatives_1_0.eContents().get(1);
		
		//FunctionOrID:
		//	function=Function | functionId=(LOWERCASE_ID | NamespaceId);
		@Override public ParserRule getRule() { return rule; }
		
		//function=Function | functionId=(LOWERCASE_ID | NamespaceId)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function=Function
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0() { return cFunctionFunctionParserRuleCall_0_0; }
		
		//functionId=(LOWERCASE_ID | NamespaceId)
		public Assignment getFunctionIdAssignment_1() { return cFunctionIdAssignment_1; }
		
		//(LOWERCASE_ID | NamespaceId)
		public Alternatives getFunctionIdAlternatives_1_0() { return cFunctionIdAlternatives_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getFunctionIdLOWERCASE_IDTerminalRuleCall_1_0_0() { return cFunctionIdLOWERCASE_IDTerminalRuleCall_1_0_0; }
		
		//NamespaceId
		public RuleCall getFunctionIdNamespaceIdParserRuleCall_1_0_1() { return cFunctionIdNamespaceIdParserRuleCall_1_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cChangeAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cChangeChangeKeyword_0_0_0_0 = (Keyword)cChangeAssignment_0_0_0.eContents().get(0);
		private final Assignment cSetAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cSetSetKeyword_0_0_1_0 = (Keyword)cSetAssignment_0_0_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_0_1_0 = (RuleCall)cAssignmentsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_0_2_1_0 = (RuleCall)cAssignmentsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Group cGroup_0_3_0 = (Group)cGroup_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_3_0_0 = (Alternatives)cGroup_0_3_0.eContents().get(0);
		private final Keyword cIfKeyword_0_3_0_0_0 = (Keyword)cAlternatives_0_3_0_0.eContents().get(0);
		private final Assignment cConditionNegativeAssignment_0_3_0_0_1 = (Assignment)cAlternatives_0_3_0_0.eContents().get(1);
		private final Keyword cConditionNegativeUnlessKeyword_0_3_0_0_1_0 = (Keyword)cConditionNegativeAssignment_0_3_0_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cConditionValueParserRuleCall_0_3_1_0 = (RuleCall)cConditionAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIntegrateAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIntegrateIntegrateKeyword_1_0_0 = (Keyword)cIntegrateAssignment_1_0.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cAssignmentsValueAssignmentParserRuleCall_1_2_1_0 = (RuleCall)cAssignmentsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cGroup_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_3_0_0 = (Alternatives)cGroup_1_3_0.eContents().get(0);
		private final Keyword cIfKeyword_1_3_0_0_0 = (Keyword)cAlternatives_1_3_0_0.eContents().get(0);
		private final Assignment cConditionNegativeAssignment_1_3_0_0_1 = (Assignment)cAlternatives_1_3_0_0.eContents().get(1);
		private final Keyword cConditionNegativeUnlessKeyword_1_3_0_0_1_0 = (Keyword)cConditionNegativeAssignment_1_3_0_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cConditionValueParserRuleCall_1_3_1_0 = (RuleCall)cConditionAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDoAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cDoDoKeyword_2_0_0 = (Keyword)cDoAssignment_2_0.eContents().get(0);
		private final Assignment cExecutedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExecutedValueExecutionParserRuleCall_2_1_0 = (RuleCall)cExecutedAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cExecutedAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cExecutedValueExecutionParserRuleCall_2_2_1_0 = (RuleCall)cExecutedAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Group cGroup_2_3_0 = (Group)cGroup_2_3.eContents().get(0);
		private final Alternatives cAlternatives_2_3_0_0 = (Alternatives)cGroup_2_3_0.eContents().get(0);
		private final Keyword cIfKeyword_2_3_0_0_0 = (Keyword)cAlternatives_2_3_0_0.eContents().get(0);
		private final Assignment cConditionNegativeAssignment_2_3_0_0_1 = (Assignment)cAlternatives_2_3_0_0.eContents().get(1);
		private final Keyword cConditionNegativeUnlessKeyword_2_3_0_0_1_0 = (Keyword)cConditionNegativeAssignment_2_3_0_0_1.eContents().get(0);
		private final Assignment cConditionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cConditionValueParserRuleCall_2_3_1_0 = (RuleCall)cConditionAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cMoveAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cMoveMoveKeyword_3_0_0 = (Keyword)cMoveAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cWhereAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cWhereValueParserRuleCall_3_1_0_0 = (RuleCall)cWhereAssignment_3_1_0.eContents().get(0);
		private final Assignment cAwayAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final Keyword cAwayAwayKeyword_3_1_1_0 = (Keyword)cAwayAssignment_3_1_1.eContents().get(0);
		private final Assignment cConditionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConditionValueParserRuleCall_3_2_0 = (RuleCall)cConditionAssignment_3_2.eContents().get(0);
		
		//Action:
		//	(change?='change' | set?='set') assignments+=ValueAssignment (',' assignments+=ValueAssignment)* (=> ('if' |
		//	conditionNegative?='unless') condition=Value)? | integrate?='integrate' assignments+=ValueAssignment (','
		//	assignments+=ValueAssignment)* (=> ('if' | conditionNegative?='unless') condition=Value)? | do?='do'
		//	executed+=ValueExecution (',' executed+=ValueExecution)* (=> ('if' | conditionNegative?='unless') condition=Value)? |
		//	move?='move' (where=Value | away?='away') => condition=Value?;
		@Override public ParserRule getRule() { return rule; }
		
		//(change?='change' | set?='set') assignments+=ValueAssignment (',' assignments+=ValueAssignment)* (=> ('if' |
		//conditionNegative?='unless') condition=Value)? | integrate?='integrate' assignments+=ValueAssignment (','
		//assignments+=ValueAssignment)* (=> ('if' | conditionNegative?='unless') condition=Value)? | do?='do'
		//executed+=ValueExecution (',' executed+=ValueExecution)* (=> ('if' | conditionNegative?='unless') condition=Value)? |
		//move?='move' (where=Value | away?='away') => condition=Value?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(change?='change' | set?='set') assignments+=ValueAssignment (',' assignments+=ValueAssignment)* (=> ('if' |
		//conditionNegative?='unless') condition=Value)?
		public Group getGroup_0() { return cGroup_0; }
		
		//change?='change' | set?='set'
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//change?='change'
		public Assignment getChangeAssignment_0_0_0() { return cChangeAssignment_0_0_0; }
		
		//'change'
		public Keyword getChangeChangeKeyword_0_0_0_0() { return cChangeChangeKeyword_0_0_0_0; }
		
		//set?='set'
		public Assignment getSetAssignment_0_0_1() { return cSetAssignment_0_0_1; }
		
		//'set'
		public Keyword getSetSetKeyword_0_0_1_0() { return cSetSetKeyword_0_0_1_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_0_1() { return cAssignmentsAssignment_0_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_0_1_0() { return cAssignmentsValueAssignmentParserRuleCall_0_1_0; }
		
		//(',' assignments+=ValueAssignment)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_0_2_1() { return cAssignmentsAssignment_0_2_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_0_2_1_0() { return cAssignmentsValueAssignmentParserRuleCall_0_2_1_0; }
		
		//(=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//=> ('if' | conditionNegative?='unless')
		public Group getGroup_0_3_0() { return cGroup_0_3_0; }
		
		//'if' | conditionNegative?='unless'
		public Alternatives getAlternatives_0_3_0_0() { return cAlternatives_0_3_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_3_0_0_0() { return cIfKeyword_0_3_0_0_0; }
		
		//conditionNegative?='unless'
		public Assignment getConditionNegativeAssignment_0_3_0_0_1() { return cConditionNegativeAssignment_0_3_0_0_1; }
		
		//'unless'
		public Keyword getConditionNegativeUnlessKeyword_0_3_0_0_1_0() { return cConditionNegativeUnlessKeyword_0_3_0_0_1_0; }
		
		//condition=Value
		public Assignment getConditionAssignment_0_3_1() { return cConditionAssignment_0_3_1; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_0_3_1_0() { return cConditionValueParserRuleCall_0_3_1_0; }
		
		//integrate?='integrate' assignments+=ValueAssignment (',' assignments+=ValueAssignment)* (=> ('if' |
		//conditionNegative?='unless') condition=Value)?
		public Group getGroup_1() { return cGroup_1; }
		
		//integrate?='integrate'
		public Assignment getIntegrateAssignment_1_0() { return cIntegrateAssignment_1_0; }
		
		//'integrate'
		public Keyword getIntegrateIntegrateKeyword_1_0_0() { return cIntegrateIntegrateKeyword_1_0_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_1_1() { return cAssignmentsAssignment_1_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_1_1_0() { return cAssignmentsValueAssignmentParserRuleCall_1_1_0; }
		
		//(',' assignments+=ValueAssignment)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//assignments+=ValueAssignment
		public Assignment getAssignmentsAssignment_1_2_1() { return cAssignmentsAssignment_1_2_1; }
		
		//ValueAssignment
		public RuleCall getAssignmentsValueAssignmentParserRuleCall_1_2_1_0() { return cAssignmentsValueAssignmentParserRuleCall_1_2_1_0; }
		
		//(=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//=> ('if' | conditionNegative?='unless')
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }
		
		//'if' | conditionNegative?='unless'
		public Alternatives getAlternatives_1_3_0_0() { return cAlternatives_1_3_0_0; }
		
		//'if'
		public Keyword getIfKeyword_1_3_0_0_0() { return cIfKeyword_1_3_0_0_0; }
		
		//conditionNegative?='unless'
		public Assignment getConditionNegativeAssignment_1_3_0_0_1() { return cConditionNegativeAssignment_1_3_0_0_1; }
		
		//'unless'
		public Keyword getConditionNegativeUnlessKeyword_1_3_0_0_1_0() { return cConditionNegativeUnlessKeyword_1_3_0_0_1_0; }
		
		//condition=Value
		public Assignment getConditionAssignment_1_3_1() { return cConditionAssignment_1_3_1; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_1_3_1_0() { return cConditionValueParserRuleCall_1_3_1_0; }
		
		//do?='do' executed+=ValueExecution (',' executed+=ValueExecution)* (=> ('if' | conditionNegative?='unless')
		//condition=Value)?
		public Group getGroup_2() { return cGroup_2; }
		
		//do?='do'
		public Assignment getDoAssignment_2_0() { return cDoAssignment_2_0; }
		
		//'do'
		public Keyword getDoDoKeyword_2_0_0() { return cDoDoKeyword_2_0_0; }
		
		//executed+=ValueExecution
		public Assignment getExecutedAssignment_2_1() { return cExecutedAssignment_2_1; }
		
		//ValueExecution
		public RuleCall getExecutedValueExecutionParserRuleCall_2_1_0() { return cExecutedValueExecutionParserRuleCall_2_1_0; }
		
		//(',' executed+=ValueExecution)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//executed+=ValueExecution
		public Assignment getExecutedAssignment_2_2_1() { return cExecutedAssignment_2_2_1; }
		
		//ValueExecution
		public RuleCall getExecutedValueExecutionParserRuleCall_2_2_1_0() { return cExecutedValueExecutionParserRuleCall_2_2_1_0; }
		
		//(=> ('if' | conditionNegative?='unless') condition=Value)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//=> ('if' | conditionNegative?='unless')
		public Group getGroup_2_3_0() { return cGroup_2_3_0; }
		
		//'if' | conditionNegative?='unless'
		public Alternatives getAlternatives_2_3_0_0() { return cAlternatives_2_3_0_0; }
		
		//'if'
		public Keyword getIfKeyword_2_3_0_0_0() { return cIfKeyword_2_3_0_0_0; }
		
		//conditionNegative?='unless'
		public Assignment getConditionNegativeAssignment_2_3_0_0_1() { return cConditionNegativeAssignment_2_3_0_0_1; }
		
		//'unless'
		public Keyword getConditionNegativeUnlessKeyword_2_3_0_0_1_0() { return cConditionNegativeUnlessKeyword_2_3_0_0_1_0; }
		
		//condition=Value
		public Assignment getConditionAssignment_2_3_1() { return cConditionAssignment_2_3_1; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_2_3_1_0() { return cConditionValueParserRuleCall_2_3_1_0; }
		
		///*
		//	 * 'move away' sounds a lot nicer than 'die'
		//	 */ move?='move' (where=Value | away?='away') => condition=Value?
		public Group getGroup_3() { return cGroup_3; }
		
		///*
		//	 * 'move away' sounds a lot nicer than 'die'
		//	 */ move?='move'
		public Assignment getMoveAssignment_3_0() { return cMoveAssignment_3_0; }
		
		//'move'
		public Keyword getMoveMoveKeyword_3_0_0() { return cMoveMoveKeyword_3_0_0; }
		
		//where=Value | away?='away'
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//where=Value
		public Assignment getWhereAssignment_3_1_0() { return cWhereAssignment_3_1_0; }
		
		//Value
		public RuleCall getWhereValueParserRuleCall_3_1_0_0() { return cWhereValueParserRuleCall_3_1_0_0; }
		
		//away?='away'
		public Assignment getAwayAssignment_3_1_1() { return cAwayAssignment_3_1_1; }
		
		//'away'
		public Keyword getAwayAwayKeyword_3_1_1_0() { return cAwayAwayKeyword_3_1_1_0; }
		
		//=> condition=Value?
		public Assignment getConditionAssignment_3_2() { return cConditionAssignment_3_2; }
		
		//Value
		public RuleCall getConditionValueParserRuleCall_3_2_0() { return cConditionValueParserRuleCall_3_2_0; }
	}
	public class ValueAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ValueAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTargetLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cTargetAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAssignedValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignedValueComputableValueParserRuleCall_1_0 = (RuleCall)cAssignedValueAssignment_1.eContents().get(0);
		
		//ValueAssignment:
		//	(target=LOWERCASE_ID? 'to')? assignedValue=ComputableValue;
		@Override public ParserRule getRule() { return rule; }
		
		//(target=LOWERCASE_ID? 'to')? assignedValue=ComputableValue
		public Group getGroup() { return cGroup; }
		
		//(target=LOWERCASE_ID? 'to')?
		public Group getGroup_0() { return cGroup_0; }
		
		//target=LOWERCASE_ID?
		public Assignment getTargetAssignment_0_0() { return cTargetAssignment_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getTargetLOWERCASE_IDTerminalRuleCall_0_0_0() { return cTargetLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//assignedValue=ComputableValue
		public Assignment getAssignedValueAssignment_1() { return cAssignedValueAssignment_1; }
		
		//ComputableValue
		public RuleCall getAssignedValueComputableValueParserRuleCall_1_0() { return cAssignedValueComputableValueParserRuleCall_1_0; }
	}
	public class ComputableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ComputableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralOrIdOrCommaParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExprAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_2_0_0 = (RuleCall)cExprAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cInKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLanguageAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cLanguageAlternatives_2_1_1_0 = (Alternatives)cLanguageAssignment_2_1_1.eContents().get(0);
		private final RuleCall cLanguageLOWERCASE_IDTerminalRuleCall_2_1_1_0_0 = (RuleCall)cLanguageAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cLanguageAlternatives_2_1_1_0.eContents().get(1);
		private final RuleCall cLanguageCAMELCASE_IDTerminalRuleCall_2_1_1_0_2 = (RuleCall)cLanguageAlternatives_2_1_1_0.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cIdAlternatives_3_0 = (Alternatives)cIdAssignment_3.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_3_0_0 = (RuleCall)cIdAlternatives_3_0.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_3_0_1 = (RuleCall)cIdAlternatives_3_0.eContents().get(1);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_3_0_2 = (RuleCall)cIdAlternatives_3_0.eContents().get(2);
		private final Assignment cListAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cListListParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Assignment cNullAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNullUnknownKeyword_5_0 = (Keyword)cNullAssignment_5.eContents().get(0);
		
		///*
		// * this is made necessary by Xtext's inability of properly generating code when
		// * superclasses come from imported grammars.
		// */
		//ComputableValue:
		//	literal=LiteralOrIdOrComma | function=Function | expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID |
		//	CAMELCASE_ID))? | id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID) | list=List | null?='unknown';
		@Override public ParserRule getRule() { return rule; }
		
		//literal=LiteralOrIdOrComma | function=Function | expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))?
		//| id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID) | list=List | null?='unknown'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=LiteralOrIdOrComma
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//LiteralOrIdOrComma
		public RuleCall getLiteralLiteralOrIdOrCommaParserRuleCall_0_0() { return cLiteralLiteralOrIdOrCommaParserRuleCall_0_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))?
		public Group getGroup_2() { return cGroup_2; }
		
		//expr=EXPR
		public Assignment getExprAssignment_2_0() { return cExprAssignment_2_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_2_0_0() { return cExprEXPRTerminalRuleCall_2_0_0; }
		
		//('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'in'
		public Keyword getInKeyword_2_1_0() { return cInKeyword_2_1_0; }
		
		//language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Assignment getLanguageAssignment_2_1_1() { return cLanguageAssignment_2_1_1; }
		
		//(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Alternatives getLanguageAlternatives_2_1_1_0() { return cLanguageAlternatives_2_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLanguageLOWERCASE_IDTerminalRuleCall_2_1_1_0_0() { return cLanguageLOWERCASE_IDTerminalRuleCall_2_1_1_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0_1() { return cLanguageUPPERCASE_IDTerminalRuleCall_2_1_1_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getLanguageCAMELCASE_IDTerminalRuleCall_2_1_1_0_2() { return cLanguageCAMELCASE_IDTerminalRuleCall_2_1_1_0_2; }
		
		//id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Alternatives getIdAlternatives_3_0() { return cIdAlternatives_3_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_3_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_3_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_3_0_1() { return cIdUPPERCASE_IDTerminalRuleCall_3_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_3_0_2() { return cIdCAMELCASE_IDTerminalRuleCall_3_0_2; }
		
		//list=List
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//List
		public RuleCall getListListParserRuleCall_4_0() { return cListListParserRuleCall_4_0; }
		
		//null?='unknown'
		public Assignment getNullAssignment_5() { return cNullAssignment_5; }
		
		//'unknown'
		public Keyword getNullUnknownKeyword_5_0() { return cNullUnknownKeyword_5_0; }
	}
	public class ValueExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ValueExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExecValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExecValueExecutableValueParserRuleCall_0_0 = (RuleCall)cExecValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTargetLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cTargetAssignment_1_1.eContents().get(0);
		
		//ValueExecution ValueAssignment:
		//	execValue=ExecutableValue ('as' target=LOWERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//execValue=ExecutableValue ('as' target=LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//execValue=ExecutableValue
		public Assignment getExecValueAssignment_0() { return cExecValueAssignment_0; }
		
		//ExecutableValue
		public RuleCall getExecValueExecutableValueParserRuleCall_0_0() { return cExecValueExecutableValueParserRuleCall_0_0; }
		
		//('as' target=LOWERCASE_ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//target=LOWERCASE_ID
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getTargetLOWERCASE_IDTerminalRuleCall_1_1_0() { return cTargetLOWERCASE_IDTerminalRuleCall_1_1_0; }
	}
	public class ExecutableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ExecutableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprEXPRTerminalRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cInKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLanguageAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cLanguageAlternatives_1_1_1_0 = (Alternatives)cLanguageAssignment_1_1_1.eContents().get(0);
		private final RuleCall cLanguageLOWERCASE_IDTerminalRuleCall_1_1_1_0_0 = (RuleCall)cLanguageAlternatives_1_1_1_0.eContents().get(0);
		private final RuleCall cLanguageUPPERCASE_IDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cLanguageAlternatives_1_1_1_0.eContents().get(1);
		private final RuleCall cLanguageCAMELCASE_IDTerminalRuleCall_1_1_1_0_2 = (RuleCall)cLanguageAlternatives_1_1_1_0.eContents().get(2);
		private final Assignment cUrnAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cUrnUrnIdParserRuleCall_2_0 = (RuleCall)cUrnAssignment_2.eContents().get(0);
		
		//ExecutableValue ComputableValue:
		//	function=Function | expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))? | urn=UrnId;
		@Override public ParserRule getRule() { return rule; }
		
		//function=Function | expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))? | urn=UrnId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function=Function
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0() { return cFunctionFunctionParserRuleCall_0_0; }
		
		//expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))?
		public Group getGroup_1() { return cGroup_1; }
		
		//expr=EXPR
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_1_0_0() { return cExprEXPRTerminalRuleCall_1_0_0; }
		
		//('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'in'
		public Keyword getInKeyword_1_1_0() { return cInKeyword_1_1_0; }
		
		//language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Assignment getLanguageAssignment_1_1_1() { return cLanguageAssignment_1_1_1; }
		
		//(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Alternatives getLanguageAlternatives_1_1_1_0() { return cLanguageAlternatives_1_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLanguageLOWERCASE_IDTerminalRuleCall_1_1_1_0_0() { return cLanguageLOWERCASE_IDTerminalRuleCall_1_1_1_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getLanguageUPPERCASE_IDTerminalRuleCall_1_1_1_0_1() { return cLanguageUPPERCASE_IDTerminalRuleCall_1_1_1_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getLanguageCAMELCASE_IDTerminalRuleCall_1_1_1_0_2() { return cLanguageCAMELCASE_IDTerminalRuleCall_1_1_1_0_2; }
		
		//urn=UrnId
		public Assignment getUrnAssignment_2() { return cUrnAssignment_2; }
		
		//UrnId
		public RuleCall getUrnUrnIdParserRuleCall_2_0() { return cUrnUrnIdParserRuleCall_2_0; }
	}
	public class MODEL_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.MODEL_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAssessKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLearnKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNumberKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTextKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBooleanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//MODEL_TYPE:
		//	'model' | 'assess' | 'learn' | 'number' | 'text' | 'boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//'model' | 'assess' | 'learn' | 'number' | 'text' | 'boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//'assess'
		public Keyword getAssessKeyword_1() { return cAssessKeyword_1; }
		
		//'learn'
		public Keyword getLearnKeyword_2() { return cLearnKeyword_2; }
		
		//'number'
		public Keyword getNumberKeyword_3() { return cNumberKeyword_3; }
		
		//'text'
		public Keyword getTextKeyword_4() { return cTextKeyword_4; }
		
		//'boolean'
		public Keyword getBooleanKeyword_5() { return cBooleanKeyword_5; }
	}
	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cPrivateAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cPrivatePrivateKeyword_1_0_0 = (Keyword)cPrivateAssignment_1_0.eContents().get(0);
		private final Assignment cInactiveAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cInactiveVoidKeyword_1_1_0 = (Keyword)cInactiveAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cNamespaceKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cScenarioAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cScenarioScenarioKeyword_2_1_0 = (Keyword)cScenarioAssignment_2_1.eContents().get(0);
		private final Assignment cWorldviewBoundAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cWorldviewBoundWorldviewKeyword_2_2_0 = (Keyword)cWorldviewBoundAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePathNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDocstringAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_4_0 = (RuleCall)cDocstringAssignment_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cUsingKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cImportedAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cImportedImportParserRuleCall_5_0_1_0 = (RuleCall)cImportedAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_2 = (Group)cGroup_5_0.eContents().get(2);
		private final Keyword cCommaKeyword_5_0_2_0 = (Keyword)cGroup_5_0_2.eContents().get(0);
		private final Assignment cImportedAssignment_5_0_2_1 = (Assignment)cGroup_5_0_2.eContents().get(1);
		private final RuleCall cImportedImportParserRuleCall_5_0_2_1_0 = (RuleCall)cImportedAssignment_5_0_2_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cImportsKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOwlImportsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOwlImportsOwlImportParserRuleCall_5_1_1_0 = (RuleCall)cOwlImportsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cOwlImportsAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cOwlImportsOwlImportParserRuleCall_5_1_2_1_0 = (RuleCall)cOwlImportsAssignment_5_1_2_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cCoveringKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cCoverageAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cCoverageFunctionParserRuleCall_5_2_1_0 = (RuleCall)cCoverageAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_2_2 = (Group)cGroup_5_2.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_2_0 = (Keyword)cGroup_5_2_2.eContents().get(0);
		private final Assignment cCoverageAssignment_5_2_2_1 = (Assignment)cGroup_5_2_2.eContents().get(1);
		private final RuleCall cCoverageFunctionParserRuleCall_5_2_2_1_0 = (RuleCall)cCoverageAssignment_5_2_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cInKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Keyword cDomainKeyword_5_3_1 = (Keyword)cGroup_5_3.eContents().get(1);
		private final Alternatives cAlternatives_5_3_2 = (Alternatives)cGroup_5_3.eContents().get(2);
		private final Assignment cRootDomainAssignment_5_3_2_0 = (Assignment)cAlternatives_5_3_2.eContents().get(0);
		private final Keyword cRootDomainRootKeyword_5_3_2_0_0 = (Keyword)cRootDomainAssignment_5_3_2_0.eContents().get(0);
		private final Assignment cDomainConceptAssignment_5_3_2_1 = (Assignment)cAlternatives_5_3_2.eContents().get(1);
		private final RuleCall cDomainConceptConceptParserRuleCall_5_3_2_1_0 = (RuleCall)cDomainConceptAssignment_5_3_2_1.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cUnorderedGroup_5.eContents().get(4);
		private final Keyword cDisjointKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Keyword cWithKeyword_5_4_1 = (Keyword)cGroup_5_4.eContents().get(1);
		private final Assignment cDisjointNamespacesAssignment_5_4_2 = (Assignment)cGroup_5_4.eContents().get(2);
		private final RuleCall cDisjointNamespacesPathNameParserRuleCall_5_4_2_0 = (RuleCall)cDisjointNamespacesAssignment_5_4_2.eContents().get(0);
		private final Group cGroup_5_4_3 = (Group)cGroup_5_4.eContents().get(3);
		private final Keyword cCommaKeyword_5_4_3_0 = (Keyword)cGroup_5_4_3.eContents().get(0);
		private final Assignment cDisjointNamespacesAssignment_5_4_3_1 = (Assignment)cGroup_5_4_3.eContents().get(1);
		private final RuleCall cDisjointNamespacesPathNameParserRuleCall_5_4_3_1_0 = (RuleCall)cDisjointNamespacesAssignment_5_4_3_1.eContents().get(0);
		private final Group cGroup_5_5 = (Group)cUnorderedGroup_5.eContents().get(5);
		private final Keyword cVersionKeyword_5_5_0 = (Keyword)cGroup_5_5.eContents().get(0);
		private final Assignment cVersionAssignment_5_5_1 = (Assignment)cGroup_5_5.eContents().get(1);
		private final RuleCall cVersionVersionNumberParserRuleCall_5_5_1_0 = (RuleCall)cVersionAssignment_5_5_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_6 = (UnorderedGroup)cUnorderedGroup_5.eContents().get(6);
		private final Group cGroup_5_6_0 = (Group)cUnorderedGroup_5_6.eContents().get(0);
		private final Keyword cResolveKeyword_5_6_0_0 = (Keyword)cGroup_5_6_0.eContents().get(0);
		private final Group cGroup_5_6_0_1 = (Group)cGroup_5_6_0.eContents().get(1);
		private final Keyword cFromKeyword_5_6_0_1_0 = (Keyword)cGroup_5_6_0_1.eContents().get(0);
		private final Assignment cLookupNamespaceAssignment_5_6_0_1_1 = (Assignment)cGroup_5_6_0_1.eContents().get(1);
		private final RuleCall cLookupNamespacePathNameParserRuleCall_5_6_0_1_1_0 = (RuleCall)cLookupNamespaceAssignment_5_6_0_1_1.eContents().get(0);
		private final Group cGroup_5_6_1 = (Group)cUnorderedGroup_5_6.eContents().get(1);
		private final Keyword cOutsideKeyword_5_6_1_0 = (Keyword)cGroup_5_6_1.eContents().get(0);
		private final Assignment cBlacklistNamespaceAssignment_5_6_1_1 = (Assignment)cGroup_5_6_1.eContents().get(1);
		private final RuleCall cBlacklistNamespacePathNameParserRuleCall_5_6_1_1_0 = (RuleCall)cBlacklistNamespaceAssignment_5_6_1_1.eContents().get(0);
		private final Group cGroup_5_6_2 = (Group)cUnorderedGroup_5_6.eContents().get(2);
		private final Keyword cUsingKeyword_5_6_2_0 = (Keyword)cGroup_5_6_2.eContents().get(0);
		private final Assignment cWeightsAssignment_5_6_2_1 = (Assignment)cGroup_5_6_2.eContents().get(1);
		private final RuleCall cWeightsMetadataParserRuleCall_5_6_2_1_0 = (RuleCall)cWeightsAssignment_5_6_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cMetadataKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMetadataAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMetadataMetadataParserRuleCall_6_2_0 = (RuleCall)cMetadataAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cDocumentationKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDocumentationAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDocumentationMetadataParserRuleCall_7_2_0 = (RuleCall)cDocumentationAssignment_7_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///*
		// * Namespace - entry point of all files. Only interactive session may start without this statement.
		// * A namespace may be a scenario - if so, nothing changes except its models will never be used from
		// * the DB unless the scenario is being computed (should be 'observe ... in scenario ....).
		// */
		//Namespace:
		//	annotations+=Annotation* (private?='private'? & inactive?='void'?) ('namespace' | scenario?='scenario' |
		//	worldviewBound?='worldview') name=PathName docstring=STRING? (('using' imported+=Import (=> ',' imported+=Import)*)?
		//	& ('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? & ('covering' coverage+=Function (=> ','
		//	coverage+=Function)*)? & ('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? & ('disjoint' 'with'
		//	disjointNamespaces+=PathName (',' disjointNamespaces+=PathName*))? & ('version' version=VersionNumber)? & ('resolve'
		//	('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Metadata)?)?)
		//	('with' 'metadata' metadata=Metadata)? ('with' 'documentation' documentation=Metadata)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* (private?='private'? & inactive?='void'?) ('namespace' | scenario?='scenario' |
		//worldviewBound?='worldview') name=PathName docstring=STRING? (('using' imported+=Import (=> ',' imported+=Import)*)? &
		//('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? & ('covering' coverage+=Function (=> ','
		//coverage+=Function)*)? & ('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? & ('disjoint' 'with'
		//disjointNamespaces+=PathName (',' disjointNamespaces+=PathName*))? & ('version' version=VersionNumber)? & ('resolve'
		//('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Metadata)?)?)
		//('with' 'metadata' metadata=Metadata)? ('with' 'documentation' documentation=Metadata)? ';'
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//private?='private'? & inactive?='void'?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//private?='private'?
		public Assignment getPrivateAssignment_1_0() { return cPrivateAssignment_1_0; }
		
		//'private'
		public Keyword getPrivatePrivateKeyword_1_0_0() { return cPrivatePrivateKeyword_1_0_0; }
		
		//inactive?='void'?
		public Assignment getInactiveAssignment_1_1() { return cInactiveAssignment_1_1; }
		
		//'void'
		public Keyword getInactiveVoidKeyword_1_1_0() { return cInactiveVoidKeyword_1_1_0; }
		
		//'namespace' | scenario?='scenario' | worldviewBound?='worldview'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_2_0() { return cNamespaceKeyword_2_0; }
		
		//scenario?='scenario'
		public Assignment getScenarioAssignment_2_1() { return cScenarioAssignment_2_1; }
		
		//'scenario'
		public Keyword getScenarioScenarioKeyword_2_1_0() { return cScenarioScenarioKeyword_2_1_0; }
		
		//worldviewBound?='worldview'
		public Assignment getWorldviewBoundAssignment_2_2() { return cWorldviewBoundAssignment_2_2; }
		
		//'worldview'
		public Keyword getWorldviewBoundWorldviewKeyword_2_2_0() { return cWorldviewBoundWorldviewKeyword_2_2_0; }
		
		//name=PathName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_3_0() { return cNamePathNameParserRuleCall_3_0; }
		
		//docstring=STRING?
		public Assignment getDocstringAssignment_4() { return cDocstringAssignment_4; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_4_0() { return cDocstringSTRINGTerminalRuleCall_4_0; }
		
		//('using' imported+=Import (=> ',' imported+=Import)*)? & ('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)?
		//& ('covering' coverage+=Function (=> ',' coverage+=Function)*)? & ('in' 'domain' (rootDomain?='root' |
		//domainConcept=Concept))? & ('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName*))? &
		//('version' version=VersionNumber)? & ('resolve' ('from' lookupNamespace+=PathName*)? & ('outside'
		//blacklistNamespace+=PathName*)? & ('using' weights=Metadata)?)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }
		
		//('using' imported+=Import (=> ',' imported+=Import)*)?
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//'using'
		public Keyword getUsingKeyword_5_0_0() { return cUsingKeyword_5_0_0; }
		
		//imported+=Import
		public Assignment getImportedAssignment_5_0_1() { return cImportedAssignment_5_0_1; }
		
		//Import
		public RuleCall getImportedImportParserRuleCall_5_0_1_0() { return cImportedImportParserRuleCall_5_0_1_0; }
		
		//(=> ',' imported+=Import)*
		public Group getGroup_5_0_2() { return cGroup_5_0_2; }
		
		//=> ','
		public Keyword getCommaKeyword_5_0_2_0() { return cCommaKeyword_5_0_2_0; }
		
		//imported+=Import
		public Assignment getImportedAssignment_5_0_2_1() { return cImportedAssignment_5_0_2_1; }
		
		//Import
		public RuleCall getImportedImportParserRuleCall_5_0_2_1_0() { return cImportedImportParserRuleCall_5_0_2_1_0; }
		
		//('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'imports'
		public Keyword getImportsKeyword_5_1_0() { return cImportsKeyword_5_1_0; }
		
		//owlImports+=OwlImport
		public Assignment getOwlImportsAssignment_5_1_1() { return cOwlImportsAssignment_5_1_1; }
		
		//OwlImport
		public RuleCall getOwlImportsOwlImportParserRuleCall_5_1_1_0() { return cOwlImportsOwlImportParserRuleCall_5_1_1_0; }
		
		//(',' owlImports+=OwlImport)*
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//','
		public Keyword getCommaKeyword_5_1_2_0() { return cCommaKeyword_5_1_2_0; }
		
		//owlImports+=OwlImport
		public Assignment getOwlImportsAssignment_5_1_2_1() { return cOwlImportsAssignment_5_1_2_1; }
		
		//OwlImport
		public RuleCall getOwlImportsOwlImportParserRuleCall_5_1_2_1_0() { return cOwlImportsOwlImportParserRuleCall_5_1_2_1_0; }
		
		//('covering' coverage+=Function (=> ',' coverage+=Function)*)?
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'covering'
		public Keyword getCoveringKeyword_5_2_0() { return cCoveringKeyword_5_2_0; }
		
		//coverage+=Function
		public Assignment getCoverageAssignment_5_2_1() { return cCoverageAssignment_5_2_1; }
		
		//Function
		public RuleCall getCoverageFunctionParserRuleCall_5_2_1_0() { return cCoverageFunctionParserRuleCall_5_2_1_0; }
		
		//(=> ',' coverage+=Function)*
		public Group getGroup_5_2_2() { return cGroup_5_2_2; }
		
		//=> ','
		public Keyword getCommaKeyword_5_2_2_0() { return cCommaKeyword_5_2_2_0; }
		
		//coverage+=Function
		public Assignment getCoverageAssignment_5_2_2_1() { return cCoverageAssignment_5_2_2_1; }
		
		//Function
		public RuleCall getCoverageFunctionParserRuleCall_5_2_2_1_0() { return cCoverageFunctionParserRuleCall_5_2_2_1_0; }
		
		//('in' 'domain' (rootDomain?='root' | domainConcept=Concept))?
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//'in'
		public Keyword getInKeyword_5_3_0() { return cInKeyword_5_3_0; }
		
		//'domain'
		public Keyword getDomainKeyword_5_3_1() { return cDomainKeyword_5_3_1; }
		
		//rootDomain?='root' | domainConcept=Concept
		public Alternatives getAlternatives_5_3_2() { return cAlternatives_5_3_2; }
		
		//rootDomain?='root'
		public Assignment getRootDomainAssignment_5_3_2_0() { return cRootDomainAssignment_5_3_2_0; }
		
		//'root'
		public Keyword getRootDomainRootKeyword_5_3_2_0_0() { return cRootDomainRootKeyword_5_3_2_0_0; }
		
		//domainConcept=Concept
		public Assignment getDomainConceptAssignment_5_3_2_1() { return cDomainConceptAssignment_5_3_2_1; }
		
		//Concept
		public RuleCall getDomainConceptConceptParserRuleCall_5_3_2_1_0() { return cDomainConceptConceptParserRuleCall_5_3_2_1_0; }
		
		//('disjoint' 'with' disjointNamespaces+=PathName (',' disjointNamespaces+=PathName*))?
		public Group getGroup_5_4() { return cGroup_5_4; }
		
		//'disjoint'
		public Keyword getDisjointKeyword_5_4_0() { return cDisjointKeyword_5_4_0; }
		
		//'with'
		public Keyword getWithKeyword_5_4_1() { return cWithKeyword_5_4_1; }
		
		//disjointNamespaces+=PathName
		public Assignment getDisjointNamespacesAssignment_5_4_2() { return cDisjointNamespacesAssignment_5_4_2; }
		
		//PathName
		public RuleCall getDisjointNamespacesPathNameParserRuleCall_5_4_2_0() { return cDisjointNamespacesPathNameParserRuleCall_5_4_2_0; }
		
		//',' disjointNamespaces+=PathName*
		public Group getGroup_5_4_3() { return cGroup_5_4_3; }
		
		//','
		public Keyword getCommaKeyword_5_4_3_0() { return cCommaKeyword_5_4_3_0; }
		
		//disjointNamespaces+=PathName*
		public Assignment getDisjointNamespacesAssignment_5_4_3_1() { return cDisjointNamespacesAssignment_5_4_3_1; }
		
		//PathName
		public RuleCall getDisjointNamespacesPathNameParserRuleCall_5_4_3_1_0() { return cDisjointNamespacesPathNameParserRuleCall_5_4_3_1_0; }
		
		//('version' version=VersionNumber)?
		public Group getGroup_5_5() { return cGroup_5_5; }
		
		//'version'
		public Keyword getVersionKeyword_5_5_0() { return cVersionKeyword_5_5_0; }
		
		//version=VersionNumber
		public Assignment getVersionAssignment_5_5_1() { return cVersionAssignment_5_5_1; }
		
		//VersionNumber
		public RuleCall getVersionVersionNumberParserRuleCall_5_5_1_0() { return cVersionVersionNumberParserRuleCall_5_5_1_0; }
		
		//('resolve' ('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using'
		//weights=Metadata)?)?
		public UnorderedGroup getUnorderedGroup_5_6() { return cUnorderedGroup_5_6; }
		
		//'resolve' ('from' lookupNamespace+=PathName*)?
		public Group getGroup_5_6_0() { return cGroup_5_6_0; }
		
		//'resolve'
		public Keyword getResolveKeyword_5_6_0_0() { return cResolveKeyword_5_6_0_0; }
		
		//('from' lookupNamespace+=PathName*)?
		public Group getGroup_5_6_0_1() { return cGroup_5_6_0_1; }
		
		//'from'
		public Keyword getFromKeyword_5_6_0_1_0() { return cFromKeyword_5_6_0_1_0; }
		
		//lookupNamespace+=PathName*
		public Assignment getLookupNamespaceAssignment_5_6_0_1_1() { return cLookupNamespaceAssignment_5_6_0_1_1; }
		
		//PathName
		public RuleCall getLookupNamespacePathNameParserRuleCall_5_6_0_1_1_0() { return cLookupNamespacePathNameParserRuleCall_5_6_0_1_1_0; }
		
		//('outside' blacklistNamespace+=PathName*)?
		public Group getGroup_5_6_1() { return cGroup_5_6_1; }
		
		//'outside'
		public Keyword getOutsideKeyword_5_6_1_0() { return cOutsideKeyword_5_6_1_0; }
		
		//blacklistNamespace+=PathName*
		public Assignment getBlacklistNamespaceAssignment_5_6_1_1() { return cBlacklistNamespaceAssignment_5_6_1_1; }
		
		//PathName
		public RuleCall getBlacklistNamespacePathNameParserRuleCall_5_6_1_1_0() { return cBlacklistNamespacePathNameParserRuleCall_5_6_1_1_0; }
		
		//('using' weights=Metadata)?
		public Group getGroup_5_6_2() { return cGroup_5_6_2; }
		
		//'using'
		public Keyword getUsingKeyword_5_6_2_0() { return cUsingKeyword_5_6_2_0; }
		
		//weights=Metadata
		public Assignment getWeightsAssignment_5_6_2_1() { return cWeightsAssignment_5_6_2_1; }
		
		//Metadata
		public RuleCall getWeightsMetadataParserRuleCall_5_6_2_1_0() { return cWeightsMetadataParserRuleCall_5_6_2_1_0; }
		
		//('with' 'metadata' metadata=Metadata)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'with'
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_6_1() { return cMetadataKeyword_6_1; }
		
		//metadata=Metadata
		public Assignment getMetadataAssignment_6_2() { return cMetadataAssignment_6_2; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_6_2_0() { return cMetadataMetadataParserRuleCall_6_2_0; }
		
		//('with' 'documentation' documentation=Metadata)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }
		
		//'documentation'
		public Keyword getDocumentationKeyword_7_1() { return cDocumentationKeyword_7_1; }
		
		//documentation=Metadata
		public Assignment getDocumentationAssignment_7_2() { return cDocumentationAssignment_7_2; }
		
		//Metadata
		public RuleCall getDocumentationMetadataParserRuleCall_7_2_0() { return cDocumentationMetadataParserRuleCall_7_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class OwlImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.OwlImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPrefixAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrefixLOWERCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cPrefixAssignment_1_1.eContents().get(0);
		
		//OwlImport:
		//	name=STRING ('as' prefix=LOWERCASE_ID);
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ('as' prefix=LOWERCASE_ID)
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//'as' prefix=LOWERCASE_ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//prefix=LOWERCASE_ID
		public Assignment getPrefixAssignment_1_1() { return cPrefixAssignment_1_1; }
		
		//LOWERCASE_ID
		public RuleCall getPrefixLOWERCASE_IDTerminalRuleCall_1_1_0() { return cPrefixLOWERCASE_IDTerminalRuleCall_1_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cImportsAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cImportsListParserRuleCall_0_0_0_0 = (RuleCall)cImportsAssignment_0_0_0.eContents().get(0);
		private final Assignment cStarAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cStarAsteriskKeyword_0_0_1_0 = (Keyword)cStarAssignment_0_0_1.eContents().get(0);
		private final Keyword cFromKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePathNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Import:
		//	((imports=List | star?='*') 'from')? name=PathName /*[Namespace|PathName]*/;
		@Override public ParserRule getRule() { return rule; }
		
		//((imports=List | star?='*') 'from')? name=PathName
		public Group getGroup() { return cGroup; }
		
		//((imports=List | star?='*') 'from')?
		public Group getGroup_0() { return cGroup_0; }
		
		//imports=List | star?='*'
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//imports=List
		public Assignment getImportsAssignment_0_0_0() { return cImportsAssignment_0_0_0; }
		
		//List
		public RuleCall getImportsListParserRuleCall_0_0_0_0() { return cImportsListParserRuleCall_0_0_0_0; }
		
		//star?='*'
		public Assignment getStarAssignment_0_0_1() { return cStarAssignment_0_0_1; }
		
		//'*'
		public Keyword getStarAsteriskKeyword_0_0_1_0() { return cStarAsteriskKeyword_0_0_1_0; }
		
		//'from'
		public Keyword getFromKeyword_0_1() { return cFromKeyword_0_1; }
		
		//name=PathName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_1_0() { return cNamePathNameParserRuleCall_1_0; }
	}
	public class UrnIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.UrnId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrnKlabKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPathNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPathNameParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPathParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cVersionNumberParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cNumberSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		
		///**
		// * URN is 4 sections and admits a version number and a fragment (with only lowercase_id chars in it). It is
		// * legal, but not required, to start with the default prefix urn:klab:
		// */
		//UrnId:
		//	'urn:klab:'? PathName ':' PathName ':' PathName ':' Path (':' VersionNumber)? ('#' LOWERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'urn:klab:'? PathName ':' PathName ':' PathName ':' Path (':' VersionNumber)? ('#' LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//'urn:klab:'?
		public Keyword getUrnKlabKeyword_0() { return cUrnKlabKeyword_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_1() { return cPathNameParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_3() { return cPathNameParserRuleCall_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_5() { return cPathNameParserRuleCall_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//Path
		public RuleCall getPathParserRuleCall_7() { return cPathParserRuleCall_7; }
		
		//(':' VersionNumber)?
		public Group getGroup_8() { return cGroup_8; }
		
		//':'
		public Keyword getColonKeyword_8_0() { return cColonKeyword_8_0; }
		
		//VersionNumber
		public RuleCall getVersionNumberParserRuleCall_8_1() { return cVersionNumberParserRuleCall_8_1; }
		
		//('#' LOWERCASE_ID)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'#'
		public Keyword getNumberSignKeyword_9_0() { return cNumberSignKeyword_9_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_9_1() { return cLOWERCASE_IDTerminalRuleCall_9_1; }
	}
	public class LocalFilePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.LocalFilePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_1_1_2 = (RuleCall)cAlternatives_1_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		///**
		// * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
		// * on whether there is an encoder for their file extension.
		// */
		//LocalFilePath:
		//	(CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID) ('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))* ('.'
		//	LOWERCASE_ID)? ('#' LOWERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID) ('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))* ('.'
		//LOWERCASE_ID)? ('#' LOWERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_0_0() { return cCAMELCASE_IDTerminalRuleCall_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_1() { return cLOWERCASE_IDTerminalRuleCall_0_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_0_2() { return cLOWERCASE_DASHIDTerminalRuleCall_0_2; }
		
		//('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_1_1_0() { return cCAMELCASE_IDTerminalRuleCall_1_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1_1; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_1_1_2() { return cLOWERCASE_DASHIDTerminalRuleCall_1_1_2; }
		
		//('.' LOWERCASE_ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_2_1() { return cLOWERCASE_IDTerminalRuleCall_2_1; }
		
		//('#' LOWERCASE_ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_1() { return cLOWERCASE_IDTerminalRuleCall_3_1; }
	}
	public class ObserveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ObserveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cObserveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyObserveStatementBodyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//ObserveStatement:
		//	annotations+=Annotation* 'observe' body=ObserveStatementBody;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* 'observe' body=ObserveStatementBody
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//'observe'
		public Keyword getObserveKeyword_1() { return cObserveKeyword_1; }
		
		//body=ObserveStatementBody
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ObserveStatementBody
		public RuleCall getBodyObserveStatementBodyParserRuleCall_2_0() { return cBodyObserveStatementBodyParserRuleCall_2_0; }
	}
	public class ObserveStatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.Kim.ObserveStatementBody");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Assignment cConceptAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConceptNamedObservableSemanticsParserRuleCall_0_0_0 = (RuleCall)cConceptAssignment_0_0.eContents().get(0);
		private final Assignment cDocstringAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cDocstringAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cExtendsKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cParentsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cParentsPathNameParserRuleCall_0_2_1_0 = (RuleCall)cParentsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cParentsAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cParentsPathNameParserRuleCall_0_2_2_1_0 = (RuleCall)cParentsAssignment_0_2_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cObservingKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_3_1 = (Alternatives)cGroup_0_3.eContents().get(1);
		private final Group cGroup_0_3_1_0 = (Group)cAlternatives_0_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3_1_0_0 = (Keyword)cGroup_0_3_1_0.eContents().get(0);
		private final Assignment cObservationsAssignment_0_3_1_0_1 = (Assignment)cGroup_0_3_1_0.eContents().get(1);
		private final RuleCall cObservationsObserveStatementBodyParserRuleCall_0_3_1_0_1_0 = (RuleCall)cObservationsAssignment_0_3_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_1_0_2 = (Keyword)cGroup_0_3_1_0.eContents().get(2);
		private final Assignment cStatesAssignment_0_3_1_1 = (Assignment)cAlternatives_0_3_1.eContents().get(1);
		private final RuleCall cStatesObservableSemanticsParserRuleCall_0_3_1_1_0 = (RuleCall)cStatesAssignment_0_3_1_1.eContents().get(0);
		private final Group cGroup_0_3_2 = (Group)cGroup_0_3.eContents().get(2);
		private final Keyword cCommaKeyword_0_3_2_0 = (Keyword)cGroup_0_3_2.eContents().get(0);
		private final Alternatives cAlternatives_0_3_2_1 = (Alternatives)cGroup_0_3_2.eContents().get(1);
		private final Group cGroup_0_3_2_1_0 = (Group)cAlternatives_0_3_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_3_2_1_0_0 = (Keyword)cGroup_0_3_2_1_0.eContents().get(0);
		private final Assignment cObservationsAssignment_0_3_2_1_0_1 = (Assignment)cGroup_0_3_2_1_0.eContents().get(1);
		private final RuleCall cObservationsObserveStatementBodyParserRuleCall_0_3_2_1_0_1_0 = (RuleCall)cObservationsAssignment_0_3_2_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_2_1_0_2 = (Keyword)cGroup_0_3_2_1_0.eContents().get(2);
		private final Assignment cStatesAssignment_0_3_2_1_1 = (Assignment)cAlternatives_0_3_2_1.eContents().get(1);
		private final RuleCall cStatesObservableSemanticsParserRuleCall_0_3_2_1_1_0 = (RuleCall)cStatesAssignment_0_3_2_1_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cUsingKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cAccessorAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cAccessorFunctionParserRuleCall_0_4_1_0 = (RuleCall)cAccessorAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Assignment cActionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cActionsActionSpecificationParserRuleCall_1_0_0 = (RuleCall)cActionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cWithKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cMetadataKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMetadataAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMetadataMetadataParserRuleCall_1_1_2_0 = (RuleCall)cMetadataAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cWithKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cDocumentationKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cDocumentationAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cDocumentationMetadataParserRuleCall_1_2_2_0 = (RuleCall)cDocumentationAssignment_1_2_2.eContents().get(0);
		
		///**
		// * FIXME the child observation in parenthesis conflicts with a standard declaration and cannot be
		// * specified.
		// */
		//ObserveStatementBody:
		//	concept=NamedObservableSemantics docstring=STRING? ('extends' parents+=PathName (',' parents+=PathName)*)?
		//	('observing' ('(' observations+=ObserveStatementBody ')' | states+=ObservableSemantics) (',' ('('
		//	observations+=ObserveStatementBody ')' | states+=ObservableSemantics))*)? ('using' accessor=Function?)? &
		//	actions+=ActionSpecification* ('with' 'metadata' metadata=Metadata)? ('with' 'documentation'
		//	documentation=Metadata)?;
		@Override public ParserRule getRule() { return rule; }
		
		//concept=NamedObservableSemantics docstring=STRING? ('extends' parents+=PathName (',' parents+=PathName)*)? ('observing'
		//('(' observations+=ObserveStatementBody ')' | states+=ObservableSemantics) (',' ('('
		//observations+=ObserveStatementBody ')' | states+=ObservableSemantics))*)? ('using' accessor=Function?)? &
		//actions+=ActionSpecification* ('with' 'metadata' metadata=Metadata)? ('with' 'documentation' documentation=Metadata)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//concept=NamedObservableSemantics docstring=STRING? ('extends' parents+=PathName (',' parents+=PathName)*)? ('observing'
		//('(' observations+=ObserveStatementBody ')' | states+=ObservableSemantics) (',' ('('
		//observations+=ObserveStatementBody ')' | states+=ObservableSemantics))*)? ('using' accessor=Function?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//concept=NamedObservableSemantics
		public Assignment getConceptAssignment_0_0() { return cConceptAssignment_0_0; }
		
		//NamedObservableSemantics
		public RuleCall getConceptNamedObservableSemanticsParserRuleCall_0_0_0() { return cConceptNamedObservableSemanticsParserRuleCall_0_0_0; }
		
		//docstring=STRING?
		public Assignment getDocstringAssignment_0_1() { return cDocstringAssignment_0_1; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_0_1_0() { return cDocstringSTRINGTerminalRuleCall_0_1_0; }
		
		//('extends' parents+=PathName (',' parents+=PathName)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_0_2_0() { return cExtendsKeyword_0_2_0; }
		
		//parents+=PathName
		public Assignment getParentsAssignment_0_2_1() { return cParentsAssignment_0_2_1; }
		
		//PathName
		public RuleCall getParentsPathNameParserRuleCall_0_2_1_0() { return cParentsPathNameParserRuleCall_0_2_1_0; }
		
		//(',' parents+=PathName)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }
		
		//parents+=PathName
		public Assignment getParentsAssignment_0_2_2_1() { return cParentsAssignment_0_2_2_1; }
		
		//PathName
		public RuleCall getParentsPathNameParserRuleCall_0_2_2_1_0() { return cParentsPathNameParserRuleCall_0_2_2_1_0; }
		
		//('observing' ('(' observations+=ObserveStatementBody ')' | states+=ObservableSemantics) (',' ('('
		//observations+=ObserveStatementBody ')' | states+=ObservableSemantics))*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'observing'
		public Keyword getObservingKeyword_0_3_0() { return cObservingKeyword_0_3_0; }
		
		//// validator will ensure that the semantics has an associated value
		// '(' observations+=ObserveStatementBody ')' |
		//states+=ObservableSemantics
		public Alternatives getAlternatives_0_3_1() { return cAlternatives_0_3_1; }
		
		//'(' observations+=ObserveStatementBody ')'
		public Group getGroup_0_3_1_0() { return cGroup_0_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3_1_0_0() { return cLeftParenthesisKeyword_0_3_1_0_0; }
		
		//observations+=ObserveStatementBody
		public Assignment getObservationsAssignment_0_3_1_0_1() { return cObservationsAssignment_0_3_1_0_1; }
		
		//ObserveStatementBody
		public RuleCall getObservationsObserveStatementBodyParserRuleCall_0_3_1_0_1_0() { return cObservationsObserveStatementBodyParserRuleCall_0_3_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3_1_0_2() { return cRightParenthesisKeyword_0_3_1_0_2; }
		
		//states+=ObservableSemantics
		public Assignment getStatesAssignment_0_3_1_1() { return cStatesAssignment_0_3_1_1; }
		
		//ObservableSemantics
		public RuleCall getStatesObservableSemanticsParserRuleCall_0_3_1_1_0() { return cStatesObservableSemanticsParserRuleCall_0_3_1_1_0; }
		
		//(',' ('(' observations+=ObserveStatementBody ')' | states+=ObservableSemantics))*
		public Group getGroup_0_3_2() { return cGroup_0_3_2; }
		
		//','
		public Keyword getCommaKeyword_0_3_2_0() { return cCommaKeyword_0_3_2_0; }
		
		//'(' observations+=ObserveStatementBody ')' | states+=ObservableSemantics
		public Alternatives getAlternatives_0_3_2_1() { return cAlternatives_0_3_2_1; }
		
		//'(' observations+=ObserveStatementBody ')'
		public Group getGroup_0_3_2_1_0() { return cGroup_0_3_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3_2_1_0_0() { return cLeftParenthesisKeyword_0_3_2_1_0_0; }
		
		//observations+=ObserveStatementBody
		public Assignment getObservationsAssignment_0_3_2_1_0_1() { return cObservationsAssignment_0_3_2_1_0_1; }
		
		//ObserveStatementBody
		public RuleCall getObservationsObserveStatementBodyParserRuleCall_0_3_2_1_0_1_0() { return cObservationsObserveStatementBodyParserRuleCall_0_3_2_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3_2_1_0_2() { return cRightParenthesisKeyword_0_3_2_1_0_2; }
		
		//states+=ObservableSemantics
		public Assignment getStatesAssignment_0_3_2_1_1() { return cStatesAssignment_0_3_2_1_1; }
		
		//ObservableSemantics
		public RuleCall getStatesObservableSemanticsParserRuleCall_0_3_2_1_1_0() { return cStatesObservableSemanticsParserRuleCall_0_3_2_1_1_0; }
		
		//('using' accessor=Function?)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'using'
		public Keyword getUsingKeyword_0_4_0() { return cUsingKeyword_0_4_0; }
		
		//accessor=Function?
		public Assignment getAccessorAssignment_0_4_1() { return cAccessorAssignment_0_4_1; }
		
		//Function
		public RuleCall getAccessorFunctionParserRuleCall_0_4_1_0() { return cAccessorFunctionParserRuleCall_0_4_1_0; }
		
		//actions+=ActionSpecification* ('with' 'metadata' metadata=Metadata)? ('with' 'documentation' documentation=Metadata)?
		public Group getGroup_1() { return cGroup_1; }
		
		//actions+=ActionSpecification*
		public Assignment getActionsAssignment_1_0() { return cActionsAssignment_1_0; }
		
		//ActionSpecification
		public RuleCall getActionsActionSpecificationParserRuleCall_1_0_0() { return cActionsActionSpecificationParserRuleCall_1_0_0; }
		
		//('with' 'metadata' metadata=Metadata)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'with'
		public Keyword getWithKeyword_1_1_0() { return cWithKeyword_1_1_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_1_1_1() { return cMetadataKeyword_1_1_1; }
		
		//metadata=Metadata
		public Assignment getMetadataAssignment_1_1_2() { return cMetadataAssignment_1_1_2; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_1_1_2_0() { return cMetadataMetadataParserRuleCall_1_1_2_0; }
		
		//('with' 'documentation' documentation=Metadata)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'with'
		public Keyword getWithKeyword_1_2_0() { return cWithKeyword_1_2_0; }
		
		//'documentation'
		public Keyword getDocumentationKeyword_1_2_1() { return cDocumentationKeyword_1_2_1; }
		
		//documentation=Metadata
		public Assignment getDocumentationAssignment_1_2_2() { return cDocumentationAssignment_1_2_2; }
		
		//Metadata
		public RuleCall getDocumentationMetadataParserRuleCall_1_2_2_0() { return cDocumentationMetadataParserRuleCall_1_2_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final ModelStatementElements pModelStatement;
	private final ModelBodyStatementElements pModelBodyStatement;
	private final ContextualizationElements pContextualization;
	private final AttributeIdentifierElements pAttributeIdentifier;
	private final ClassificationElements pClassification;
	private final ClassifierElements pClassifier;
	private final ClassifierRHSElements pClassifierRHS;
	private final LookupTableElements pLookupTable;
	private final UrnElements pUrn;
	private final TableElements pTable;
	private final TableClassifierElements pTableClassifier;
	private final ActionSpecificationElements pActionSpecification;
	private final FunctionOrIDElements pFunctionOrID;
	private final ActionElements pAction;
	private final ValueAssignmentElements pValueAssignment;
	private final ComputableValueElements pComputableValue;
	private final ValueExecutionElements pValueExecution;
	private final ExecutableValueElements pExecutableValue;
	private final MODEL_TYPEElements pMODEL_TYPE;
	private final NamespaceElements pNamespace;
	private final OwlImportElements pOwlImport;
	private final ImportElements pImport;
	private final UrnIdElements pUrnId;
	private final LocalFilePathElements pLocalFilePath;
	private final ObserveStatementElements pObserveStatement;
	private final ObserveStatementBodyElements pObserveStatementBody;
	
	private final Grammar grammar;
	
	private final KnowledgeDeclarationGrammarAccess gaKnowledgeDeclaration;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KimGrammarAccess(GrammarProvider grammarProvider,
			KnowledgeDeclarationGrammarAccess gaKnowledgeDeclaration,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKnowledgeDeclaration = gaKnowledgeDeclaration;
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pModelStatement = new ModelStatementElements();
		this.pModelBodyStatement = new ModelBodyStatementElements();
		this.pContextualization = new ContextualizationElements();
		this.pAttributeIdentifier = new AttributeIdentifierElements();
		this.pClassification = new ClassificationElements();
		this.pClassifier = new ClassifierElements();
		this.pClassifierRHS = new ClassifierRHSElements();
		this.pLookupTable = new LookupTableElements();
		this.pUrn = new UrnElements();
		this.pTable = new TableElements();
		this.pTableClassifier = new TableClassifierElements();
		this.pActionSpecification = new ActionSpecificationElements();
		this.pFunctionOrID = new FunctionOrIDElements();
		this.pAction = new ActionElements();
		this.pValueAssignment = new ValueAssignmentElements();
		this.pComputableValue = new ComputableValueElements();
		this.pValueExecution = new ValueExecutionElements();
		this.pExecutableValue = new ExecutableValueElements();
		this.pMODEL_TYPE = new MODEL_TYPEElements();
		this.pNamespace = new NamespaceElements();
		this.pOwlImport = new OwlImportElements();
		this.pImport = new ImportElements();
		this.pUrnId = new UrnIdElements();
		this.pLocalFilePath = new LocalFilePathElements();
		this.pObserveStatement = new ObserveStatementElements();
		this.pObserveStatementBody = new ObserveStatementBodyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.integratedmodelling.kim.Kim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public KnowledgeDeclarationGrammarAccess getKnowledgeDeclarationGrammarAccess() {
		return gaKnowledgeDeclaration;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * Namespace is mandatory at the beginning, but we check at validation of the
	// * first statement, so that special situations such as empty files or default 
	// * namespaces are possible without errors.
	// */
	//Model:
	//	namespace=Namespace? statements+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//	conceptStatement=ConceptStatement ';' | modelStatement=ModelStatement ';' |
	//	upperOntologyStatement=UpperOntologyDefinition ';' | observeStatement=ObserveStatement ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ModelStatement:
	//	annotations+=Annotation* (inactive?='void'? & private?='private'?) model=MODEL_TYPE body=ModelBodyStatement;
	public ModelStatementElements getModelStatementAccess() {
		return pModelStatement;
	}
	
	public ParserRule getModelStatementRule() {
		return getModelStatementAccess().getRule();
	}
	
	//ModelBodyStatement:
	//	instantiator?='each'? ((urn=Urn | function=Function | number=Number | boolean=('true' | 'false') |
	//	concept=SimpleObservableSemantics) 'as')? (name=LOWERCASE_ID | observables+=ObservableSemantics (','
	//	observables+=ObservableSemantics)*) ('observing' dependencies+=ObservableSemantics (','
	//	dependencies+=ObservableSemantics)*)? ('using' contextualizers+=Contextualization (','
	//	contextualizers+=Contextualization)*)? actions+=ActionSpecification* ('with' 'metadata' metadata=Metadata)? ('with'
	//	'documentation' documentation=Documentation)?;
	public ModelBodyStatementElements getModelBodyStatementAccess() {
		return pModelBodyStatement;
	}
	
	public ParserRule getModelBodyStatementRule() {
		return getModelBodyStatementAccess().getRule();
	}
	
	//Contextualization:
	//	value=ValueExecution | ('classification' | discretization?='discretization') '(' classification=Classification ')' |
	//	'lookup' lookupTable=LookupTable | ('classified' | discretization?='discretized') 'according' 'to'
	//	classificationProperty=PropertyId;
	public ContextualizationElements getContextualizationAccess() {
		return pContextualization;
	}
	
	public ParserRule getContextualizationRule() {
		return getContextualizationAccess().getRule();
	}
	
	//AttributeIdentifier:
	//	name=(LOWERCASE_ID | UPPERCASE_ID) | function=Function | expression=EXPR;
	public AttributeIdentifierElements getAttributeIdentifierAccess() {
		return pAttributeIdentifier;
	}
	
	public ParserRule getAttributeIdentifierRule() {
		return getAttributeIdentifierAccess().getRule();
	}
	
	//Classification:
	//	classifiers+=Classifier (=> ',' classifiers+=Classifier)*;
	public ClassificationElements getClassificationAccess() {
		return pClassification;
	}
	
	public ParserRule getClassificationRule() {
		return getClassificationAccess().getRule();
	}
	
	//Classifier:
	//	declaration=ConceptDeclaration (otherwise?='otherwise' | ('if' | negated?='unless') classifier=ClassifierRHS)?;
	public ClassifierElements getClassifierAccess() {
		return pClassifier;
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}
	
	//ClassifierRHS:
	//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
	//	(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | concept=ConceptDeclaration |
	//	'(' toResolve+=ConceptDeclaration (=> ',' toResolve+=ConceptDeclaration)* ')' | op=REL_OPERATOR expression=Number |
	//	nodata='unknown' | star?='*';
	public ClassifierRHSElements getClassifierRHSAccess() {
		return pClassifierRHS;
	}
	
	public ParserRule getClassifierRHSRule() {
		return getClassifierRHSAccess().getRule();
	}
	
	//LookupTable:
	//	'(' args+=(LOWERCASE_ID | '?') (',' args+=(LOWERCASE_ID | '?'))* ')' 'into' ('table' table=Table | ref=LOWERCASE_ID);
	public LookupTableElements getLookupTableAccess() {
		return pLookupTable;
	}
	
	public ParserRule getLookupTableRule() {
		return getLookupTableAccess().getRule();
	}
	
	//Urn:
	//	name=(UrnId | STRING | LocalFilePath);
	public UrnElements getUrnAccess() {
		return pUrn;
	}
	
	public ParserRule getUrnRule() {
		return getUrnAccess().getRule();
	}
	
	//Table:
	//	'(' (args+=LOWERCASE_ID (',' args+=LOWERCASE_ID)* | expr+=EXPR expr+=EXPR*) ')' ':' elements+=TableClassifier (=> ','
	//	elements+=TableClassifier)*;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//TableClassifier ClassifierRHS:
	//	(boolean='true' | boolean='false') | int0=Number (leftLimit='inclusive' | 'exclusive')? => 'to' => int1=Number
	//	(rightLimit='inclusive' | 'exclusive')? | num=Number | 'in' set=List | string=STRING | concept=ConceptDeclaration |
	//	op=REL_OPERATOR expression=Number | nodata='unknown' | star?='*' | anything?='#';
	public TableClassifierElements getTableClassifierAccess() {
		return pTableClassifier;
	}
	
	public ParserRule getTableClassifierRule() {
		return getTableClassifierAccess().getRule();
	}
	
	//ActionSpecification:
	//	integrated?='aggregated'? 'over' domain+=FunctionOrID (=> ',' domain+=FunctionOrID)* (actions+=Action (=> ','
	//	actions+=Action)*)? | trigger?='on' (initialization?='definition' | resolution?='resolution' |
	//	instantiation?='instantiation' | termination?='termination' | stateInitialization?='initialization' |
	//	event=ConceptDeclaration ('in' (anyContextEvent?='context' | relatedEventContext?='related'
	//	eventContext=ConceptDeclaration))?) parameters=List? (actions+=Action (=> ',' actions+=Action)*)?;
	public ActionSpecificationElements getActionSpecificationAccess() {
		return pActionSpecification;
	}
	
	public ParserRule getActionSpecificationRule() {
		return getActionSpecificationAccess().getRule();
	}
	
	//FunctionOrID:
	//	function=Function | functionId=(LOWERCASE_ID | NamespaceId);
	public FunctionOrIDElements getFunctionOrIDAccess() {
		return pFunctionOrID;
	}
	
	public ParserRule getFunctionOrIDRule() {
		return getFunctionOrIDAccess().getRule();
	}
	
	//Action:
	//	(change?='change' | set?='set') assignments+=ValueAssignment (',' assignments+=ValueAssignment)* (=> ('if' |
	//	conditionNegative?='unless') condition=Value)? | integrate?='integrate' assignments+=ValueAssignment (','
	//	assignments+=ValueAssignment)* (=> ('if' | conditionNegative?='unless') condition=Value)? | do?='do'
	//	executed+=ValueExecution (',' executed+=ValueExecution)* (=> ('if' | conditionNegative?='unless') condition=Value)? |
	//	move?='move' (where=Value | away?='away') => condition=Value?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ValueAssignment:
	//	(target=LOWERCASE_ID? 'to')? assignedValue=ComputableValue;
	public ValueAssignmentElements getValueAssignmentAccess() {
		return pValueAssignment;
	}
	
	public ParserRule getValueAssignmentRule() {
		return getValueAssignmentAccess().getRule();
	}
	
	///*
	// * this is made necessary by Xtext's inability of properly generating code when
	// * superclasses come from imported grammars.
	// */
	//ComputableValue:
	//	literal=LiteralOrIdOrComma | function=Function | expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID |
	//	CAMELCASE_ID))? | id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID) | list=List | null?='unknown';
	public ComputableValueElements getComputableValueAccess() {
		return pComputableValue;
	}
	
	public ParserRule getComputableValueRule() {
		return getComputableValueAccess().getRule();
	}
	
	//ValueExecution ValueAssignment:
	//	execValue=ExecutableValue ('as' target=LOWERCASE_ID)?;
	public ValueExecutionElements getValueExecutionAccess() {
		return pValueExecution;
	}
	
	public ParserRule getValueExecutionRule() {
		return getValueExecutionAccess().getRule();
	}
	
	//ExecutableValue ComputableValue:
	//	function=Function | expr=EXPR ('in' language=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID))? | urn=UrnId;
	public ExecutableValueElements getExecutableValueAccess() {
		return pExecutableValue;
	}
	
	public ParserRule getExecutableValueRule() {
		return getExecutableValueAccess().getRule();
	}
	
	//MODEL_TYPE:
	//	'model' | 'assess' | 'learn' | 'number' | 'text' | 'boolean';
	public MODEL_TYPEElements getMODEL_TYPEAccess() {
		return pMODEL_TYPE;
	}
	
	public ParserRule getMODEL_TYPERule() {
		return getMODEL_TYPEAccess().getRule();
	}
	
	///*
	// * Namespace - entry point of all files. Only interactive session may start without this statement.
	// * A namespace may be a scenario - if so, nothing changes except its models will never be used from
	// * the DB unless the scenario is being computed (should be 'observe ... in scenario ....).
	// */
	//Namespace:
	//	annotations+=Annotation* (private?='private'? & inactive?='void'?) ('namespace' | scenario?='scenario' |
	//	worldviewBound?='worldview') name=PathName docstring=STRING? (('using' imported+=Import (=> ',' imported+=Import)*)?
	//	& ('imports' owlImports+=OwlImport (',' owlImports+=OwlImport)*)? & ('covering' coverage+=Function (=> ','
	//	coverage+=Function)*)? & ('in' 'domain' (rootDomain?='root' | domainConcept=Concept))? & ('disjoint' 'with'
	//	disjointNamespaces+=PathName (',' disjointNamespaces+=PathName*))? & ('version' version=VersionNumber)? & ('resolve'
	//	('from' lookupNamespace+=PathName*)? & ('outside' blacklistNamespace+=PathName*)? & ('using' weights=Metadata)?)?)
	//	('with' 'metadata' metadata=Metadata)? ('with' 'documentation' documentation=Metadata)? ';';
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}
	
	//OwlImport:
	//	name=STRING ('as' prefix=LOWERCASE_ID);
	public OwlImportElements getOwlImportAccess() {
		return pOwlImport;
	}
	
	public ParserRule getOwlImportRule() {
		return getOwlImportAccess().getRule();
	}
	
	//Import:
	//	((imports=List | star?='*') 'from')? name=PathName /*[Namespace|PathName]*/;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	///**
	// * URN is 4 sections and admits a version number and a fragment (with only lowercase_id chars in it). It is
	// * legal, but not required, to start with the default prefix urn:klab:
	// */
	//UrnId:
	//	'urn:klab:'? PathName ':' PathName ':' PathName ':' Path (':' VersionNumber)? ('#' LOWERCASE_ID)?;
	public UrnIdElements getUrnIdAccess() {
		return pUrnId;
	}
	
	public ParserRule getUrnIdRule() {
		return getUrnIdAccess().getRule();
	}
	
	///**
	// * Local file paths become locally based URNs and can be used wherever URNs are accepted. Their interpretation depends
	// * on whether there is an encoder for their file extension.
	// */
	//LocalFilePath:
	//	(CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID) ('/' (CAMELCASE_ID | LOWERCASE_ID | LOWERCASE_DASHID))* ('.'
	//	LOWERCASE_ID)? ('#' LOWERCASE_ID)?;
	public LocalFilePathElements getLocalFilePathAccess() {
		return pLocalFilePath;
	}
	
	public ParserRule getLocalFilePathRule() {
		return getLocalFilePathAccess().getRule();
	}
	
	//ObserveStatement:
	//	annotations+=Annotation* 'observe' body=ObserveStatementBody;
	public ObserveStatementElements getObserveStatementAccess() {
		return pObserveStatement;
	}
	
	public ParserRule getObserveStatementRule() {
		return getObserveStatementAccess().getRule();
	}
	
	///**
	// * FIXME the child observation in parenthesis conflicts with a standard declaration and cannot be
	// * specified.
	// */
	//ObserveStatementBody:
	//	concept=NamedObservableSemantics docstring=STRING? ('extends' parents+=PathName (',' parents+=PathName)*)?
	//	('observing' ('(' observations+=ObserveStatementBody ')' | states+=ObservableSemantics) (',' ('('
	//	observations+=ObserveStatementBody ')' | states+=ObservableSemantics))*)? ('using' accessor=Function?)? &
	//	actions+=ActionSpecification* ('with' 'metadata' metadata=Metadata)? ('with' 'documentation'
	//	documentation=Metadata)?;
	public ObserveStatementBodyElements getObserveStatementBodyAccess() {
		return pObserveStatementBody;
	}
	
	public ParserRule getObserveStatementBodyRule() {
		return getObserveStatementBodyAccess().getRule();
	}
	
	///**
	// * Observable semantics is a concept declaration with optional observation semantics and formal name.
	// */
	//ObservableSemantics:
	//	(value=Value 'as')? generic?='any'? declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to'
	//	downTo=(CAMELCASE_ID | NamespaceId))? & ('as' role=Concept)? & ('according' 'to' accordingTo=PropertyId)? & ('in'
	//	(unit=Unit | currency=Currency) | 'per' unit=Unit)? & (optional?='optional' | 'required')? & (from=Number 'to'
	//	to=Number)? & ('named' name=LOWERCASE_ID)?);
	public KnowledgeDeclarationGrammarAccess.ObservableSemanticsElements getObservableSemanticsAccess() {
		return gaKnowledgeDeclaration.getObservableSemanticsAccess();
	}
	
	public ParserRule getObservableSemanticsRule() {
		return getObservableSemanticsAccess().getRule();
	}
	
	//ConceptDeclaration:
	//	name=STRING? main+=Concept+ (('of' inherency=SimpleConceptDeclaration)? & ('for'
	//	motivation=SimpleConceptDeclaration)? & ('with' compresent=SimpleConceptDeclaration)? & ('caused' 'by'
	//	causant=SimpleConceptDeclaration)? & ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? & ('contained' 'in'
	//	container=SimpleConceptDeclaration)? & ('containing' contained=SimpleConceptDeclaration)? & ('causing'
	//	caused=SimpleConceptDeclaration)?) ('within' context=SimpleConceptDeclaration)?;
	public KnowledgeDeclarationGrammarAccess.ConceptDeclarationElements getConceptDeclarationAccess() {
		return gaKnowledgeDeclaration.getConceptDeclarationAccess();
	}
	
	public ParserRule getConceptDeclarationRule() {
		return getConceptDeclarationAccess().getRule();
	}
	
	//ConceptReference:
	//	name=CAMELCASE_ID | name=NamespaceId | templateType=('${' | '#{') (name='context' (type=CONCEPT_TYPE | 'extends'
	//	extends=Concept) | name='inherent' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='compresent'
	//	(type=CONCEPT_TYPE | 'extends' extends=Concept) | name='adjacent' (type=CONCEPT_TYPE | 'extends' extends=Concept) |
	//	name='container' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='contained' (type=CONCEPT_TYPE | 'extends'
	//	extends=Concept) | name='purpose' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='causant' (type=CONCEPT_TYPE
	//	| 'extends' extends=Concept) | name='caused' (type=CONCEPT_TYPE | 'extends' extends=Concept)) template?='}';
	public KnowledgeDeclarationGrammarAccess.ConceptReferenceElements getConceptReferenceAccess() {
		return gaKnowledgeDeclaration.getConceptReferenceAccess();
	}
	
	public ParserRule getConceptReferenceRule() {
		return getConceptReferenceAccess().getRule();
	}
	
	//OPERATOR_TARGET:
	//	'context' | 'inherent' | 'compresent' | 'adjacent' | 'container' | 'contained' | 'purpose' | 'causant' | 'caused';
	public KnowledgeDeclarationGrammarAccess.OPERATOR_TARGETElements getOPERATOR_TARGETAccess() {
		return gaKnowledgeDeclaration.getOPERATOR_TARGETAccess();
	}
	
	public ParserRule getOPERATOR_TARGETRule() {
		return getOPERATOR_TARGETAccess().getRule();
	}
	
	//Concept:
	//	negated?=('not' | 'no')? name=ConceptReference ('identified' 'as' (stringIdentifier=(ID | STRING) |
	//	intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))? | presence?='presence' 'of'
	//	concept=SimpleConceptDeclaration | count?='count' 'of' concept=SimpleConceptDeclaration | distance?='distance' ('to'
	//	| 'from') concept=SimpleConceptDeclaration | probability?='probability' 'of' concept=SimpleConceptDeclaration |
	//	assessment?='assessment' 'of' concept=SimpleConceptDeclaration | uncertainty?='uncertainty' 'of'
	//	concept=SimpleConceptDeclaration | type?='type' 'of' concept=SimpleConceptDeclaration |
	//	observability?='observability' 'of' concept=SimpleConceptDeclaration | proportion?='proportion' 'of'
	//	concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? | ratio?='ratio' 'of'
	//	concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration | value?='value' 'of'
	//	concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? | occurrence?='occurrence' 'of'
	//	concept=SimpleConceptDeclaration | '(' declaration=Expression ')';
	public KnowledgeDeclarationGrammarAccess.ConceptElements getConceptAccess() {
		return gaKnowledgeDeclaration.getConceptAccess();
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Expression ConceptDeclaration:
	//	Term;
	public KnowledgeDeclarationGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKnowledgeDeclaration.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Term ConceptDeclaration:
	//	Factor (operators+='or' operands+=Factor)*;
	public KnowledgeDeclarationGrammarAccess.TermElements getTermAccess() {
		return gaKnowledgeDeclaration.getTermAccess();
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor ConceptDeclaration:
	//	ConceptDeclaration (operators+=('and' | 'follows') operands+=Term)*;
	public KnowledgeDeclarationGrammarAccess.FactorElements getFactorAccess() {
		return gaKnowledgeDeclaration.getFactorAccess();
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	///*
	// * Declaration without inherency and context, used in Concept to ensure that
	// * the 'within' and 'of' remain outer-level unless parenthesesized.
	// */
	//SimpleConceptDeclaration ConceptDeclaration:
	//	name=STRING? main+=Concept+;
	public KnowledgeDeclarationGrammarAccess.SimpleConceptDeclarationElements getSimpleConceptDeclarationAccess() {
		return gaKnowledgeDeclaration.getSimpleConceptDeclarationAccess();
	}
	
	public ParserRule getSimpleConceptDeclarationRule() {
		return getSimpleConceptDeclarationAccess().getRule();
	}
	
	///*
	// * statement to connect specialized type or target of relationship to upper ontology
	// */ UpperOntologyDefinition:
	//	'model' ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent' |
	//	(propertySpecifiers+=PROPERTY_TYPE propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?) 'using'
	//	coreconcept=(NamespaceId | PropertyId) | operand=OPERATOR_TARGET 'using' property=(PropertyId | NamespaceId));
	public KnowledgeDeclarationGrammarAccess.UpperOntologyDefinitionElements getUpperOntologyDefinitionAccess() {
		return gaKnowledgeDeclaration.getUpperOntologyDefinitionAccess();
	}
	
	public ParserRule getUpperOntologyDefinitionRule() {
		return getUpperOntologyDefinitionAccess().getRule();
	}
	
	//ConceptStatement:
	//	annotations+=Annotation* (abstract?='abstract'? & deniable?='deniable'? & subjective?='subjective'? &
	//	(agentSpecifier=('deliberative' | 'interactive' | 'reactive') | propertySpecifiers+=PROPERTY_TYPE
	//	propertySpecifiers+=PROPERTY_TYPE*)?) concept=CONCEPT_TYPE body=ConceptStatementBody ('named' name=NamespaceId)?;
	public KnowledgeDeclarationGrammarAccess.ConceptStatementElements getConceptStatementAccess() {
		return gaKnowledgeDeclaration.getConceptStatementAccess();
	}
	
	public ParserRule getConceptStatementRule() {
		return getConceptStatementAccess().getRule();
	}
	
	///*
	// * ------------------------------------------------------------------------------------------
	// * Ontology language - basically a more intuitive and imperative OW2L/Manchester syntax. Does not
	// * cover all of OWL2 yet, but should be plenty for modeling. 
	// * 
	// * deniable is for traits only. If a trait is deniable, 'not Trait' is a trait (of not being Trait).
	// * if not deniable, 'not Trait' means being any of the other concrete traits; if there is only one 
	// * concrete trait it's an error. If there are two, it means being the other.
	// * ------------------------------------------------------------------------------------------
	// */
	//ConceptStatementBody:
	//	annotations+=Annotation* abstract?='abstract'? (root?='root' | name=CAMELCASE_ID ('identified' 'as'
	//	(stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))?)
	//	(docstring=STRING? & (('is' coreConcept?='core'? | alias?='equals') (nothing?='nothing' | parents+=ConceptDeclaration
	//	(connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? & ('exposes'
	//	contextualizedTraits+=ObservableSemantics (',' contextualizedTraits+=ObservableSemantics)* | specific?='exposing'
	//	contextualizesTraits+=ConceptDeclaration (',' contextualizesTraits+=ConceptDeclaration)*)? & ('defines' ('authority'
	//	definedAuthority=UPPERCASE_PATH | upperConcept=Concept))? & ('requires' requirements+=IdentityRequirement (','
	//	requirements+=IdentityRequirement)*)? & ('describes' describedQuality=ConceptDeclaration)? & ('increases' 'with'
	//	describedProportionality=ConceptDeclaration)? & ('decreases' 'with'
	//	describedInverseProportionalityQuality=ConceptDeclaration)? & ('marks' describedNonzeroQuality=ConceptDeclaration)? &
	//	('classifies' classifiesQuality=ConceptDeclaration)? & ('discretizes' discretizesQuality=ConceptDeclaration)? &
	//	('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? & ('has'
	//	'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)* ('for' targetObservables+=ConceptDeclaration (','
	//	targetObservables+=ConceptDeclaration)*)? ('in' restrictedObservables+=ConceptDeclaration (','
	//	restrictedObservables+=ConceptDeclaration)*))? & ('confers' conferredTraits+=ConceptDeclaration (','
	//	conferredTraits+=ConceptDeclaration)* ('to' conferredTargets+=ConceptDeclaration (','
	//	conferredTargets+=ConceptDeclaration)*)?)? & (('part' | constituent?='constituent' | constitutes?='consists')
	//	partOf?='of' whole=ConceptDeclaration)? & ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)?
	//	& ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? & ('links'
	//	domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration (',' domains+=SimpleConceptDeclaration =>
	//	'to' ranges+=SimpleConceptDeclaration)*)? & ('inverse' 'of' inverse=ConceptDeclaration)? & ('affects'
	//	qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? & ('has' disjoint?='disjoint'?
	//	'children' children+=ChildConcept (',' children+=ChildConcept)*)? & restrictions+=RestrictionStatement* & ('with'
	//	'metadata' metadata=Metadata)?);
	public KnowledgeDeclarationGrammarAccess.ConceptStatementBodyElements getConceptStatementBodyAccess() {
		return gaKnowledgeDeclaration.getConceptStatementBodyAccess();
	}
	
	public ParserRule getConceptStatementBodyRule() {
		return getConceptStatementBodyAccess().getRule();
	}
	
	//ApplicableTarget:
	//	target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?;
	public KnowledgeDeclarationGrammarAccess.ApplicableTargetElements getApplicableTargetAccess() {
		return gaKnowledgeDeclaration.getApplicableTargetAccess();
	}
	
	public ParserRule getApplicableTargetRule() {
		return getApplicableTargetAccess().getRule();
	}
	
	//ChildConcept ConceptStatementBody:
	//	abstract?='abstract'? name=CAMELCASE_ID | '(' ConceptStatementBody ')';
	public KnowledgeDeclarationGrammarAccess.ChildConceptElements getChildConceptAccess() {
		return gaKnowledgeDeclaration.getChildConceptAccess();
	}
	
	public ParserRule getChildConceptRule() {
		return getChildConceptAccess().getRule();
	}
	
	//IdentityRequirement:
	//	('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)*
	//	| 'authority' authority=(UPPERCASE_ID | UPPERCASE_PATH);
	public KnowledgeDeclarationGrammarAccess.IdentityRequirementElements getIdentityRequirementAccess() {
		return gaKnowledgeDeclaration.getIdentityRequirementAccess();
	}
	
	public ParserRule getIdentityRequirementRule() {
		return getIdentityRequirementAccess().getRule();
	}
	
	///*
	// * Ultra-simple restriction statements:
	// *
	// * uses [only] CCC [for PPP]; // PPP can be a property or a concept
	// * uses at [least|most] 1 CCC [for PPP]
	// * uses exactly 1 CCC [for PPP]
	// * uses 120 for PPP // data property
	// *
	// * uses = has; requires = functional has; contains = part-of (contextually resolved). implies is only for roles.
	// * 
	// * if PPP is a concept (much more intuitive), must be restricting a known one and hasPPP is created (or used).
	// * 
	// * Also hosts the 'uses authority' restriction which is only accepted by domains.
	// * 
	// */
	//RestrictionStatement:
	//	relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (','
	//	definitions+=RestrictionDefinition)* | 'uses' 'authority' authorities+=(UPPERCASE_ID | UPPERCASE_PATH) (=> ','
	//	authorities+=(UPPERCASE_ID | UPPERCASE_PATH))* | 'uses' value=Literal literal?='for' subject=(CAMELCASE_ID |
	//	NamespaceId);
	public KnowledgeDeclarationGrammarAccess.RestrictionStatementElements getRestrictionStatementAccess() {
		return gaKnowledgeDeclaration.getRestrictionStatementAccess();
	}
	
	public ParserRule getRestrictionStatementRule() {
		return getRestrictionStatementAccess().getRule();
	}
	
	//RestrictionDefinition:
	//	(only?='only' | none?='no' | (exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most') howmany=INT)?
	//	(source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)? (('for' | 'as')
	//	subject=ConceptDeclaration)? | value=Literal ('to' maxValue=Number)? 'for' property=PropertyId;
	public KnowledgeDeclarationGrammarAccess.RestrictionDefinitionElements getRestrictionDefinitionAccess() {
		return gaKnowledgeDeclaration.getRestrictionDefinitionAccess();
	}
	
	public ParserRule getRestrictionDefinitionRule() {
		return getRestrictionDefinitionAccess().getRule();
	}
	
	//Annotation:
	//	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
	public KnowledgeDeclarationGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaKnowledgeDeclaration.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//List:
	//	{List} '(' contents+=Value* ')';
	public KnowledgeDeclarationGrammarAccess.ListElements getListAccess() {
		return gaKnowledgeDeclaration.getListAccess();
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Literal:
	//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false');
	public KnowledgeDeclarationGrammarAccess.LiteralElements getLiteralAccess() {
		return gaKnowledgeDeclaration.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//LiteralOrID Literal:
	//	number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
	public KnowledgeDeclarationGrammarAccess.LiteralOrIDElements getLiteralOrIDAccess() {
		return gaKnowledgeDeclaration.getLiteralOrIDAccess();
	}
	
	public ParserRule getLiteralOrIDRule() {
		return getLiteralOrIDAccess().getRule();
	}
	
	//LiteralOrIdOrComma Literal:
	//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';
	public KnowledgeDeclarationGrammarAccess.LiteralOrIdOrCommaElements getLiteralOrIdOrCommaAccess() {
		return gaKnowledgeDeclaration.getLiteralOrIdOrCommaAccess();
	}
	
	public ParserRule getLiteralOrIdOrCommaRule() {
		return getLiteralOrIdOrCommaAccess().getRule();
	}
	
	//Metadata:
	//	{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}';
	public KnowledgeDeclarationGrammarAccess.MetadataElements getMetadataAccess() {
		return gaKnowledgeDeclaration.getMetadataAccess();
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//Documentation:
	//	{Metadata} '{' (selectors+=DocSelector values+=LiteralOrID)* '}';
	public KnowledgeDeclarationGrammarAccess.DocumentationElements getDocumentationAccess() {
		return gaKnowledgeDeclaration.getDocumentationAccess();
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//DocSelector:
	//	id=PropertyId | 'on' (definition?='definition' | initialization?='initialization' | termination?='termination' |
	//	transition?='transition');
	public KnowledgeDeclarationGrammarAccess.DocSelectorElements getDocSelectorAccess() {
		return gaKnowledgeDeclaration.getDocSelectorAccess();
	}
	
	public ParserRule getDocSelectorRule() {
		return getDocSelectorAccess().getRule();
	}
	
	//KeyValuePair:
	//	name=(LOWERCASE_ID | PathName) (interactive?='?=' | '=') value=Value;
	public KnowledgeDeclarationGrammarAccess.KeyValuePairElements getKeyValuePairAccess() {
		return gaKnowledgeDeclaration.getKeyValuePairAccess();
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//ParameterList:
	//	singleValue=Value | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
	public KnowledgeDeclarationGrammarAccess.ParameterListElements getParameterListAccess() {
		return gaKnowledgeDeclaration.getParameterListAccess();
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Value:
	//	literal=LiteralOrIdOrComma | function=Function | expr=EXPR | id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID) |
	//	list=List | map=Metadata | null?='unknown';
	public KnowledgeDeclarationGrammarAccess.ValueElements getValueAccess() {
		return gaKnowledgeDeclaration.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Function:
	//	name=PathName '(' parameters=ParameterList? ')';
	public KnowledgeDeclarationGrammarAccess.FunctionElements getFunctionAccess() {
		return gaKnowledgeDeclaration.getFunctionAccess();
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//terminal EXPR:
	//	'[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	public TerminalRule getEXPRRule() {
		return gaKnowledgeDeclaration.getEXPRRule();
	}
	
	//enum DataType:
	//	TEXT='text' | INTEGER='integer' | FLOAT='float' | DOUBLE='double' | BOOLEAN='boolean' | DATE='date' | POINT='point' |
	//	LINE='line' | POLYGON='polygon';
	public KnowledgeDeclarationGrammarAccess.DataTypeElements getDataTypeAccess() {
		return gaKnowledgeDeclaration.getDataTypeAccess();
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	///**
	// * Carefully selected keywords to define a concept, which enable automatic definition of
	// * fairly complex semantics and validation against upper ontologies. For now implement
	// * physical properties, value concepts and basic agent types re: DOLCE types.
	// * 
	// * A similar thing could be done for properties
	// * 
	// * This is a lot of keywords, although it's probably good to protect these names from
	// * being used as identifiers in anything.
	// */
	//CONCEPT_TYPE:
	//	'quality' | DECLARABLE_TYPE;
	public KnowledgeDeclarationGrammarAccess.CONCEPT_TYPEElements getCONCEPT_TYPEAccess() {
		return gaKnowledgeDeclaration.getCONCEPT_TYPEAccess();
	}
	
	public ParserRule getCONCEPT_TYPERule() {
		return getCONCEPT_TYPEAccess().getRule();
	}
	
	//DECLARABLE_TYPE:
	//	'class' | 'quantity' | 'configuration' | 'relationship' | 'extent' | EXTENSIVE_PROPERTY | INTENSIVE_PROPERTY |
	//	AGENT_TYPE | TRAIT;
	public KnowledgeDeclarationGrammarAccess.DECLARABLE_TYPEElements getDECLARABLE_TYPEAccess() {
		return gaKnowledgeDeclaration.getDECLARABLE_TYPEAccess();
	}
	
	public ParserRule getDECLARABLE_TYPERule() {
		return getDECLARABLE_TYPEAccess().getRule();
	}
	
	//TRAIT:
	//	'ordering' | 'attribute' | 'identity' | 'role' | 'realm' | 'domain';
	public KnowledgeDeclarationGrammarAccess.TRAITElements getTRAITAccess() {
		return gaKnowledgeDeclaration.getTRAITAccess();
	}
	
	public ParserRule getTRAITRule() {
		return getTRAITAccess().getRule();
	}
	
	//EXTENSIVE_PROPERTY:
	//	'amount' | 'length' | 'mass' | 'volume' | 'weight' | 'money' | 'duration' | 'area';
	public KnowledgeDeclarationGrammarAccess.EXTENSIVE_PROPERTYElements getEXTENSIVE_PROPERTYAccess() {
		return gaKnowledgeDeclaration.getEXTENSIVE_PROPERTYAccess();
	}
	
	public ParserRule getEXTENSIVE_PROPERTYRule() {
		return getEXTENSIVE_PROPERTYAccess().getRule();
	}
	
	//INTENSIVE_PROPERTY:
	//	'acceleration' | 'energy' | 'entropy' | 'priority' | 'electric-potential' | 'charge' | 'resistance' | 'resistivity' |
	//	'pressure' | 'angle' | 'velocity' | 'temperature' | 'viscosity';
	public KnowledgeDeclarationGrammarAccess.INTENSIVE_PROPERTYElements getINTENSIVE_PROPERTYAccess() {
		return gaKnowledgeDeclaration.getINTENSIVE_PROPERTYAccess();
	}
	
	public ParserRule getINTENSIVE_PROPERTYRule() {
		return getINTENSIVE_PROPERTYAccess().getRule();
	}
	
	//AGENT_TYPE:
	//	'thing' | 'process' | 'agent' | 'event';
	public KnowledgeDeclarationGrammarAccess.AGENT_TYPEElements getAGENT_TYPEAccess() {
		return gaKnowledgeDeclaration.getAGENT_TYPEAccess();
	}
	
	public ParserRule getAGENT_TYPERule() {
		return getAGENT_TYPEAccess().getRule();
	}
	
	//PROPERTY_TYPE:
	//	'functional' | 'bidirectional' | 'unidirectional' | 'structural';
	public KnowledgeDeclarationGrammarAccess.PROPERTY_TYPEElements getPROPERTY_TYPEAccess() {
		return gaKnowledgeDeclaration.getPROPERTY_TYPEAccess();
	}
	
	public ParserRule getPROPERTY_TYPERule() {
		return getPROPERTY_TYPEAccess().getRule();
	}
	
	//terminal ANNOTATION_ID:
	//	'@' LOWERCASE_ID;
	public TerminalRule getANNOTATION_IDRule() {
		return gaKnowledgeDeclaration.getANNOTATION_IDRule();
	}
	
	///*
	// * Observable without the 'as' to use in model declarations where 'as' has
	// * different syntax.
	// */
	//SimpleObservableSemantics ObservableSemantics:
	//	declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))? &
	//	('according' 'to' accordingTo=PropertyId)? & ('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)? & (from=Number
	//	'to' to=Number)? & ('named' name=LOWERCASE_ID)?);
	public KnowledgeDeclarationGrammarAccess.SimpleObservableSemanticsElements getSimpleObservableSemanticsAccess() {
		return gaKnowledgeDeclaration.getSimpleObservableSemanticsAccess();
	}
	
	public ParserRule getSimpleObservableSemanticsRule() {
		return getSimpleObservableSemanticsAccess().getRule();
	}
	
	///*
	// * Observable with no quality semantics and mandatory name, for observations. Allows
	// * dashes in name.
	// */
	//NamedObservableSemantics ObservableSemantics:
	//	declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID | LOWERCASE_DASHID);
	public KnowledgeDeclarationGrammarAccess.NamedObservableSemanticsElements getNamedObservableSemanticsAccess() {
		return gaKnowledgeDeclaration.getNamedObservableSemanticsAccess();
	}
	
	public ParserRule getNamedObservableSemanticsRule() {
		return getNamedObservableSemanticsAccess().getRule();
	}
	
	///**
	// * ---------------------------------------
	// * Unit of measurement re: jsr-108, parseable by Java
	// * TODO implement expression syntax and provide validator
	// * ---------------------------------------
	// */
	//UnitElement:
	//	id=(CAMELCASE_ID | LOWERCASE_ID) | num=Number | '(' unit=Unit ')';
	public KnowledgeDeclarationGrammarAccess.UnitElementElements getUnitElementAccess() {
		return gaKnowledgeDeclaration.getUnitElementAccess();
	}
	
	public ParserRule getUnitElementRule() {
		return getUnitElementAccess().getRule();
	}
	
	//enum UnitOp:
	//	OVER='/' | CARET='^' | STAR='*';
	public KnowledgeDeclarationGrammarAccess.UnitOpElements getUnitOpAccess() {
		return gaKnowledgeDeclaration.getUnitOpAccess();
	}
	
	public EnumRule getUnitOpRule() {
		return getUnitOpAccess().getRule();
	}
	
	//REL_OPERATOR:
	//	gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>=';
	public KnowledgeDeclarationGrammarAccess.REL_OPERATORElements getREL_OPERATORAccess() {
		return gaKnowledgeDeclaration.getREL_OPERATORAccess();
	}
	
	public ParserRule getREL_OPERATORRule() {
		return getREL_OPERATORAccess().getRule();
	}
	
	//Unit:
	//	{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*;
	public KnowledgeDeclarationGrammarAccess.UnitElements getUnitAccess() {
		return gaKnowledgeDeclaration.getUnitAccess();
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Currency:
	//	id=UPPERCASE_ID ('@' year=INT) | concept=(CAMELCASE_ID | NamespaceId);
	public KnowledgeDeclarationGrammarAccess.CurrencyElements getCurrencyAccess() {
		return gaKnowledgeDeclaration.getCurrencyAccess();
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}
	
	//Number:
	//	('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
	//	expNegative?='-')? exp=INT)?;
	public KnowledgeDeclarationGrammarAccess.NumberElements getNumberAccess() {
		return gaKnowledgeDeclaration.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal LOWERCASE_ID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getLOWERCASE_IDRule() {
		return gaKnowledgeDeclaration.getLOWERCASE_IDRule();
	}
	
	//terminal LOWERCASE_DASHID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '-')*;
	public TerminalRule getLOWERCASE_DASHIDRule() {
		return gaKnowledgeDeclaration.getLOWERCASE_DASHIDRule();
	}
	
	//PathName:
	//	LOWERCASE_ID ('.' LOWERCASE_ID)*;
	public KnowledgeDeclarationGrammarAccess.PathNameElements getPathNameAccess() {
		return gaKnowledgeDeclaration.getPathNameAccess();
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	//Path:
	//	LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*;
	public KnowledgeDeclarationGrammarAccess.PathElements getPathAccess() {
		return gaKnowledgeDeclaration.getPathAccess();
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//terminal UPPERCASE_ID:
	//	'A'..'Z' 'A'..'Z'*;
	public TerminalRule getUPPERCASE_IDRule() {
		return gaKnowledgeDeclaration.getUPPERCASE_IDRule();
	}
	
	//terminal UPPERCASE_PATH:
	//	UPPERCASE_ID ('.' UPPERCASE_ID)*;
	public TerminalRule getUPPERCASE_PATHRule() {
		return gaKnowledgeDeclaration.getUPPERCASE_PATHRule();
	}
	
	//terminal CAMELCASE_ID:
	//	'A'..'Z' ('A'..'z' | '0'..'9')*;
	public TerminalRule getCAMELCASE_IDRule() {
		return gaKnowledgeDeclaration.getCAMELCASE_IDRule();
	}
	
	//NamespaceId:
	//	PathName ':' CAMELCASE_ID;
	public KnowledgeDeclarationGrammarAccess.NamespaceIdElements getNamespaceIdAccess() {
		return gaKnowledgeDeclaration.getNamespaceIdAccess();
	}
	
	public ParserRule getNamespaceIdRule() {
		return getNamespaceIdAccess().getRule();
	}
	
	//PropertyId:
	//	(PathName | LOWERCASE_ID) ':' (LOWERCASE_ID | LOWERCASE_DASHID);
	public KnowledgeDeclarationGrammarAccess.PropertyIdElements getPropertyIdAccess() {
		return gaKnowledgeDeclaration.getPropertyIdAccess();
	}
	
	public ParserRule getPropertyIdRule() {
		return getPropertyIdAccess().getRule();
	}
	
	//VersionNumber:
	//	INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?;
	public KnowledgeDeclarationGrammarAccess.VersionNumberElements getVersionNumberAccess() {
		return gaKnowledgeDeclaration.getVersionNumberAccess();
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
