/*
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KnowledgeDeclarationGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Keyword cAsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cGenericAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cGenericAnyKeyword_1_0 = (Keyword)cGenericAssignment_1.eContents().get(0);
		private final Assignment cDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cByKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cByAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cByConceptParserRuleCall_3_0_1_0 = (RuleCall)cByAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cDownKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cToKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDownToAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final Alternatives cDownToAlternatives_3_1_2_0 = (Alternatives)cDownToAssignment_3_1_2.eContents().get(0);
		private final RuleCall cDownToCAMELCASE_IDTerminalRuleCall_3_1_2_0_0 = (RuleCall)cDownToAlternatives_3_1_2_0.eContents().get(0);
		private final RuleCall cDownToNamespaceIdParserRuleCall_3_1_2_0_1 = (RuleCall)cDownToAlternatives_3_1_2_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cAsKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cRoleAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cRoleConceptParserRuleCall_3_2_1_0 = (RuleCall)cRoleAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cAccordingKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cToKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cAccordingToAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cAccordingToPropertyIdParserRuleCall_3_3_2_0 = (RuleCall)cAccordingToAssignment_3_3_2.eContents().get(0);
		private final Alternatives cAlternatives_3_4 = (Alternatives)cUnorderedGroup_3.eContents().get(4);
		private final Group cGroup_3_4_0 = (Group)cAlternatives_3_4.eContents().get(0);
		private final Keyword cInKeyword_3_4_0_0 = (Keyword)cGroup_3_4_0.eContents().get(0);
		private final Alternatives cAlternatives_3_4_0_1 = (Alternatives)cGroup_3_4_0.eContents().get(1);
		private final Assignment cUnitAssignment_3_4_0_1_0 = (Assignment)cAlternatives_3_4_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_3_4_0_1_0_0 = (RuleCall)cUnitAssignment_3_4_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_3_4_0_1_1 = (Assignment)cAlternatives_3_4_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_3_4_0_1_1_0 = (RuleCall)cCurrencyAssignment_3_4_0_1_1.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cAlternatives_3_4.eContents().get(1);
		private final Keyword cPerKeyword_3_4_1_0 = (Keyword)cGroup_3_4_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_4_1_1 = (Assignment)cGroup_3_4_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_3_4_1_1_0 = (RuleCall)cUnitAssignment_3_4_1_1.eContents().get(0);
		private final Alternatives cAlternatives_3_5 = (Alternatives)cUnorderedGroup_3.eContents().get(5);
		private final Assignment cOptionalAssignment_3_5_0 = (Assignment)cAlternatives_3_5.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_3_5_0_0 = (Keyword)cOptionalAssignment_3_5_0.eContents().get(0);
		private final Keyword cRequiredKeyword_3_5_1 = (Keyword)cAlternatives_3_5.eContents().get(1);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Assignment cFromAssignment_3_6_0 = (Assignment)cGroup_3_6.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_3_6_0_0 = (RuleCall)cFromAssignment_3_6_0.eContents().get(0);
		private final Keyword cToKeyword_3_6_1 = (Keyword)cGroup_3_6.eContents().get(1);
		private final Assignment cToAssignment_3_6_2 = (Assignment)cGroup_3_6.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_3_6_2_0 = (RuleCall)cToAssignment_3_6_2.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cNamedKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cNameAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_3_7_1_0 = (RuleCall)cNameAssignment_3_7_1.eContents().get(0);
		
		///**
		// * Observable semantics is a concept declaration with optional observation semantics and formal name.
		// */
		//ObservableSemantics:
		//	(value=Value 'as')? generic?='any'? declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to'
		//	downTo=(CAMELCASE_ID | NamespaceId))? & ('as' role=Concept)? & ('according' 'to' accordingTo=PropertyId)? & ('in'
		//	(unit=Unit | currency=Currency) | 'per' unit=Unit)? & (optional?='optional' | 'required')? & (from=Number 'to'
		//	to=Number)? & ('named' name=LOWERCASE_ID)?);
		@Override public ParserRule getRule() { return rule; }
		
		//(value=Value 'as')? generic?='any'? declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to'
		//downTo=(CAMELCASE_ID | NamespaceId))? & ('as' role=Concept)? & ('according' 'to' accordingTo=PropertyId)? & ('in'
		//(unit=Unit | currency=Currency) | 'per' unit=Unit)? & (optional?='optional' | 'required')? & (from=Number 'to'
		//to=Number)? & ('named' name=LOWERCASE_ID)?)
		public Group getGroup() { return cGroup; }
		
		//(value=Value 'as')?
		public Group getGroup_0() { return cGroup_0; }
		
		//value=Value
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0_0_0() { return cValueValueParserRuleCall_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_1() { return cAsKeyword_0_1; }
		
		//generic?='any'?
		public Assignment getGenericAssignment_1() { return cGenericAssignment_1; }
		
		//'any'
		public Keyword getGenericAnyKeyword_1_0() { return cGenericAnyKeyword_1_0; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_2() { return cDeclarationAssignment_2; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_2_0() { return cDeclarationConceptDeclarationParserRuleCall_2_0; }
		
		//('by' by=Concept)? & ('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))? & ('as' role=Concept)? & ('according' 'to'
		//accordingTo=PropertyId)? & ('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)? & (optional?='optional' |
		//'required')? & (from=Number 'to' to=Number)? & ('named' name=LOWERCASE_ID)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//('by' by=Concept)?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'by'
		public Keyword getByKeyword_3_0_0() { return cByKeyword_3_0_0; }
		
		//by=Concept
		public Assignment getByAssignment_3_0_1() { return cByAssignment_3_0_1; }
		
		//Concept
		public RuleCall getByConceptParserRuleCall_3_0_1_0() { return cByConceptParserRuleCall_3_0_1_0; }
		
		//('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'down'
		public Keyword getDownKeyword_3_1_0() { return cDownKeyword_3_1_0; }
		
		//'to'
		public Keyword getToKeyword_3_1_1() { return cToKeyword_3_1_1; }
		
		//downTo=(CAMELCASE_ID | NamespaceId)
		public Assignment getDownToAssignment_3_1_2() { return cDownToAssignment_3_1_2; }
		
		//(CAMELCASE_ID | NamespaceId)
		public Alternatives getDownToAlternatives_3_1_2_0() { return cDownToAlternatives_3_1_2_0; }
		
		//CAMELCASE_ID
		public RuleCall getDownToCAMELCASE_IDTerminalRuleCall_3_1_2_0_0() { return cDownToCAMELCASE_IDTerminalRuleCall_3_1_2_0_0; }
		
		//NamespaceId
		public RuleCall getDownToNamespaceIdParserRuleCall_3_1_2_0_1() { return cDownToNamespaceIdParserRuleCall_3_1_2_0_1; }
		
		//('as' role=Concept)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'as'
		public Keyword getAsKeyword_3_2_0() { return cAsKeyword_3_2_0; }
		
		//role=Concept
		public Assignment getRoleAssignment_3_2_1() { return cRoleAssignment_3_2_1; }
		
		//Concept
		public RuleCall getRoleConceptParserRuleCall_3_2_1_0() { return cRoleConceptParserRuleCall_3_2_1_0; }
		
		//('according' 'to' accordingTo=PropertyId)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'according'
		public Keyword getAccordingKeyword_3_3_0() { return cAccordingKeyword_3_3_0; }
		
		//'to'
		public Keyword getToKeyword_3_3_1() { return cToKeyword_3_3_1; }
		
		//accordingTo=PropertyId
		public Assignment getAccordingToAssignment_3_3_2() { return cAccordingToAssignment_3_3_2; }
		
		//PropertyId
		public RuleCall getAccordingToPropertyIdParserRuleCall_3_3_2_0() { return cAccordingToPropertyIdParserRuleCall_3_3_2_0; }
		
		//('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)?
		public Alternatives getAlternatives_3_4() { return cAlternatives_3_4; }
		
		//'in' (unit=Unit | currency=Currency)
		public Group getGroup_3_4_0() { return cGroup_3_4_0; }
		
		//'in'
		public Keyword getInKeyword_3_4_0_0() { return cInKeyword_3_4_0_0; }
		
		//unit=Unit | currency=Currency
		public Alternatives getAlternatives_3_4_0_1() { return cAlternatives_3_4_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_4_0_1_0() { return cUnitAssignment_3_4_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_4_0_1_0_0() { return cUnitUnitParserRuleCall_3_4_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_3_4_0_1_1() { return cCurrencyAssignment_3_4_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_3_4_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_3_4_0_1_1_0; }
		
		//'per' unit=Unit
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }
		
		//'per'
		public Keyword getPerKeyword_3_4_1_0() { return cPerKeyword_3_4_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_3_4_1_1() { return cUnitAssignment_3_4_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_3_4_1_1_0() { return cUnitUnitParserRuleCall_3_4_1_1_0; }
		
		//(optional?='optional' | 'required')?
		public Alternatives getAlternatives_3_5() { return cAlternatives_3_5; }
		
		//optional?='optional'
		public Assignment getOptionalAssignment_3_5_0() { return cOptionalAssignment_3_5_0; }
		
		//'optional'
		public Keyword getOptionalOptionalKeyword_3_5_0_0() { return cOptionalOptionalKeyword_3_5_0_0; }
		
		//'required'
		public Keyword getRequiredKeyword_3_5_1() { return cRequiredKeyword_3_5_1; }
		
		//(from=Number 'to' to=Number)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//from=Number
		public Assignment getFromAssignment_3_6_0() { return cFromAssignment_3_6_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_3_6_0_0() { return cFromNumberParserRuleCall_3_6_0_0; }
		
		//'to'
		public Keyword getToKeyword_3_6_1() { return cToKeyword_3_6_1; }
		
		//to=Number
		public Assignment getToAssignment_3_6_2() { return cToAssignment_3_6_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_3_6_2_0() { return cToNumberParserRuleCall_3_6_2_0; }
		
		//('named' name=LOWERCASE_ID)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'named'
		public Keyword getNamedKeyword_3_7_0() { return cNamedKeyword_3_7_0; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_3_7_1() { return cNameAssignment_3_7_1; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_3_7_1_0() { return cNameLOWERCASE_IDTerminalRuleCall_3_7_1_0; }
	}
	public class ConceptDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ConceptDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainConceptParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cOfKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cInherencyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cInherencySimpleConceptDeclarationParserRuleCall_2_0_1_0 = (RuleCall)cInherencyAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cForKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMotivationAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMotivationSimpleConceptDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cMotivationAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cWithKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cCompresentAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cCompresentSimpleConceptDeclarationParserRuleCall_2_2_1_0 = (RuleCall)cCompresentAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cCausedKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cByKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cCausantAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cCausantSimpleConceptDeclarationParserRuleCall_2_3_2_0 = (RuleCall)cCausantAssignment_2_3_2.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cAdjacentKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Keyword cToKeyword_2_4_1 = (Keyword)cGroup_2_4.eContents().get(1);
		private final Assignment cAdjacentAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final RuleCall cAdjacentSimpleConceptDeclarationParserRuleCall_2_4_2_0 = (RuleCall)cAdjacentAssignment_2_4_2.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cUnorderedGroup_2.eContents().get(5);
		private final Keyword cContainedKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Keyword cInKeyword_2_5_1 = (Keyword)cGroup_2_5.eContents().get(1);
		private final Assignment cContainerAssignment_2_5_2 = (Assignment)cGroup_2_5.eContents().get(2);
		private final RuleCall cContainerSimpleConceptDeclarationParserRuleCall_2_5_2_0 = (RuleCall)cContainerAssignment_2_5_2.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cUnorderedGroup_2.eContents().get(6);
		private final Keyword cContainingKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Assignment cContainedAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cContainedSimpleConceptDeclarationParserRuleCall_2_6_1_0 = (RuleCall)cContainedAssignment_2_6_1.eContents().get(0);
		private final Group cGroup_2_7 = (Group)cUnorderedGroup_2.eContents().get(7);
		private final Keyword cCausingKeyword_2_7_0 = (Keyword)cGroup_2_7.eContents().get(0);
		private final Assignment cCausedAssignment_2_7_1 = (Assignment)cGroup_2_7.eContents().get(1);
		private final RuleCall cCausedSimpleConceptDeclarationParserRuleCall_2_7_1_0 = (RuleCall)cCausedAssignment_2_7_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithinKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContextSimpleConceptDeclarationParserRuleCall_3_1_0 = (RuleCall)cContextAssignment_3_1.eContents().get(0);
		
		//ConceptDeclaration:
		//	name=STRING? main+=Concept+ (('of' inherency=SimpleConceptDeclaration)? & ('for'
		//	motivation=SimpleConceptDeclaration)? & ('with' compresent=SimpleConceptDeclaration)? & ('caused' 'by'
		//	causant=SimpleConceptDeclaration)? & ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? & ('contained' 'in'
		//	container=SimpleConceptDeclaration)? & ('containing' contained=SimpleConceptDeclaration)? & ('causing'
		//	caused=SimpleConceptDeclaration)?) ('within' context=SimpleConceptDeclaration)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING? main+=Concept+ (('of' inherency=SimpleConceptDeclaration)? & ('for' motivation=SimpleConceptDeclaration)? &
		//('with' compresent=SimpleConceptDeclaration)? & ('caused' 'by' causant=SimpleConceptDeclaration)? & ('adjacent' 'to'
		//adjacent=SimpleConceptDeclaration)? & ('contained' 'in' container=SimpleConceptDeclaration)? & ('containing'
		//contained=SimpleConceptDeclaration)? & ('causing' caused=SimpleConceptDeclaration)?) ('within'
		//context=SimpleConceptDeclaration)?
		public Group getGroup() { return cGroup; }
		
		//name=STRING?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//main+=Concept+
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }
		
		//Concept
		public RuleCall getMainConceptParserRuleCall_1_0() { return cMainConceptParserRuleCall_1_0; }
		
		//('of' inherency=SimpleConceptDeclaration)? & ('for' motivation=SimpleConceptDeclaration)? & ('with'
		//compresent=SimpleConceptDeclaration)? & ('caused' 'by' causant=SimpleConceptDeclaration)? & ('adjacent' 'to'
		//adjacent=SimpleConceptDeclaration)? & ('contained' 'in' container=SimpleConceptDeclaration)? & ('containing'
		//contained=SimpleConceptDeclaration)? & ('causing' caused=SimpleConceptDeclaration)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('of' inherency=SimpleConceptDeclaration)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'of'
		public Keyword getOfKeyword_2_0_0() { return cOfKeyword_2_0_0; }
		
		//inherency=SimpleConceptDeclaration
		public Assignment getInherencyAssignment_2_0_1() { return cInherencyAssignment_2_0_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getInherencySimpleConceptDeclarationParserRuleCall_2_0_1_0() { return cInherencySimpleConceptDeclarationParserRuleCall_2_0_1_0; }
		
		//('for' motivation=SimpleConceptDeclaration)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'for'
		public Keyword getForKeyword_2_1_0() { return cForKeyword_2_1_0; }
		
		//motivation=SimpleConceptDeclaration
		public Assignment getMotivationAssignment_2_1_1() { return cMotivationAssignment_2_1_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getMotivationSimpleConceptDeclarationParserRuleCall_2_1_1_0() { return cMotivationSimpleConceptDeclarationParserRuleCall_2_1_1_0; }
		
		//('with' compresent=SimpleConceptDeclaration)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'with'
		public Keyword getWithKeyword_2_2_0() { return cWithKeyword_2_2_0; }
		
		//compresent=SimpleConceptDeclaration
		public Assignment getCompresentAssignment_2_2_1() { return cCompresentAssignment_2_2_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getCompresentSimpleConceptDeclarationParserRuleCall_2_2_1_0() { return cCompresentSimpleConceptDeclarationParserRuleCall_2_2_1_0; }
		
		//('caused' 'by' causant=SimpleConceptDeclaration)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'caused'
		public Keyword getCausedKeyword_2_3_0() { return cCausedKeyword_2_3_0; }
		
		//'by'
		public Keyword getByKeyword_2_3_1() { return cByKeyword_2_3_1; }
		
		//causant=SimpleConceptDeclaration
		public Assignment getCausantAssignment_2_3_2() { return cCausantAssignment_2_3_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getCausantSimpleConceptDeclarationParserRuleCall_2_3_2_0() { return cCausantSimpleConceptDeclarationParserRuleCall_2_3_2_0; }
		
		//('adjacent' 'to' adjacent=SimpleConceptDeclaration)?
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//'adjacent'
		public Keyword getAdjacentKeyword_2_4_0() { return cAdjacentKeyword_2_4_0; }
		
		//'to'
		public Keyword getToKeyword_2_4_1() { return cToKeyword_2_4_1; }
		
		//adjacent=SimpleConceptDeclaration
		public Assignment getAdjacentAssignment_2_4_2() { return cAdjacentAssignment_2_4_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getAdjacentSimpleConceptDeclarationParserRuleCall_2_4_2_0() { return cAdjacentSimpleConceptDeclarationParserRuleCall_2_4_2_0; }
		
		//('contained' 'in' container=SimpleConceptDeclaration)?
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//'contained'
		public Keyword getContainedKeyword_2_5_0() { return cContainedKeyword_2_5_0; }
		
		//'in'
		public Keyword getInKeyword_2_5_1() { return cInKeyword_2_5_1; }
		
		//container=SimpleConceptDeclaration
		public Assignment getContainerAssignment_2_5_2() { return cContainerAssignment_2_5_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getContainerSimpleConceptDeclarationParserRuleCall_2_5_2_0() { return cContainerSimpleConceptDeclarationParserRuleCall_2_5_2_0; }
		
		//('containing' contained=SimpleConceptDeclaration)?
		public Group getGroup_2_6() { return cGroup_2_6; }
		
		//'containing'
		public Keyword getContainingKeyword_2_6_0() { return cContainingKeyword_2_6_0; }
		
		//contained=SimpleConceptDeclaration
		public Assignment getContainedAssignment_2_6_1() { return cContainedAssignment_2_6_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getContainedSimpleConceptDeclarationParserRuleCall_2_6_1_0() { return cContainedSimpleConceptDeclarationParserRuleCall_2_6_1_0; }
		
		//('causing' caused=SimpleConceptDeclaration)?
		public Group getGroup_2_7() { return cGroup_2_7; }
		
		//'causing'
		public Keyword getCausingKeyword_2_7_0() { return cCausingKeyword_2_7_0; }
		
		//caused=SimpleConceptDeclaration
		public Assignment getCausedAssignment_2_7_1() { return cCausedAssignment_2_7_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getCausedSimpleConceptDeclarationParserRuleCall_2_7_1_0() { return cCausedSimpleConceptDeclarationParserRuleCall_2_7_1_0; }
		
		//('within' context=SimpleConceptDeclaration)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'within'
		public Keyword getWithinKeyword_3_0() { return cWithinKeyword_3_0; }
		
		//context=SimpleConceptDeclaration
		public Assignment getContextAssignment_3_1() { return cContextAssignment_3_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getContextSimpleConceptDeclarationParserRuleCall_3_1_0() { return cContextSimpleConceptDeclarationParserRuleCall_3_1_0; }
	}
	public class ConceptReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ConceptReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameCAMELCASE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameNamespaceIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTemplateTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cTemplateTypeAlternatives_2_0_0 = (Alternatives)cTemplateTypeAssignment_2_0.eContents().get(0);
		private final Keyword cTemplateTypeDollarSignLeftCurlyBracketKeyword_2_0_0_0 = (Keyword)cTemplateTypeAlternatives_2_0_0.eContents().get(0);
		private final Keyword cTemplateTypeNumberSignLeftCurlyBracketKeyword_2_0_0_1 = (Keyword)cTemplateTypeAlternatives_2_0_0.eContents().get(1);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1_0_0 = (Assignment)cGroup_2_1_0.eContents().get(0);
		private final Keyword cNameContextKeyword_2_1_0_0_0 = (Keyword)cNameAssignment_2_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_0_1 = (Alternatives)cGroup_2_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0_1_0 = (Assignment)cAlternatives_2_1_0_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_0_1_0_0 = (RuleCall)cTypeAssignment_2_1_0_1_0.eContents().get(0);
		private final Group cGroup_2_1_0_1_1 = (Group)cAlternatives_2_1_0_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_0_1_1_0 = (Keyword)cGroup_2_1_0_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_0_1_1_1 = (Assignment)cGroup_2_1_0_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_0_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_0_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Assignment cNameAssignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final Keyword cNameInherentKeyword_2_1_1_0_0 = (Keyword)cNameAssignment_2_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1_1 = (Alternatives)cGroup_2_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_1_1_0 = (Assignment)cAlternatives_2_1_1_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_1_1_0_0 = (RuleCall)cTypeAssignment_2_1_1_1_0.eContents().get(0);
		private final Group cGroup_2_1_1_1_1 = (Group)cAlternatives_2_1_1_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_1_1_1_0 = (Keyword)cGroup_2_1_1_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_1_1_1_1 = (Assignment)cGroup_2_1_1_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_1_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_1_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Assignment cNameAssignment_2_1_2_0 = (Assignment)cGroup_2_1_2.eContents().get(0);
		private final Keyword cNameCompresentKeyword_2_1_2_0_0 = (Keyword)cNameAssignment_2_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_2_1 = (Alternatives)cGroup_2_1_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_2_1_0 = (Assignment)cAlternatives_2_1_2_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_2_1_0_0 = (RuleCall)cTypeAssignment_2_1_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_2_1_1 = (Group)cAlternatives_2_1_2_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_2_1_1_0 = (Keyword)cGroup_2_1_2_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_2_1_1_1 = (Assignment)cGroup_2_1_2_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_2_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cAlternatives_2_1.eContents().get(3);
		private final Assignment cNameAssignment_2_1_3_0 = (Assignment)cGroup_2_1_3.eContents().get(0);
		private final Keyword cNameAdjacentKeyword_2_1_3_0_0 = (Keyword)cNameAssignment_2_1_3_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_3_1 = (Alternatives)cGroup_2_1_3.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_3_1_0 = (Assignment)cAlternatives_2_1_3_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_3_1_0_0 = (RuleCall)cTypeAssignment_2_1_3_1_0.eContents().get(0);
		private final Group cGroup_2_1_3_1_1 = (Group)cAlternatives_2_1_3_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_3_1_1_0 = (Keyword)cGroup_2_1_3_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_3_1_1_1 = (Assignment)cGroup_2_1_3_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_3_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_3_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_4 = (Group)cAlternatives_2_1.eContents().get(4);
		private final Assignment cNameAssignment_2_1_4_0 = (Assignment)cGroup_2_1_4.eContents().get(0);
		private final Keyword cNameContainerKeyword_2_1_4_0_0 = (Keyword)cNameAssignment_2_1_4_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_4_1 = (Alternatives)cGroup_2_1_4.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_4_1_0 = (Assignment)cAlternatives_2_1_4_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_4_1_0_0 = (RuleCall)cTypeAssignment_2_1_4_1_0.eContents().get(0);
		private final Group cGroup_2_1_4_1_1 = (Group)cAlternatives_2_1_4_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_4_1_1_0 = (Keyword)cGroup_2_1_4_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_4_1_1_1 = (Assignment)cGroup_2_1_4_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_4_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_4_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_5 = (Group)cAlternatives_2_1.eContents().get(5);
		private final Assignment cNameAssignment_2_1_5_0 = (Assignment)cGroup_2_1_5.eContents().get(0);
		private final Keyword cNameContainedKeyword_2_1_5_0_0 = (Keyword)cNameAssignment_2_1_5_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_5_1 = (Alternatives)cGroup_2_1_5.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_5_1_0 = (Assignment)cAlternatives_2_1_5_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_5_1_0_0 = (RuleCall)cTypeAssignment_2_1_5_1_0.eContents().get(0);
		private final Group cGroup_2_1_5_1_1 = (Group)cAlternatives_2_1_5_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_5_1_1_0 = (Keyword)cGroup_2_1_5_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_5_1_1_1 = (Assignment)cGroup_2_1_5_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_5_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_5_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_6 = (Group)cAlternatives_2_1.eContents().get(6);
		private final Assignment cNameAssignment_2_1_6_0 = (Assignment)cGroup_2_1_6.eContents().get(0);
		private final Keyword cNamePurposeKeyword_2_1_6_0_0 = (Keyword)cNameAssignment_2_1_6_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_6_1 = (Alternatives)cGroup_2_1_6.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_6_1_0 = (Assignment)cAlternatives_2_1_6_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_6_1_0_0 = (RuleCall)cTypeAssignment_2_1_6_1_0.eContents().get(0);
		private final Group cGroup_2_1_6_1_1 = (Group)cAlternatives_2_1_6_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_6_1_1_0 = (Keyword)cGroup_2_1_6_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_6_1_1_1 = (Assignment)cGroup_2_1_6_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_6_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_6_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_7 = (Group)cAlternatives_2_1.eContents().get(7);
		private final Assignment cNameAssignment_2_1_7_0 = (Assignment)cGroup_2_1_7.eContents().get(0);
		private final Keyword cNameCausantKeyword_2_1_7_0_0 = (Keyword)cNameAssignment_2_1_7_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_7_1 = (Alternatives)cGroup_2_1_7.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_7_1_0 = (Assignment)cAlternatives_2_1_7_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_7_1_0_0 = (RuleCall)cTypeAssignment_2_1_7_1_0.eContents().get(0);
		private final Group cGroup_2_1_7_1_1 = (Group)cAlternatives_2_1_7_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_7_1_1_0 = (Keyword)cGroup_2_1_7_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_7_1_1_1 = (Assignment)cGroup_2_1_7_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_7_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_7_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_8 = (Group)cAlternatives_2_1.eContents().get(8);
		private final Assignment cNameAssignment_2_1_8_0 = (Assignment)cGroup_2_1_8.eContents().get(0);
		private final Keyword cNameCausedKeyword_2_1_8_0_0 = (Keyword)cNameAssignment_2_1_8_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_8_1 = (Alternatives)cGroup_2_1_8.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_8_1_0 = (Assignment)cAlternatives_2_1_8_1.eContents().get(0);
		private final RuleCall cTypeCONCEPT_TYPEParserRuleCall_2_1_8_1_0_0 = (RuleCall)cTypeAssignment_2_1_8_1_0.eContents().get(0);
		private final Group cGroup_2_1_8_1_1 = (Group)cAlternatives_2_1_8_1.eContents().get(1);
		private final Keyword cExtendsKeyword_2_1_8_1_1_0 = (Keyword)cGroup_2_1_8_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1_8_1_1_1 = (Assignment)cGroup_2_1_8_1_1.eContents().get(1);
		private final RuleCall cExtendsConceptParserRuleCall_2_1_8_1_1_1_0 = (RuleCall)cExtendsAssignment_2_1_8_1_1_1.eContents().get(0);
		private final Assignment cTemplateAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cTemplateRightCurlyBracketKeyword_2_2_0 = (Keyword)cTemplateAssignment_2_2.eContents().get(0);
		
		//ConceptReference:
		//	name=CAMELCASE_ID | name=NamespaceId | templateType=('${' | '#{') (name='context' (type=CONCEPT_TYPE | 'extends'
		//	extends=Concept) | name='inherent' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='compresent'
		//	(type=CONCEPT_TYPE | 'extends' extends=Concept) | name='adjacent' (type=CONCEPT_TYPE | 'extends' extends=Concept) |
		//	name='container' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='contained' (type=CONCEPT_TYPE | 'extends'
		//	extends=Concept) | name='purpose' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='causant' (type=CONCEPT_TYPE
		//	| 'extends' extends=Concept) | name='caused' (type=CONCEPT_TYPE | 'extends' extends=Concept)) template?='}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=CAMELCASE_ID | name=NamespaceId | templateType=('${' | '#{') (name='context' (type=CONCEPT_TYPE | 'extends'
		//extends=Concept) | name='inherent' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='compresent'
		//(type=CONCEPT_TYPE | 'extends' extends=Concept) | name='adjacent' (type=CONCEPT_TYPE | 'extends' extends=Concept) |
		//name='container' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='contained' (type=CONCEPT_TYPE | 'extends'
		//extends=Concept) | name='purpose' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='causant' (type=CONCEPT_TYPE
		//| 'extends' extends=Concept) | name='caused' (type=CONCEPT_TYPE | 'extends' extends=Concept)) template?='}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=CAMELCASE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//CAMELCASE_ID
		public RuleCall getNameCAMELCASE_IDTerminalRuleCall_0_0() { return cNameCAMELCASE_IDTerminalRuleCall_0_0; }
		
		//name=NamespaceId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NamespaceId
		public RuleCall getNameNamespaceIdParserRuleCall_1_0() { return cNameNamespaceIdParserRuleCall_1_0; }
		
		//templateType=('${' | '#{') (name='context' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='inherent'
		//(type=CONCEPT_TYPE | 'extends' extends=Concept) | name='compresent' (type=CONCEPT_TYPE | 'extends' extends=Concept) |
		//name='adjacent' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='container' (type=CONCEPT_TYPE | 'extends'
		//extends=Concept) | name='contained' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='purpose'
		//(type=CONCEPT_TYPE | 'extends' extends=Concept) | name='causant' (type=CONCEPT_TYPE | 'extends' extends=Concept) |
		//name='caused' (type=CONCEPT_TYPE | 'extends' extends=Concept)) template?='}'
		public Group getGroup_2() { return cGroup_2; }
		
		//templateType=('${' | '#{')
		public Assignment getTemplateTypeAssignment_2_0() { return cTemplateTypeAssignment_2_0; }
		
		//('${' | '#{')
		public Alternatives getTemplateTypeAlternatives_2_0_0() { return cTemplateTypeAlternatives_2_0_0; }
		
		//'${'
		public Keyword getTemplateTypeDollarSignLeftCurlyBracketKeyword_2_0_0_0() { return cTemplateTypeDollarSignLeftCurlyBracketKeyword_2_0_0_0; }
		
		//'#{'
		public Keyword getTemplateTypeNumberSignLeftCurlyBracketKeyword_2_0_0_1() { return cTemplateTypeNumberSignLeftCurlyBracketKeyword_2_0_0_1; }
		
		//name='context' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='inherent' (type=CONCEPT_TYPE | 'extends'
		//extends=Concept) | name='compresent' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='adjacent'
		//(type=CONCEPT_TYPE | 'extends' extends=Concept) | name='container' (type=CONCEPT_TYPE | 'extends' extends=Concept) |
		//name='contained' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='purpose' (type=CONCEPT_TYPE | 'extends'
		//extends=Concept) | name='causant' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='caused' (type=CONCEPT_TYPE |
		//'extends' extends=Concept)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//// identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		// name='context'
		//(type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//// identifiers for target of semantic ops; also used to connect to UO with 'model' statements
		// name='context'
		public Assignment getNameAssignment_2_1_0_0() { return cNameAssignment_2_1_0_0; }
		
		//'context'
		public Keyword getNameContextKeyword_2_1_0_0_0() { return cNameContextKeyword_2_1_0_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_0_1() { return cAlternatives_2_1_0_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_0_1_0() { return cTypeAssignment_2_1_0_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_0_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_0_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_0_1_1() { return cGroup_2_1_0_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_0_1_1_0() { return cExtendsKeyword_2_1_0_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_0_1_1_1() { return cExtendsAssignment_2_1_0_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_0_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_0_1_1_1_0; }
		
		//name='inherent' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//name='inherent'
		public Assignment getNameAssignment_2_1_1_0() { return cNameAssignment_2_1_1_0; }
		
		//'inherent'
		public Keyword getNameInherentKeyword_2_1_1_0_0() { return cNameInherentKeyword_2_1_1_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_1_1() { return cAlternatives_2_1_1_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_1_1_0() { return cTypeAssignment_2_1_1_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_1_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_1_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_1_1_1() { return cGroup_2_1_1_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_1_1_1_0() { return cExtendsKeyword_2_1_1_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_1_1_1_1() { return cExtendsAssignment_2_1_1_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_1_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_1_1_1_1_0; }
		
		//name='compresent' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//name='compresent'
		public Assignment getNameAssignment_2_1_2_0() { return cNameAssignment_2_1_2_0; }
		
		//'compresent'
		public Keyword getNameCompresentKeyword_2_1_2_0_0() { return cNameCompresentKeyword_2_1_2_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_2_1() { return cAlternatives_2_1_2_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_2_1_0() { return cTypeAssignment_2_1_2_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_2_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_2_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_2_1_1() { return cGroup_2_1_2_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_2_1_1_0() { return cExtendsKeyword_2_1_2_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_2_1_1_1() { return cExtendsAssignment_2_1_2_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_2_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_2_1_1_1_0; }
		
		//name='adjacent' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }
		
		//name='adjacent'
		public Assignment getNameAssignment_2_1_3_0() { return cNameAssignment_2_1_3_0; }
		
		//'adjacent'
		public Keyword getNameAdjacentKeyword_2_1_3_0_0() { return cNameAdjacentKeyword_2_1_3_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_3_1() { return cAlternatives_2_1_3_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_3_1_0() { return cTypeAssignment_2_1_3_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_3_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_3_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_3_1_1() { return cGroup_2_1_3_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_3_1_1_0() { return cExtendsKeyword_2_1_3_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_3_1_1_1() { return cExtendsAssignment_2_1_3_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_3_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_3_1_1_1_0; }
		
		//name='container' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }
		
		//name='container'
		public Assignment getNameAssignment_2_1_4_0() { return cNameAssignment_2_1_4_0; }
		
		//'container'
		public Keyword getNameContainerKeyword_2_1_4_0_0() { return cNameContainerKeyword_2_1_4_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_4_1() { return cAlternatives_2_1_4_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_4_1_0() { return cTypeAssignment_2_1_4_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_4_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_4_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_4_1_1() { return cGroup_2_1_4_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_4_1_1_0() { return cExtendsKeyword_2_1_4_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_4_1_1_1() { return cExtendsAssignment_2_1_4_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_4_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_4_1_1_1_0; }
		
		//name='contained' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_5() { return cGroup_2_1_5; }
		
		//name='contained'
		public Assignment getNameAssignment_2_1_5_0() { return cNameAssignment_2_1_5_0; }
		
		//'contained'
		public Keyword getNameContainedKeyword_2_1_5_0_0() { return cNameContainedKeyword_2_1_5_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_5_1() { return cAlternatives_2_1_5_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_5_1_0() { return cTypeAssignment_2_1_5_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_5_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_5_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_5_1_1() { return cGroup_2_1_5_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_5_1_1_0() { return cExtendsKeyword_2_1_5_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_5_1_1_1() { return cExtendsAssignment_2_1_5_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_5_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_5_1_1_1_0; }
		
		//name='purpose' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_6() { return cGroup_2_1_6; }
		
		//name='purpose'
		public Assignment getNameAssignment_2_1_6_0() { return cNameAssignment_2_1_6_0; }
		
		//'purpose'
		public Keyword getNamePurposeKeyword_2_1_6_0_0() { return cNamePurposeKeyword_2_1_6_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_6_1() { return cAlternatives_2_1_6_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_6_1_0() { return cTypeAssignment_2_1_6_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_6_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_6_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_6_1_1() { return cGroup_2_1_6_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_6_1_1_0() { return cExtendsKeyword_2_1_6_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_6_1_1_1() { return cExtendsAssignment_2_1_6_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_6_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_6_1_1_1_0; }
		
		//name='causant' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_7() { return cGroup_2_1_7; }
		
		//name='causant'
		public Assignment getNameAssignment_2_1_7_0() { return cNameAssignment_2_1_7_0; }
		
		//'causant'
		public Keyword getNameCausantKeyword_2_1_7_0_0() { return cNameCausantKeyword_2_1_7_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_7_1() { return cAlternatives_2_1_7_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_7_1_0() { return cTypeAssignment_2_1_7_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_7_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_7_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_7_1_1() { return cGroup_2_1_7_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_7_1_1_0() { return cExtendsKeyword_2_1_7_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_7_1_1_1() { return cExtendsAssignment_2_1_7_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_7_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_7_1_1_1_0; }
		
		//name='caused' (type=CONCEPT_TYPE | 'extends' extends=Concept)
		public Group getGroup_2_1_8() { return cGroup_2_1_8; }
		
		//name='caused'
		public Assignment getNameAssignment_2_1_8_0() { return cNameAssignment_2_1_8_0; }
		
		//'caused'
		public Keyword getNameCausedKeyword_2_1_8_0_0() { return cNameCausedKeyword_2_1_8_0_0; }
		
		//type=CONCEPT_TYPE | 'extends' extends=Concept
		public Alternatives getAlternatives_2_1_8_1() { return cAlternatives_2_1_8_1; }
		
		//type=CONCEPT_TYPE
		public Assignment getTypeAssignment_2_1_8_1_0() { return cTypeAssignment_2_1_8_1_0; }
		
		//CONCEPT_TYPE
		public RuleCall getTypeCONCEPT_TYPEParserRuleCall_2_1_8_1_0_0() { return cTypeCONCEPT_TYPEParserRuleCall_2_1_8_1_0_0; }
		
		//'extends' extends=Concept
		public Group getGroup_2_1_8_1_1() { return cGroup_2_1_8_1_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_1_8_1_1_0() { return cExtendsKeyword_2_1_8_1_1_0; }
		
		//extends=Concept
		public Assignment getExtendsAssignment_2_1_8_1_1_1() { return cExtendsAssignment_2_1_8_1_1_1; }
		
		//Concept
		public RuleCall getExtendsConceptParserRuleCall_2_1_8_1_1_1_0() { return cExtendsConceptParserRuleCall_2_1_8_1_1_1_0; }
		
		//template?='}'
		public Assignment getTemplateAssignment_2_2() { return cTemplateAssignment_2_2; }
		
		//'}'
		public Keyword getTemplateRightCurlyBracketKeyword_2_2_0() { return cTemplateRightCurlyBracketKeyword_2_2_0; }
	}
	public class OPERATOR_TARGETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.OPERATOR_TARGET");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cInherentKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCompresentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAdjacentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cContainerKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cContainedKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPurposeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cCausantKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCausedKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//OPERATOR_TARGET:
		//	'context' | 'inherent' | 'compresent' | 'adjacent' | 'container' | 'contained' | 'purpose' | 'causant' | 'caused';
		@Override public ParserRule getRule() { return rule; }
		
		//'context' | 'inherent' | 'compresent' | 'adjacent' | 'container' | 'contained' | 'purpose' | 'causant' | 'caused'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//'inherent'
		public Keyword getInherentKeyword_1() { return cInherentKeyword_1; }
		
		//'compresent'
		public Keyword getCompresentKeyword_2() { return cCompresentKeyword_2; }
		
		//'adjacent'
		public Keyword getAdjacentKeyword_3() { return cAdjacentKeyword_3; }
		
		//'container'
		public Keyword getContainerKeyword_4() { return cContainerKeyword_4; }
		
		//'contained'
		public Keyword getContainedKeyword_5() { return cContainedKeyword_5; }
		
		//'purpose'
		public Keyword getPurposeKeyword_6() { return cPurposeKeyword_6; }
		
		//'causant'
		public Keyword getCausantKeyword_7() { return cCausantKeyword_7; }
		
		//'caused'
		public Keyword getCausedKeyword_8() { return cCausedKeyword_8; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNegatedAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cNegatedAlternatives_0_0_0 = (Alternatives)cNegatedAssignment_0_0.eContents().get(0);
		private final Keyword cNegatedNotKeyword_0_0_0_0 = (Keyword)cNegatedAlternatives_0_0_0.eContents().get(0);
		private final Keyword cNegatedNoKeyword_0_0_0_1 = (Keyword)cNegatedAlternatives_0_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameConceptReferenceParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cIdentifiedKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cAsKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Alternatives cAlternatives_0_2_2 = (Alternatives)cGroup_0_2.eContents().get(2);
		private final Assignment cStringIdentifierAssignment_0_2_2_0 = (Assignment)cAlternatives_0_2_2.eContents().get(0);
		private final Alternatives cStringIdentifierAlternatives_0_2_2_0_0 = (Alternatives)cStringIdentifierAssignment_0_2_2_0.eContents().get(0);
		private final RuleCall cStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(0);
		private final RuleCall cStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1 = (RuleCall)cStringIdentifierAlternatives_0_2_2_0_0.eContents().get(1);
		private final Assignment cIntIdentifierAssignment_0_2_2_1 = (Assignment)cAlternatives_0_2_2.eContents().get(1);
		private final RuleCall cIntIdentifierINTTerminalRuleCall_0_2_2_1_0 = (RuleCall)cIntIdentifierAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cByKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Assignment cAuthorityAssignment_0_2_4 = (Assignment)cGroup_0_2.eContents().get(4);
		private final Alternatives cAuthorityAlternatives_0_2_4_0 = (Alternatives)cAuthorityAssignment_0_2_4.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0 = (RuleCall)cAuthorityAlternatives_0_2_4_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1 = (RuleCall)cAuthorityAlternatives_0_2_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPresenceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPresencePresenceKeyword_1_0_0 = (Keyword)cPresenceAssignment_1_0.eContents().get(0);
		private final Keyword cOfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConceptAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_1_2_0 = (RuleCall)cConceptAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cCountAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cCountCountKeyword_2_0_0 = (Keyword)cCountAssignment_2_0.eContents().get(0);
		private final Keyword cOfKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConceptAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_2_2_0 = (RuleCall)cConceptAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDistanceAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDistanceDistanceKeyword_3_0_0 = (Keyword)cDistanceAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cToKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cFromKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Assignment cConceptAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_3_2_0 = (RuleCall)cConceptAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cProbabilityAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cProbabilityProbabilityKeyword_4_0_0 = (Keyword)cProbabilityAssignment_4_0.eContents().get(0);
		private final Keyword cOfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConceptAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_4_2_0 = (RuleCall)cConceptAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cAssessmentAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cAssessmentAssessmentKeyword_5_0_0 = (Keyword)cAssessmentAssignment_5_0.eContents().get(0);
		private final Keyword cOfKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConceptAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_5_2_0 = (RuleCall)cConceptAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cUncertaintyAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cUncertaintyUncertaintyKeyword_6_0_0 = (Keyword)cUncertaintyAssignment_6_0.eContents().get(0);
		private final Keyword cOfKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cConceptAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_6_2_0 = (RuleCall)cConceptAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cTypeAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cTypeTypeKeyword_7_0_0 = (Keyword)cTypeAssignment_7_0.eContents().get(0);
		private final Keyword cOfKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cConceptAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_7_2_0 = (RuleCall)cConceptAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cObservabilityAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cObservabilityObservabilityKeyword_8_0_0 = (Keyword)cObservabilityAssignment_8_0.eContents().get(0);
		private final Keyword cOfKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cConceptAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_8_2_0 = (RuleCall)cConceptAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cProportionAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cProportionProportionKeyword_9_0_0 = (Keyword)cProportionAssignment_9_0.eContents().get(0);
		private final Keyword cOfKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cConceptAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_9_2_0 = (RuleCall)cConceptAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cInKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cOtherAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_9_3_1_0 = (RuleCall)cOtherAssignment_9_3_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cRatioAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cRatioRatioKeyword_10_0_0 = (Keyword)cRatioAssignment_10_0.eContents().get(0);
		private final Keyword cOfKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cConceptAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_10_2_0 = (RuleCall)cConceptAssignment_10_2.eContents().get(0);
		private final Keyword cToKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cOtherAssignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_10_4_0 = (RuleCall)cOtherAssignment_10_4.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cValueAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cValueValueKeyword_11_0_0 = (Keyword)cValueAssignment_11_0.eContents().get(0);
		private final Keyword cOfKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cConceptAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_11_2_0 = (RuleCall)cConceptAssignment_11_2.eContents().get(0);
		private final Group cGroup_11_3 = (Group)cGroup_11.eContents().get(3);
		private final Keyword cOverKeyword_11_3_0 = (Keyword)cGroup_11_3.eContents().get(0);
		private final Assignment cOtherAssignment_11_3_1 = (Assignment)cGroup_11_3.eContents().get(1);
		private final RuleCall cOtherSimpleConceptDeclarationParserRuleCall_11_3_1_0 = (RuleCall)cOtherAssignment_11_3_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cOccurrenceAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cOccurrenceOccurrenceKeyword_12_0_0 = (Keyword)cOccurrenceAssignment_12_0.eContents().get(0);
		private final Keyword cOfKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cConceptAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cConceptSimpleConceptDeclarationParserRuleCall_12_2_0 = (RuleCall)cConceptAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cLeftParenthesisKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cDeclarationAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cDeclarationExpressionParserRuleCall_13_1_0 = (RuleCall)cDeclarationAssignment_13_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		
		//Concept:
		//	negated?=('not' | 'no')? name=ConceptReference ('identified' 'as' (stringIdentifier=(ID | STRING) |
		//	intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))? | presence?='presence' 'of'
		//	concept=SimpleConceptDeclaration | count?='count' 'of' concept=SimpleConceptDeclaration | distance?='distance' ('to'
		//	| 'from') concept=SimpleConceptDeclaration | probability?='probability' 'of' concept=SimpleConceptDeclaration |
		//	assessment?='assessment' 'of' concept=SimpleConceptDeclaration | uncertainty?='uncertainty' 'of'
		//	concept=SimpleConceptDeclaration | type?='type' 'of' concept=SimpleConceptDeclaration |
		//	observability?='observability' 'of' concept=SimpleConceptDeclaration | proportion?='proportion' 'of'
		//	concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? | ratio?='ratio' 'of'
		//	concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration | value?='value' 'of'
		//	concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? | occurrence?='occurrence' 'of'
		//	concept=SimpleConceptDeclaration | '(' declaration=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//negated?=('not' | 'no')? name=ConceptReference ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT)
		//'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))? | presence?='presence' 'of' concept=SimpleConceptDeclaration |
		//count?='count' 'of' concept=SimpleConceptDeclaration | distance?='distance' ('to' | 'from')
		//concept=SimpleConceptDeclaration | probability?='probability' 'of' concept=SimpleConceptDeclaration |
		//assessment?='assessment' 'of' concept=SimpleConceptDeclaration | uncertainty?='uncertainty' 'of'
		//concept=SimpleConceptDeclaration | type?='type' 'of' concept=SimpleConceptDeclaration | observability?='observability'
		//'of' concept=SimpleConceptDeclaration | proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in'
		//other=SimpleConceptDeclaration)? | ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to'
		//other=SimpleConceptDeclaration | value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over'
		//other=SimpleConceptDeclaration)? | occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration | '('
		//declaration=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//negated?=('not' | 'no')? name=ConceptReference ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT)
		//'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))?
		public Group getGroup_0() { return cGroup_0; }
		
		//negated?=('not' | 'no')?
		public Assignment getNegatedAssignment_0_0() { return cNegatedAssignment_0_0; }
		
		//('not' | 'no')
		public Alternatives getNegatedAlternatives_0_0_0() { return cNegatedAlternatives_0_0_0; }
		
		//'not'
		public Keyword getNegatedNotKeyword_0_0_0_0() { return cNegatedNotKeyword_0_0_0_0; }
		
		//'no'
		public Keyword getNegatedNoKeyword_0_0_0_1() { return cNegatedNoKeyword_0_0_0_1; }
		
		//name=ConceptReference
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ConceptReference
		public RuleCall getNameConceptReferenceParserRuleCall_0_1_0() { return cNameConceptReferenceParserRuleCall_0_1_0; }
		
		//('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'identified'
		public Keyword getIdentifiedKeyword_0_2_0() { return cIdentifiedKeyword_0_2_0; }
		
		//'as'
		public Keyword getAsKeyword_0_2_1() { return cAsKeyword_0_2_1; }
		
		//stringIdentifier=(ID | STRING) | intIdentifier=INT
		public Alternatives getAlternatives_0_2_2() { return cAlternatives_0_2_2; }
		
		//stringIdentifier=(ID | STRING)
		public Assignment getStringIdentifierAssignment_0_2_2_0() { return cStringIdentifierAssignment_0_2_2_0; }
		
		//(ID | STRING)
		public Alternatives getStringIdentifierAlternatives_0_2_2_0_0() { return cStringIdentifierAlternatives_0_2_2_0_0; }
		
		//ID
		public RuleCall getStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0() { return cStringIdentifierIDTerminalRuleCall_0_2_2_0_0_0; }
		
		//STRING
		public RuleCall getStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1() { return cStringIdentifierSTRINGTerminalRuleCall_0_2_2_0_0_1; }
		
		//intIdentifier=INT
		public Assignment getIntIdentifierAssignment_0_2_2_1() { return cIntIdentifierAssignment_0_2_2_1; }
		
		//INT
		public RuleCall getIntIdentifierINTTerminalRuleCall_0_2_2_1_0() { return cIntIdentifierINTTerminalRuleCall_0_2_2_1_0; }
		
		//'by'
		public Keyword getByKeyword_0_2_3() { return cByKeyword_0_2_3; }
		
		//authority=(UPPERCASE_ID | UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_0_2_4() { return cAuthorityAssignment_0_2_4; }
		
		//(UPPERCASE_ID | UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_0_2_4_0() { return cAuthorityAlternatives_0_2_4_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_0_2_4_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_0_2_4_0_1; }
		
		//// unary operators
		// presence?='presence' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_1() { return cGroup_1; }
		
		//// unary operators
		// presence?='presence'
		public Assignment getPresenceAssignment_1_0() { return cPresenceAssignment_1_0; }
		
		//'presence'
		public Keyword getPresencePresenceKeyword_1_0_0() { return cPresencePresenceKeyword_1_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1_1() { return cOfKeyword_1_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_1_2() { return cConceptAssignment_1_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_1_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_1_2_0; }
		
		//count?='count' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_2() { return cGroup_2; }
		
		//count?='count'
		public Assignment getCountAssignment_2_0() { return cCountAssignment_2_0; }
		
		//'count'
		public Keyword getCountCountKeyword_2_0_0() { return cCountCountKeyword_2_0_0; }
		
		//'of'
		public Keyword getOfKeyword_2_1() { return cOfKeyword_2_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_2_2() { return cConceptAssignment_2_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_2_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_2_2_0; }
		
		//distance?='distance' ('to' | 'from') concept=SimpleConceptDeclaration
		public Group getGroup_3() { return cGroup_3; }
		
		//distance?='distance'
		public Assignment getDistanceAssignment_3_0() { return cDistanceAssignment_3_0; }
		
		//'distance'
		public Keyword getDistanceDistanceKeyword_3_0_0() { return cDistanceDistanceKeyword_3_0_0; }
		
		//'to' | 'from'
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'to'
		public Keyword getToKeyword_3_1_0() { return cToKeyword_3_1_0; }
		
		//'from'
		public Keyword getFromKeyword_3_1_1() { return cFromKeyword_3_1_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_3_2() { return cConceptAssignment_3_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_3_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_3_2_0; }
		
		//probability?='probability' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_4() { return cGroup_4; }
		
		//probability?='probability'
		public Assignment getProbabilityAssignment_4_0() { return cProbabilityAssignment_4_0; }
		
		//'probability'
		public Keyword getProbabilityProbabilityKeyword_4_0_0() { return cProbabilityProbabilityKeyword_4_0_0; }
		
		//'of'
		public Keyword getOfKeyword_4_1() { return cOfKeyword_4_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_4_2() { return cConceptAssignment_4_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_4_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_4_2_0; }
		
		//assessment?='assessment' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_5() { return cGroup_5; }
		
		//assessment?='assessment'
		public Assignment getAssessmentAssignment_5_0() { return cAssessmentAssignment_5_0; }
		
		//'assessment'
		public Keyword getAssessmentAssessmentKeyword_5_0_0() { return cAssessmentAssessmentKeyword_5_0_0; }
		
		//'of'
		public Keyword getOfKeyword_5_1() { return cOfKeyword_5_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_5_2() { return cConceptAssignment_5_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_5_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_5_2_0; }
		
		//uncertainty?='uncertainty' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_6() { return cGroup_6; }
		
		//uncertainty?='uncertainty'
		public Assignment getUncertaintyAssignment_6_0() { return cUncertaintyAssignment_6_0; }
		
		//'uncertainty'
		public Keyword getUncertaintyUncertaintyKeyword_6_0_0() { return cUncertaintyUncertaintyKeyword_6_0_0; }
		
		//'of'
		public Keyword getOfKeyword_6_1() { return cOfKeyword_6_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_6_2() { return cConceptAssignment_6_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_6_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_6_2_0; }
		
		//type?='type' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_7() { return cGroup_7; }
		
		//type?='type'
		public Assignment getTypeAssignment_7_0() { return cTypeAssignment_7_0; }
		
		//'type'
		public Keyword getTypeTypeKeyword_7_0_0() { return cTypeTypeKeyword_7_0_0; }
		
		//'of'
		public Keyword getOfKeyword_7_1() { return cOfKeyword_7_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_7_2() { return cConceptAssignment_7_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_7_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_7_2_0; }
		
		//observability?='observability' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_8() { return cGroup_8; }
		
		//observability?='observability'
		public Assignment getObservabilityAssignment_8_0() { return cObservabilityAssignment_8_0; }
		
		//'observability'
		public Keyword getObservabilityObservabilityKeyword_8_0_0() { return cObservabilityObservabilityKeyword_8_0_0; }
		
		//'of'
		public Keyword getOfKeyword_8_1() { return cOfKeyword_8_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_8_2() { return cConceptAssignment_8_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_8_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_8_2_0; }
		
		//proportion?='proportion' 'of' concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_9() { return cGroup_9; }
		
		//proportion?='proportion'
		public Assignment getProportionAssignment_9_0() { return cProportionAssignment_9_0; }
		
		//'proportion'
		public Keyword getProportionProportionKeyword_9_0_0() { return cProportionProportionKeyword_9_0_0; }
		
		//'of'
		public Keyword getOfKeyword_9_1() { return cOfKeyword_9_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_9_2() { return cConceptAssignment_9_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_9_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_9_2_0; }
		
		//(=> 'in' other=SimpleConceptDeclaration)?
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//=> 'in'
		public Keyword getInKeyword_9_3_0() { return cInKeyword_9_3_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_9_3_1() { return cOtherAssignment_9_3_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_9_3_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_9_3_1_0; }
		
		//ratio?='ratio' 'of' concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration
		public Group getGroup_10() { return cGroup_10; }
		
		//ratio?='ratio'
		public Assignment getRatioAssignment_10_0() { return cRatioAssignment_10_0; }
		
		//'ratio'
		public Keyword getRatioRatioKeyword_10_0_0() { return cRatioRatioKeyword_10_0_0; }
		
		//'of'
		public Keyword getOfKeyword_10_1() { return cOfKeyword_10_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_10_2() { return cConceptAssignment_10_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_10_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_10_2_0; }
		
		//=> 'to'
		public Keyword getToKeyword_10_3() { return cToKeyword_10_3; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_10_4() { return cOtherAssignment_10_4; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_10_4_0() { return cOtherSimpleConceptDeclarationParserRuleCall_10_4_0; }
		
		//value?='value' 'of' concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)?
		public Group getGroup_11() { return cGroup_11; }
		
		//value?='value'
		public Assignment getValueAssignment_11_0() { return cValueAssignment_11_0; }
		
		//'value'
		public Keyword getValueValueKeyword_11_0_0() { return cValueValueKeyword_11_0_0; }
		
		//'of'
		public Keyword getOfKeyword_11_1() { return cOfKeyword_11_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_11_2() { return cConceptAssignment_11_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_11_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_11_2_0; }
		
		//(=> 'over' other=SimpleConceptDeclaration)?
		public Group getGroup_11_3() { return cGroup_11_3; }
		
		//=> 'over'
		public Keyword getOverKeyword_11_3_0() { return cOverKeyword_11_3_0; }
		
		//other=SimpleConceptDeclaration
		public Assignment getOtherAssignment_11_3_1() { return cOtherAssignment_11_3_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getOtherSimpleConceptDeclarationParserRuleCall_11_3_1_0() { return cOtherSimpleConceptDeclarationParserRuleCall_11_3_1_0; }
		
		//occurrence?='occurrence' 'of' concept=SimpleConceptDeclaration
		public Group getGroup_12() { return cGroup_12; }
		
		//occurrence?='occurrence'
		public Assignment getOccurrenceAssignment_12_0() { return cOccurrenceAssignment_12_0; }
		
		//'occurrence'
		public Keyword getOccurrenceOccurrenceKeyword_12_0_0() { return cOccurrenceOccurrenceKeyword_12_0_0; }
		
		//'of'
		public Keyword getOfKeyword_12_1() { return cOfKeyword_12_1; }
		
		//concept=SimpleConceptDeclaration
		public Assignment getConceptAssignment_12_2() { return cConceptAssignment_12_2; }
		
		//SimpleConceptDeclaration
		public RuleCall getConceptSimpleConceptDeclarationParserRuleCall_12_2_0() { return cConceptSimpleConceptDeclarationParserRuleCall_12_2_0; }
		
		//'(' declaration=Expression ')'
		public Group getGroup_13() { return cGroup_13; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13_0() { return cLeftParenthesisKeyword_13_0; }
		
		//declaration=Expression
		public Assignment getDeclarationAssignment_13_1() { return cDeclarationAssignment_13_1; }
		
		//Expression
		public RuleCall getDeclarationExpressionParserRuleCall_13_1_0() { return cDeclarationExpressionParserRuleCall_13_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13_2() { return cRightParenthesisKeyword_13_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Expression");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression ConceptDeclaration:
		//	Term;
		@Override public ParserRule getRule() { return rule; }
		
		//Term
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsOrKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsFactorParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//Term ConceptDeclaration:
		//	Factor (operators+='or' operands+=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (operators+='or' operands+=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(operators+='or' operands+=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+='or'
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//'or'
		public Keyword getOperatorsOrKeyword_1_0_0() { return cOperatorsOrKeyword_1_0_0; }
		
		//operands+=Factor
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//Factor
		public RuleCall getOperandsFactorParserRuleCall_1_1_0() { return cOperandsFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConceptDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsAndKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsFollowsKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsTermParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//Factor ConceptDeclaration:
		//	ConceptDeclaration (operators+=('and' | 'follows') operands+=Term)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		// ConceptDeclaration
		//(operators+=('and' | 'follows') operands+=Term)*
		public Group getGroup() { return cGroup; }
		
		//// semantic operator 'follows' (events only) is chainable with intersection syntax and precedence
		// ConceptDeclaration
		public RuleCall getConceptDeclarationParserRuleCall_0() { return cConceptDeclarationParserRuleCall_0; }
		
		//(operators+=('and' | 'follows') operands+=Term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operators+=('and' | 'follows')
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }
		
		//('and' | 'follows')
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }
		
		//'and'
		public Keyword getOperatorsAndKeyword_1_0_0_0() { return cOperatorsAndKeyword_1_0_0_0; }
		
		//'follows'
		public Keyword getOperatorsFollowsKeyword_1_0_0_1() { return cOperatorsFollowsKeyword_1_0_0_1; }
		
		//operands+=Term
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }
		
		//Term
		public RuleCall getOperandsTermParserRuleCall_1_1_0() { return cOperandsTermParserRuleCall_1_1_0; }
	}
	public class SimpleConceptDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.SimpleConceptDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainConceptParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		///*
		// * Declaration without inherency and context, used in Concept to ensure that
		// * the 'within' and 'of' remain outer-level unless parenthesesized.
		// */
		//SimpleConceptDeclaration ConceptDeclaration:
		//	name=STRING? main+=Concept+;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING? main+=Concept+
		public Group getGroup() { return cGroup; }
		
		//name=STRING?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//main+=Concept+
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }
		
		//Concept
		public RuleCall getMainConceptParserRuleCall_1_0() { return cMainConceptParserRuleCall_1_0; }
	}
	public class UpperOntologyDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.UpperOntologyDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Assignment cAgentSpecifierAssignment_1_0_0_0_0 = (Assignment)cGroup_1_0_0_0.eContents().get(0);
		private final Alternatives cAgentSpecifierAlternatives_1_0_0_0_0_0 = (Alternatives)cAgentSpecifierAssignment_1_0_0_0_0.eContents().get(0);
		private final Keyword cAgentSpecifierDeliberativeKeyword_1_0_0_0_0_0_0 = (Keyword)cAgentSpecifierAlternatives_1_0_0_0_0_0.eContents().get(0);
		private final Keyword cAgentSpecifierInteractiveKeyword_1_0_0_0_0_0_1 = (Keyword)cAgentSpecifierAlternatives_1_0_0_0_0_0.eContents().get(1);
		private final Keyword cAgentSpecifierReactiveKeyword_1_0_0_0_0_0_2 = (Keyword)cAgentSpecifierAlternatives_1_0_0_0_0_0.eContents().get(2);
		private final Assignment cConceptAssignment_1_0_0_0_1 = (Assignment)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cConceptAgentKeyword_1_0_0_0_1_0 = (Keyword)cConceptAssignment_1_0_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Assignment cPropertySpecifiersAssignment_1_0_0_1_0 = (Assignment)cGroup_1_0_0_1.eContents().get(0);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_0_0 = (RuleCall)cPropertySpecifiersAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cPropertySpecifiersAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_1_0 = (RuleCall)cPropertySpecifiersAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cConceptAssignment_1_0_0_1_2 = (Assignment)cGroup_1_0_0_1.eContents().get(2);
		private final Keyword cConceptRelationshipKeyword_1_0_0_1_2_0 = (Keyword)cConceptAssignment_1_0_0_1_2.eContents().get(0);
		private final Keyword cUsingKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cCoreconceptAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final Alternatives cCoreconceptAlternatives_1_0_2_0 = (Alternatives)cCoreconceptAssignment_1_0_2.eContents().get(0);
		private final RuleCall cCoreconceptNamespaceIdParserRuleCall_1_0_2_0_0 = (RuleCall)cCoreconceptAlternatives_1_0_2_0.eContents().get(0);
		private final RuleCall cCoreconceptPropertyIdParserRuleCall_1_0_2_0_1 = (RuleCall)cCoreconceptAlternatives_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperandOPERATOR_TARGETParserRuleCall_1_1_0_0 = (RuleCall)cOperandAssignment_1_1_0.eContents().get(0);
		private final Keyword cUsingKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPropertyAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final Alternatives cPropertyAlternatives_1_1_2_0 = (Alternatives)cPropertyAssignment_1_1_2.eContents().get(0);
		private final RuleCall cPropertyPropertyIdParserRuleCall_1_1_2_0_0 = (RuleCall)cPropertyAlternatives_1_1_2_0.eContents().get(0);
		private final RuleCall cPropertyNamespaceIdParserRuleCall_1_1_2_0_1 = (RuleCall)cPropertyAlternatives_1_1_2_0.eContents().get(1);
		
		///*
		// * statement to connect specialized type or target of relationship to upper ontology
		// */ UpperOntologyDefinition:
		//	'model' ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent' |
		//	(propertySpecifiers+=PROPERTY_TYPE propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?) 'using'
		//	coreconcept=(NamespaceId | PropertyId) | operand=OPERATOR_TARGET 'using' property=(PropertyId | NamespaceId));
		@Override public ParserRule getRule() { return rule; }
		
		//'model' ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent' |
		//(propertySpecifiers+=PROPERTY_TYPE propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?) 'using'
		//coreconcept=(NamespaceId | PropertyId) | operand=OPERATOR_TARGET 'using' property=(PropertyId | NamespaceId))
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//(agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent' | (propertySpecifiers+=PROPERTY_TYPE
		//propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?) 'using' coreconcept=(NamespaceId | PropertyId) |
		//operand=OPERATOR_TARGET 'using' property=(PropertyId | NamespaceId)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent' | (propertySpecifiers+=PROPERTY_TYPE
		//propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?) 'using' coreconcept=(NamespaceId | PropertyId)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent' | (propertySpecifiers+=PROPERTY_TYPE
		//propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent'
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//agentSpecifier=('deliberative' | 'interactive' | 'reactive')
		public Assignment getAgentSpecifierAssignment_1_0_0_0_0() { return cAgentSpecifierAssignment_1_0_0_0_0; }
		
		//('deliberative' | 'interactive' | 'reactive')
		public Alternatives getAgentSpecifierAlternatives_1_0_0_0_0_0() { return cAgentSpecifierAlternatives_1_0_0_0_0_0; }
		
		//'deliberative'
		public Keyword getAgentSpecifierDeliberativeKeyword_1_0_0_0_0_0_0() { return cAgentSpecifierDeliberativeKeyword_1_0_0_0_0_0_0; }
		
		//'interactive'
		public Keyword getAgentSpecifierInteractiveKeyword_1_0_0_0_0_0_1() { return cAgentSpecifierInteractiveKeyword_1_0_0_0_0_0_1; }
		
		//'reactive'
		public Keyword getAgentSpecifierReactiveKeyword_1_0_0_0_0_0_2() { return cAgentSpecifierReactiveKeyword_1_0_0_0_0_0_2; }
		
		//concept='agent'
		public Assignment getConceptAssignment_1_0_0_0_1() { return cConceptAssignment_1_0_0_0_1; }
		
		//'agent'
		public Keyword getConceptAgentKeyword_1_0_0_0_1_0() { return cConceptAgentKeyword_1_0_0_0_1_0; }
		
		//(propertySpecifiers+=PROPERTY_TYPE propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//propertySpecifiers+=PROPERTY_TYPE
		public Assignment getPropertySpecifiersAssignment_1_0_0_1_0() { return cPropertySpecifiersAssignment_1_0_0_1_0; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_0_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_0_0; }
		
		//propertySpecifiers+=PROPERTY_TYPE*
		public Assignment getPropertySpecifiersAssignment_1_0_0_1_1() { return cPropertySpecifiersAssignment_1_0_0_1_1; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_1_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_0_0_1_1_0; }
		
		//concept='relationship'
		public Assignment getConceptAssignment_1_0_0_1_2() { return cConceptAssignment_1_0_0_1_2; }
		
		//'relationship'
		public Keyword getConceptRelationshipKeyword_1_0_0_1_2_0() { return cConceptRelationshipKeyword_1_0_0_1_2_0; }
		
		//'using'
		public Keyword getUsingKeyword_1_0_1() { return cUsingKeyword_1_0_1; }
		
		//coreconcept=(NamespaceId | PropertyId)
		public Assignment getCoreconceptAssignment_1_0_2() { return cCoreconceptAssignment_1_0_2; }
		
		//(NamespaceId | PropertyId)
		public Alternatives getCoreconceptAlternatives_1_0_2_0() { return cCoreconceptAlternatives_1_0_2_0; }
		
		//NamespaceId
		public RuleCall getCoreconceptNamespaceIdParserRuleCall_1_0_2_0_0() { return cCoreconceptNamespaceIdParserRuleCall_1_0_2_0_0; }
		
		//PropertyId
		public RuleCall getCoreconceptPropertyIdParserRuleCall_1_0_2_0_1() { return cCoreconceptPropertyIdParserRuleCall_1_0_2_0_1; }
		
		//operand=OPERATOR_TARGET 'using' property=(PropertyId | NamespaceId)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//operand=OPERATOR_TARGET
		public Assignment getOperandAssignment_1_1_0() { return cOperandAssignment_1_1_0; }
		
		//OPERATOR_TARGET
		public RuleCall getOperandOPERATOR_TARGETParserRuleCall_1_1_0_0() { return cOperandOPERATOR_TARGETParserRuleCall_1_1_0_0; }
		
		//'using'
		public Keyword getUsingKeyword_1_1_1() { return cUsingKeyword_1_1_1; }
		
		//property=(PropertyId | NamespaceId)
		public Assignment getPropertyAssignment_1_1_2() { return cPropertyAssignment_1_1_2; }
		
		//(PropertyId | NamespaceId)
		public Alternatives getPropertyAlternatives_1_1_2_0() { return cPropertyAlternatives_1_1_2_0; }
		
		//PropertyId
		public RuleCall getPropertyPropertyIdParserRuleCall_1_1_2_0_0() { return cPropertyPropertyIdParserRuleCall_1_1_2_0_0; }
		
		//NamespaceId
		public RuleCall getPropertyNamespaceIdParserRuleCall_1_1_2_0_1() { return cPropertyNamespaceIdParserRuleCall_1_1_2_0_1; }
	}
	public class ConceptStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ConceptStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cAbstractAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_1_0_0 = (Keyword)cAbstractAssignment_1_0.eContents().get(0);
		private final Assignment cDeniableAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cDeniableDeniableKeyword_1_1_0 = (Keyword)cDeniableAssignment_1_1.eContents().get(0);
		private final Assignment cSubjectiveAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cSubjectiveSubjectiveKeyword_1_2_0 = (Keyword)cSubjectiveAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cUnorderedGroup_1.eContents().get(3);
		private final Assignment cAgentSpecifierAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final Alternatives cAgentSpecifierAlternatives_1_3_0_0 = (Alternatives)cAgentSpecifierAssignment_1_3_0.eContents().get(0);
		private final Keyword cAgentSpecifierDeliberativeKeyword_1_3_0_0_0 = (Keyword)cAgentSpecifierAlternatives_1_3_0_0.eContents().get(0);
		private final Keyword cAgentSpecifierInteractiveKeyword_1_3_0_0_1 = (Keyword)cAgentSpecifierAlternatives_1_3_0_0.eContents().get(1);
		private final Keyword cAgentSpecifierReactiveKeyword_1_3_0_0_2 = (Keyword)cAgentSpecifierAlternatives_1_3_0_0.eContents().get(2);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Assignment cPropertySpecifiersAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_0_0 = (RuleCall)cPropertySpecifiersAssignment_1_3_1_0.eContents().get(0);
		private final Assignment cPropertySpecifiersAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_1_0 = (RuleCall)cPropertySpecifiersAssignment_1_3_1_1.eContents().get(0);
		private final Assignment cConceptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConceptCONCEPT_TYPEParserRuleCall_2_0 = (RuleCall)cConceptAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyConceptStatementBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cNamedKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameNamespaceIdParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		
		//ConceptStatement:
		//	annotations+=Annotation* (abstract?='abstract'? & deniable?='deniable'? & subjective?='subjective'? &
		//	(agentSpecifier=('deliberative' | 'interactive' | 'reactive') | propertySpecifiers+=PROPERTY_TYPE
		//	propertySpecifiers+=PROPERTY_TYPE*)?) concept=CONCEPT_TYPE body=ConceptStatementBody ('named' name=NamespaceId)?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=Annotation* (abstract?='abstract'? & deniable?='deniable'? & subjective?='subjective'? &
		//(agentSpecifier=('deliberative' | 'interactive' | 'reactive') | propertySpecifiers+=PROPERTY_TYPE
		//propertySpecifiers+=PROPERTY_TYPE*)?) concept=CONCEPT_TYPE body=ConceptStatementBody ('named' name=NamespaceId)?
		public Group getGroup() { return cGroup; }
		
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//abstract?='abstract'? & deniable?='deniable'? & subjective?='subjective'? & (agentSpecifier=('deliberative' |
		//'interactive' | 'reactive') | propertySpecifiers+=PROPERTY_TYPE propertySpecifiers+=PROPERTY_TYPE*)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1_0() { return cAbstractAssignment_1_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0_0() { return cAbstractAbstractKeyword_1_0_0; }
		
		//deniable?='deniable'?
		public Assignment getDeniableAssignment_1_1() { return cDeniableAssignment_1_1; }
		
		//'deniable'
		public Keyword getDeniableDeniableKeyword_1_1_0() { return cDeniableDeniableKeyword_1_1_0; }
		
		//subjective?='subjective'?
		public Assignment getSubjectiveAssignment_1_2() { return cSubjectiveAssignment_1_2; }
		
		//'subjective'
		public Keyword getSubjectiveSubjectiveKeyword_1_2_0() { return cSubjectiveSubjectiveKeyword_1_2_0; }
		
		//(agentSpecifier=('deliberative' | 'interactive' | 'reactive') | propertySpecifiers+=PROPERTY_TYPE
		//propertySpecifiers+=PROPERTY_TYPE*)?
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//agentSpecifier=('deliberative' | 'interactive' | 'reactive')
		public Assignment getAgentSpecifierAssignment_1_3_0() { return cAgentSpecifierAssignment_1_3_0; }
		
		//('deliberative' | 'interactive' | 'reactive')
		public Alternatives getAgentSpecifierAlternatives_1_3_0_0() { return cAgentSpecifierAlternatives_1_3_0_0; }
		
		//'deliberative'
		public Keyword getAgentSpecifierDeliberativeKeyword_1_3_0_0_0() { return cAgentSpecifierDeliberativeKeyword_1_3_0_0_0; }
		
		//'interactive'
		public Keyword getAgentSpecifierInteractiveKeyword_1_3_0_0_1() { return cAgentSpecifierInteractiveKeyword_1_3_0_0_1; }
		
		//'reactive'
		public Keyword getAgentSpecifierReactiveKeyword_1_3_0_0_2() { return cAgentSpecifierReactiveKeyword_1_3_0_0_2; }
		
		//propertySpecifiers+=PROPERTY_TYPE propertySpecifiers+=PROPERTY_TYPE*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//propertySpecifiers+=PROPERTY_TYPE
		public Assignment getPropertySpecifiersAssignment_1_3_1_0() { return cPropertySpecifiersAssignment_1_3_1_0; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_0_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_0_0; }
		
		//propertySpecifiers+=PROPERTY_TYPE*
		public Assignment getPropertySpecifiersAssignment_1_3_1_1() { return cPropertySpecifiersAssignment_1_3_1_1; }
		
		//PROPERTY_TYPE
		public RuleCall getPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_1_0() { return cPropertySpecifiersPROPERTY_TYPEParserRuleCall_1_3_1_1_0; }
		
		//concept=CONCEPT_TYPE
		public Assignment getConceptAssignment_2() { return cConceptAssignment_2; }
		
		//CONCEPT_TYPE
		public RuleCall getConceptCONCEPT_TYPEParserRuleCall_2_0() { return cConceptCONCEPT_TYPEParserRuleCall_2_0; }
		
		//body=ConceptStatementBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//ConceptStatementBody
		public RuleCall getBodyConceptStatementBodyParserRuleCall_3_0() { return cBodyConceptStatementBodyParserRuleCall_3_0; }
		
		//('named' name=NamespaceId)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'named'
		public Keyword getNamedKeyword_4_0() { return cNamedKeyword_4_0; }
		
		//name=NamespaceId
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//NamespaceId
		public RuleCall getNameNamespaceIdParserRuleCall_4_1_0() { return cNameNamespaceIdParserRuleCall_4_1_0; }
	}
	public class ConceptStatementBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ConceptStatementBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRootAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cRootRootKeyword_2_0_0 = (Keyword)cRootAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameCAMELCASE_IDTerminalRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cIdentifiedKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cAsKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_2 = (Alternatives)cGroup_2_1_1.eContents().get(2);
		private final Assignment cStringIdentifierAssignment_2_1_1_2_0 = (Assignment)cAlternatives_2_1_1_2.eContents().get(0);
		private final Alternatives cStringIdentifierAlternatives_2_1_1_2_0_0 = (Alternatives)cStringIdentifierAssignment_2_1_1_2_0.eContents().get(0);
		private final RuleCall cStringIdentifierIDTerminalRuleCall_2_1_1_2_0_0_0 = (RuleCall)cStringIdentifierAlternatives_2_1_1_2_0_0.eContents().get(0);
		private final RuleCall cStringIdentifierSTRINGTerminalRuleCall_2_1_1_2_0_0_1 = (RuleCall)cStringIdentifierAlternatives_2_1_1_2_0_0.eContents().get(1);
		private final Assignment cIntIdentifierAssignment_2_1_1_2_1 = (Assignment)cAlternatives_2_1_1_2.eContents().get(1);
		private final RuleCall cIntIdentifierINTTerminalRuleCall_2_1_1_2_1_0 = (RuleCall)cIntIdentifierAssignment_2_1_1_2_1.eContents().get(0);
		private final Keyword cByKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Assignment cAuthorityAssignment_2_1_1_4 = (Assignment)cGroup_2_1_1.eContents().get(4);
		private final Alternatives cAuthorityAlternatives_2_1_1_4_0 = (Alternatives)cAuthorityAssignment_2_1_1_4.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_2_1_1_4_0_0 = (RuleCall)cAuthorityAlternatives_2_1_1_4_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_2_1_1_4_0_1 = (RuleCall)cAuthorityAlternatives_2_1_1_4_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cDocstringAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cDocstringSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cDocstringAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_0_0 = (Group)cAlternatives_3_1_0.eContents().get(0);
		private final Keyword cIsKeyword_3_1_0_0_0 = (Keyword)cGroup_3_1_0_0.eContents().get(0);
		private final Assignment cCoreConceptAssignment_3_1_0_0_1 = (Assignment)cGroup_3_1_0_0.eContents().get(1);
		private final Keyword cCoreConceptCoreKeyword_3_1_0_0_1_0 = (Keyword)cCoreConceptAssignment_3_1_0_0_1.eContents().get(0);
		private final Assignment cAliasAssignment_3_1_0_1 = (Assignment)cAlternatives_3_1_0.eContents().get(1);
		private final Keyword cAliasEqualsKeyword_3_1_0_1_0 = (Keyword)cAliasAssignment_3_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cNothingAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final Keyword cNothingNothingKeyword_3_1_1_0_0 = (Keyword)cNothingAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cAlternatives_3_1_1.eContents().get(1);
		private final Assignment cParentsAssignment_3_1_1_1_0 = (Assignment)cGroup_3_1_1_1.eContents().get(0);
		private final RuleCall cParentsConceptDeclarationParserRuleCall_3_1_1_1_0_0 = (RuleCall)cParentsAssignment_3_1_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1_1 = (Group)cGroup_3_1_1_1.eContents().get(1);
		private final Assignment cConnectorsAssignment_3_1_1_1_1_0 = (Assignment)cGroup_3_1_1_1_1.eContents().get(0);
		private final Alternatives cConnectorsAlternatives_3_1_1_1_1_0_0 = (Alternatives)cConnectorsAssignment_3_1_1_1_1_0.eContents().get(0);
		private final Keyword cConnectorsCommaKeyword_3_1_1_1_1_0_0_0 = (Keyword)cConnectorsAlternatives_3_1_1_1_1_0_0.eContents().get(0);
		private final Keyword cConnectorsOrKeyword_3_1_1_1_1_0_0_1 = (Keyword)cConnectorsAlternatives_3_1_1_1_1_0_0.eContents().get(1);
		private final Keyword cConnectorsAndKeyword_3_1_1_1_1_0_0_2 = (Keyword)cConnectorsAlternatives_3_1_1_1_1_0_0.eContents().get(2);
		private final Assignment cParentsAssignment_3_1_1_1_1_1 = (Assignment)cGroup_3_1_1_1_1.eContents().get(1);
		private final RuleCall cParentsConceptDeclarationParserRuleCall_3_1_1_1_1_1_0 = (RuleCall)cParentsAssignment_3_1_1_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cUnorderedGroup_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cAlternatives_3_2.eContents().get(0);
		private final Keyword cExposesKeyword_3_2_0_0 = (Keyword)cGroup_3_2_0.eContents().get(0);
		private final Assignment cContextualizedTraitsAssignment_3_2_0_1 = (Assignment)cGroup_3_2_0.eContents().get(1);
		private final RuleCall cContextualizedTraitsObservableSemanticsParserRuleCall_3_2_0_1_0 = (RuleCall)cContextualizedTraitsAssignment_3_2_0_1.eContents().get(0);
		private final Group cGroup_3_2_0_2 = (Group)cGroup_3_2_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0_2_0 = (Keyword)cGroup_3_2_0_2.eContents().get(0);
		private final Assignment cContextualizedTraitsAssignment_3_2_0_2_1 = (Assignment)cGroup_3_2_0_2.eContents().get(1);
		private final RuleCall cContextualizedTraitsObservableSemanticsParserRuleCall_3_2_0_2_1_0 = (RuleCall)cContextualizedTraitsAssignment_3_2_0_2_1.eContents().get(0);
		private final Group cGroup_3_2_1 = (Group)cAlternatives_3_2.eContents().get(1);
		private final Assignment cSpecificAssignment_3_2_1_0 = (Assignment)cGroup_3_2_1.eContents().get(0);
		private final Keyword cSpecificExposingKeyword_3_2_1_0_0 = (Keyword)cSpecificAssignment_3_2_1_0.eContents().get(0);
		private final Assignment cContextualizesTraitsAssignment_3_2_1_1 = (Assignment)cGroup_3_2_1.eContents().get(1);
		private final RuleCall cContextualizesTraitsConceptDeclarationParserRuleCall_3_2_1_1_0 = (RuleCall)cContextualizesTraitsAssignment_3_2_1_1.eContents().get(0);
		private final Group cGroup_3_2_1_2 = (Group)cGroup_3_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_1_2_0 = (Keyword)cGroup_3_2_1_2.eContents().get(0);
		private final Assignment cContextualizesTraitsAssignment_3_2_1_2_1 = (Assignment)cGroup_3_2_1_2.eContents().get(1);
		private final RuleCall cContextualizesTraitsConceptDeclarationParserRuleCall_3_2_1_2_1_0 = (RuleCall)cContextualizesTraitsAssignment_3_2_1_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cDefinesKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Alternatives cAlternatives_3_3_1 = (Alternatives)cGroup_3_3.eContents().get(1);
		private final Group cGroup_3_3_1_0 = (Group)cAlternatives_3_3_1.eContents().get(0);
		private final Keyword cAuthorityKeyword_3_3_1_0_0 = (Keyword)cGroup_3_3_1_0.eContents().get(0);
		private final Assignment cDefinedAuthorityAssignment_3_3_1_0_1 = (Assignment)cGroup_3_3_1_0.eContents().get(1);
		private final RuleCall cDefinedAuthorityUPPERCASE_PATHTerminalRuleCall_3_3_1_0_1_0 = (RuleCall)cDefinedAuthorityAssignment_3_3_1_0_1.eContents().get(0);
		private final Assignment cUpperConceptAssignment_3_3_1_1 = (Assignment)cAlternatives_3_3_1.eContents().get(1);
		private final RuleCall cUpperConceptConceptParserRuleCall_3_3_1_1_0 = (RuleCall)cUpperConceptAssignment_3_3_1_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cRequiresKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cRequirementsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cRequirementsIdentityRequirementParserRuleCall_3_4_1_0 = (RuleCall)cRequirementsAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_4_2 = (Group)cGroup_3_4.eContents().get(2);
		private final Keyword cCommaKeyword_3_4_2_0 = (Keyword)cGroup_3_4_2.eContents().get(0);
		private final Assignment cRequirementsAssignment_3_4_2_1 = (Assignment)cGroup_3_4_2.eContents().get(1);
		private final RuleCall cRequirementsIdentityRequirementParserRuleCall_3_4_2_1_0 = (RuleCall)cRequirementsAssignment_3_4_2_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cDescribesKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cDescribedQualityAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cDescribedQualityConceptDeclarationParserRuleCall_3_5_1_0 = (RuleCall)cDescribedQualityAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cIncreasesKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Keyword cWithKeyword_3_6_1 = (Keyword)cGroup_3_6.eContents().get(1);
		private final Assignment cDescribedProportionalityAssignment_3_6_2 = (Assignment)cGroup_3_6.eContents().get(2);
		private final RuleCall cDescribedProportionalityConceptDeclarationParserRuleCall_3_6_2_0 = (RuleCall)cDescribedProportionalityAssignment_3_6_2.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cUnorderedGroup_3.eContents().get(7);
		private final Keyword cDecreasesKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Keyword cWithKeyword_3_7_1 = (Keyword)cGroup_3_7.eContents().get(1);
		private final Assignment cDescribedInverseProportionalityQualityAssignment_3_7_2 = (Assignment)cGroup_3_7.eContents().get(2);
		private final RuleCall cDescribedInverseProportionalityQualityConceptDeclarationParserRuleCall_3_7_2_0 = (RuleCall)cDescribedInverseProportionalityQualityAssignment_3_7_2.eContents().get(0);
		private final Group cGroup_3_8 = (Group)cUnorderedGroup_3.eContents().get(8);
		private final Keyword cMarksKeyword_3_8_0 = (Keyword)cGroup_3_8.eContents().get(0);
		private final Assignment cDescribedNonzeroQualityAssignment_3_8_1 = (Assignment)cGroup_3_8.eContents().get(1);
		private final RuleCall cDescribedNonzeroQualityConceptDeclarationParserRuleCall_3_8_1_0 = (RuleCall)cDescribedNonzeroQualityAssignment_3_8_1.eContents().get(0);
		private final Group cGroup_3_9 = (Group)cUnorderedGroup_3.eContents().get(9);
		private final Keyword cClassifiesKeyword_3_9_0 = (Keyword)cGroup_3_9.eContents().get(0);
		private final Assignment cClassifiesQualityAssignment_3_9_1 = (Assignment)cGroup_3_9.eContents().get(1);
		private final RuleCall cClassifiesQualityConceptDeclarationParserRuleCall_3_9_1_0 = (RuleCall)cClassifiesQualityAssignment_3_9_1.eContents().get(0);
		private final Group cGroup_3_10 = (Group)cUnorderedGroup_3.eContents().get(10);
		private final Keyword cDiscretizesKeyword_3_10_0 = (Keyword)cGroup_3_10.eContents().get(0);
		private final Assignment cDiscretizesQualityAssignment_3_10_1 = (Assignment)cGroup_3_10.eContents().get(1);
		private final RuleCall cDiscretizesQualityConceptDeclarationParserRuleCall_3_10_1_0 = (RuleCall)cDiscretizesQualityAssignment_3_10_1.eContents().get(0);
		private final Group cGroup_3_11 = (Group)cUnorderedGroup_3.eContents().get(11);
		private final Keyword cInheritsKeyword_3_11_0 = (Keyword)cGroup_3_11.eContents().get(0);
		private final Assignment cActuallyInheritedTraitsAssignment_3_11_1 = (Assignment)cGroup_3_11.eContents().get(1);
		private final RuleCall cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_11_1_0 = (RuleCall)cActuallyInheritedTraitsAssignment_3_11_1.eContents().get(0);
		private final Group cGroup_3_11_2 = (Group)cGroup_3_11.eContents().get(2);
		private final Keyword cCommaKeyword_3_11_2_0 = (Keyword)cGroup_3_11_2.eContents().get(0);
		private final Assignment cActuallyInheritedTraitsAssignment_3_11_2_1 = (Assignment)cGroup_3_11_2.eContents().get(1);
		private final RuleCall cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_11_2_1_0 = (RuleCall)cActuallyInheritedTraitsAssignment_3_11_2_1.eContents().get(0);
		private final Group cGroup_3_12 = (Group)cUnorderedGroup_3.eContents().get(12);
		private final Keyword cHasKeyword_3_12_0 = (Keyword)cGroup_3_12.eContents().get(0);
		private final Keyword cRoleKeyword_3_12_1 = (Keyword)cGroup_3_12.eContents().get(1);
		private final Assignment cRolesAssignment_3_12_2 = (Assignment)cGroup_3_12.eContents().get(2);
		private final RuleCall cRolesConceptDeclarationParserRuleCall_3_12_2_0 = (RuleCall)cRolesAssignment_3_12_2.eContents().get(0);
		private final Group cGroup_3_12_3 = (Group)cGroup_3_12.eContents().get(3);
		private final Keyword cCommaKeyword_3_12_3_0 = (Keyword)cGroup_3_12_3.eContents().get(0);
		private final Assignment cRolesAssignment_3_12_3_1 = (Assignment)cGroup_3_12_3.eContents().get(1);
		private final RuleCall cRolesConceptDeclarationParserRuleCall_3_12_3_1_0 = (RuleCall)cRolesAssignment_3_12_3_1.eContents().get(0);
		private final Group cGroup_3_12_4 = (Group)cGroup_3_12.eContents().get(4);
		private final Keyword cForKeyword_3_12_4_0 = (Keyword)cGroup_3_12_4.eContents().get(0);
		private final Assignment cTargetObservablesAssignment_3_12_4_1 = (Assignment)cGroup_3_12_4.eContents().get(1);
		private final RuleCall cTargetObservablesConceptDeclarationParserRuleCall_3_12_4_1_0 = (RuleCall)cTargetObservablesAssignment_3_12_4_1.eContents().get(0);
		private final Group cGroup_3_12_4_2 = (Group)cGroup_3_12_4.eContents().get(2);
		private final Keyword cCommaKeyword_3_12_4_2_0 = (Keyword)cGroup_3_12_4_2.eContents().get(0);
		private final Assignment cTargetObservablesAssignment_3_12_4_2_1 = (Assignment)cGroup_3_12_4_2.eContents().get(1);
		private final RuleCall cTargetObservablesConceptDeclarationParserRuleCall_3_12_4_2_1_0 = (RuleCall)cTargetObservablesAssignment_3_12_4_2_1.eContents().get(0);
		private final Group cGroup_3_12_5 = (Group)cGroup_3_12.eContents().get(5);
		private final Keyword cInKeyword_3_12_5_0 = (Keyword)cGroup_3_12_5.eContents().get(0);
		private final Assignment cRestrictedObservablesAssignment_3_12_5_1 = (Assignment)cGroup_3_12_5.eContents().get(1);
		private final RuleCall cRestrictedObservablesConceptDeclarationParserRuleCall_3_12_5_1_0 = (RuleCall)cRestrictedObservablesAssignment_3_12_5_1.eContents().get(0);
		private final Group cGroup_3_12_5_2 = (Group)cGroup_3_12_5.eContents().get(2);
		private final Keyword cCommaKeyword_3_12_5_2_0 = (Keyword)cGroup_3_12_5_2.eContents().get(0);
		private final Assignment cRestrictedObservablesAssignment_3_12_5_2_1 = (Assignment)cGroup_3_12_5_2.eContents().get(1);
		private final RuleCall cRestrictedObservablesConceptDeclarationParserRuleCall_3_12_5_2_1_0 = (RuleCall)cRestrictedObservablesAssignment_3_12_5_2_1.eContents().get(0);
		private final Group cGroup_3_13 = (Group)cUnorderedGroup_3.eContents().get(13);
		private final Keyword cConfersKeyword_3_13_0 = (Keyword)cGroup_3_13.eContents().get(0);
		private final Assignment cConferredTraitsAssignment_3_13_1 = (Assignment)cGroup_3_13.eContents().get(1);
		private final RuleCall cConferredTraitsConceptDeclarationParserRuleCall_3_13_1_0 = (RuleCall)cConferredTraitsAssignment_3_13_1.eContents().get(0);
		private final Group cGroup_3_13_2 = (Group)cGroup_3_13.eContents().get(2);
		private final Keyword cCommaKeyword_3_13_2_0 = (Keyword)cGroup_3_13_2.eContents().get(0);
		private final Assignment cConferredTraitsAssignment_3_13_2_1 = (Assignment)cGroup_3_13_2.eContents().get(1);
		private final RuleCall cConferredTraitsConceptDeclarationParserRuleCall_3_13_2_1_0 = (RuleCall)cConferredTraitsAssignment_3_13_2_1.eContents().get(0);
		private final Group cGroup_3_13_3 = (Group)cGroup_3_13.eContents().get(3);
		private final Keyword cToKeyword_3_13_3_0 = (Keyword)cGroup_3_13_3.eContents().get(0);
		private final Assignment cConferredTargetsAssignment_3_13_3_1 = (Assignment)cGroup_3_13_3.eContents().get(1);
		private final RuleCall cConferredTargetsConceptDeclarationParserRuleCall_3_13_3_1_0 = (RuleCall)cConferredTargetsAssignment_3_13_3_1.eContents().get(0);
		private final Group cGroup_3_13_3_2 = (Group)cGroup_3_13_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_13_3_2_0 = (Keyword)cGroup_3_13_3_2.eContents().get(0);
		private final Assignment cConferredTargetsAssignment_3_13_3_2_1 = (Assignment)cGroup_3_13_3_2.eContents().get(1);
		private final RuleCall cConferredTargetsConceptDeclarationParserRuleCall_3_13_3_2_1_0 = (RuleCall)cConferredTargetsAssignment_3_13_3_2_1.eContents().get(0);
		private final Group cGroup_3_14 = (Group)cUnorderedGroup_3.eContents().get(14);
		private final Alternatives cAlternatives_3_14_0 = (Alternatives)cGroup_3_14.eContents().get(0);
		private final Keyword cPartKeyword_3_14_0_0 = (Keyword)cAlternatives_3_14_0.eContents().get(0);
		private final Assignment cConstituentAssignment_3_14_0_1 = (Assignment)cAlternatives_3_14_0.eContents().get(1);
		private final Keyword cConstituentConstituentKeyword_3_14_0_1_0 = (Keyword)cConstituentAssignment_3_14_0_1.eContents().get(0);
		private final Assignment cConstitutesAssignment_3_14_0_2 = (Assignment)cAlternatives_3_14_0.eContents().get(2);
		private final Keyword cConstitutesConsistsKeyword_3_14_0_2_0 = (Keyword)cConstitutesAssignment_3_14_0_2.eContents().get(0);
		private final Assignment cPartOfAssignment_3_14_1 = (Assignment)cGroup_3_14.eContents().get(1);
		private final Keyword cPartOfOfKeyword_3_14_1_0 = (Keyword)cPartOfAssignment_3_14_1.eContents().get(0);
		private final Assignment cWholeAssignment_3_14_2 = (Assignment)cGroup_3_14.eContents().get(2);
		private final RuleCall cWholeConceptDeclarationParserRuleCall_3_14_2_0 = (RuleCall)cWholeAssignment_3_14_2.eContents().get(0);
		private final Group cGroup_3_15 = (Group)cUnorderedGroup_3.eContents().get(15);
		private final Keyword cCreatesKeyword_3_15_0 = (Keyword)cGroup_3_15.eContents().get(0);
		private final Assignment cCreatesAssignment_3_15_1 = (Assignment)cGroup_3_15.eContents().get(1);
		private final RuleCall cCreatesConceptDeclarationParserRuleCall_3_15_1_0 = (RuleCall)cCreatesAssignment_3_15_1.eContents().get(0);
		private final Group cGroup_3_15_2 = (Group)cGroup_3_15.eContents().get(2);
		private final Keyword cCommaKeyword_3_15_2_0 = (Keyword)cGroup_3_15_2.eContents().get(0);
		private final Assignment cCreatesAssignment_3_15_2_1 = (Assignment)cGroup_3_15_2.eContents().get(1);
		private final RuleCall cCreatesConceptDeclarationParserRuleCall_3_15_2_1_0 = (RuleCall)cCreatesAssignment_3_15_2_1.eContents().get(0);
		private final Group cGroup_3_16 = (Group)cUnorderedGroup_3.eContents().get(16);
		private final Keyword cAppliesKeyword_3_16_0 = (Keyword)cGroup_3_16.eContents().get(0);
		private final Keyword cToKeyword_3_16_1 = (Keyword)cGroup_3_16.eContents().get(1);
		private final Assignment cTraitTargetsAssignment_3_16_2 = (Assignment)cGroup_3_16.eContents().get(2);
		private final RuleCall cTraitTargetsApplicableTargetParserRuleCall_3_16_2_0 = (RuleCall)cTraitTargetsAssignment_3_16_2.eContents().get(0);
		private final Group cGroup_3_16_3 = (Group)cGroup_3_16.eContents().get(3);
		private final Keyword cCommaKeyword_3_16_3_0 = (Keyword)cGroup_3_16_3.eContents().get(0);
		private final Assignment cTraitTargetsAssignment_3_16_3_1 = (Assignment)cGroup_3_16_3.eContents().get(1);
		private final RuleCall cTraitTargetsApplicableTargetParserRuleCall_3_16_3_1_0 = (RuleCall)cTraitTargetsAssignment_3_16_3_1.eContents().get(0);
		private final Group cGroup_3_17 = (Group)cUnorderedGroup_3.eContents().get(17);
		private final Keyword cLinksKeyword_3_17_0 = (Keyword)cGroup_3_17.eContents().get(0);
		private final Assignment cDomainsAssignment_3_17_1 = (Assignment)cGroup_3_17.eContents().get(1);
		private final RuleCall cDomainsSimpleConceptDeclarationParserRuleCall_3_17_1_0 = (RuleCall)cDomainsAssignment_3_17_1.eContents().get(0);
		private final Keyword cToKeyword_3_17_2 = (Keyword)cGroup_3_17.eContents().get(2);
		private final Assignment cRangesAssignment_3_17_3 = (Assignment)cGroup_3_17.eContents().get(3);
		private final RuleCall cRangesSimpleConceptDeclarationParserRuleCall_3_17_3_0 = (RuleCall)cRangesAssignment_3_17_3.eContents().get(0);
		private final Group cGroup_3_17_4 = (Group)cGroup_3_17.eContents().get(4);
		private final Keyword cCommaKeyword_3_17_4_0 = (Keyword)cGroup_3_17_4.eContents().get(0);
		private final Assignment cDomainsAssignment_3_17_4_1 = (Assignment)cGroup_3_17_4.eContents().get(1);
		private final RuleCall cDomainsSimpleConceptDeclarationParserRuleCall_3_17_4_1_0 = (RuleCall)cDomainsAssignment_3_17_4_1.eContents().get(0);
		private final Keyword cToKeyword_3_17_4_2 = (Keyword)cGroup_3_17_4.eContents().get(2);
		private final Assignment cRangesAssignment_3_17_4_3 = (Assignment)cGroup_3_17_4.eContents().get(3);
		private final RuleCall cRangesSimpleConceptDeclarationParserRuleCall_3_17_4_3_0 = (RuleCall)cRangesAssignment_3_17_4_3.eContents().get(0);
		private final Group cGroup_3_18 = (Group)cUnorderedGroup_3.eContents().get(18);
		private final Keyword cInverseKeyword_3_18_0 = (Keyword)cGroup_3_18.eContents().get(0);
		private final Keyword cOfKeyword_3_18_1 = (Keyword)cGroup_3_18.eContents().get(1);
		private final Assignment cInverseAssignment_3_18_2 = (Assignment)cGroup_3_18.eContents().get(2);
		private final RuleCall cInverseConceptDeclarationParserRuleCall_3_18_2_0 = (RuleCall)cInverseAssignment_3_18_2.eContents().get(0);
		private final Group cGroup_3_19 = (Group)cUnorderedGroup_3.eContents().get(19);
		private final Keyword cAffectsKeyword_3_19_0 = (Keyword)cGroup_3_19.eContents().get(0);
		private final Assignment cQualitiesAffectedAssignment_3_19_1 = (Assignment)cGroup_3_19.eContents().get(1);
		private final RuleCall cQualitiesAffectedConceptDeclarationParserRuleCall_3_19_1_0 = (RuleCall)cQualitiesAffectedAssignment_3_19_1.eContents().get(0);
		private final Group cGroup_3_19_2 = (Group)cGroup_3_19.eContents().get(2);
		private final Keyword cCommaKeyword_3_19_2_0 = (Keyword)cGroup_3_19_2.eContents().get(0);
		private final Assignment cQualitiesAffectedAssignment_3_19_2_1 = (Assignment)cGroup_3_19_2.eContents().get(1);
		private final RuleCall cQualitiesAffectedConceptDeclarationParserRuleCall_3_19_2_1_0 = (RuleCall)cQualitiesAffectedAssignment_3_19_2_1.eContents().get(0);
		private final Group cGroup_3_20 = (Group)cUnorderedGroup_3.eContents().get(20);
		private final Keyword cHasKeyword_3_20_0 = (Keyword)cGroup_3_20.eContents().get(0);
		private final Assignment cDisjointAssignment_3_20_1 = (Assignment)cGroup_3_20.eContents().get(1);
		private final Keyword cDisjointDisjointKeyword_3_20_1_0 = (Keyword)cDisjointAssignment_3_20_1.eContents().get(0);
		private final Keyword cChildrenKeyword_3_20_2 = (Keyword)cGroup_3_20.eContents().get(2);
		private final Assignment cChildrenAssignment_3_20_3 = (Assignment)cGroup_3_20.eContents().get(3);
		private final RuleCall cChildrenChildConceptParserRuleCall_3_20_3_0 = (RuleCall)cChildrenAssignment_3_20_3.eContents().get(0);
		private final Group cGroup_3_20_4 = (Group)cGroup_3_20.eContents().get(4);
		private final Keyword cCommaKeyword_3_20_4_0 = (Keyword)cGroup_3_20_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_20_4_1 = (Assignment)cGroup_3_20_4.eContents().get(1);
		private final RuleCall cChildrenChildConceptParserRuleCall_3_20_4_1_0 = (RuleCall)cChildrenAssignment_3_20_4_1.eContents().get(0);
		private final Assignment cRestrictionsAssignment_3_21 = (Assignment)cUnorderedGroup_3.eContents().get(21);
		private final RuleCall cRestrictionsRestrictionStatementParserRuleCall_3_21_0 = (RuleCall)cRestrictionsAssignment_3_21.eContents().get(0);
		private final Group cGroup_3_22 = (Group)cUnorderedGroup_3.eContents().get(22);
		private final Keyword cWithKeyword_3_22_0 = (Keyword)cGroup_3_22.eContents().get(0);
		private final Keyword cMetadataKeyword_3_22_1 = (Keyword)cGroup_3_22.eContents().get(1);
		private final Assignment cMetadataAssignment_3_22_2 = (Assignment)cGroup_3_22.eContents().get(2);
		private final RuleCall cMetadataMetadataParserRuleCall_3_22_2_0 = (RuleCall)cMetadataAssignment_3_22_2.eContents().get(0);
		
		///*
		// * ------------------------------------------------------------------------------------------
		// * Ontology language - basically a more intuitive and imperative OW2L/Manchester syntax. Does not
		// * cover all of OWL2 yet, but should be plenty for modeling. 
		// * 
		// * deniable is for traits only. If a trait is deniable, 'not Trait' is a trait (of not being Trait).
		// * if not deniable, 'not Trait' means being any of the other concrete traits; if there is only one 
		// * concrete trait it's an error. If there are two, it means being the other.
		// * ------------------------------------------------------------------------------------------
		// */
		//ConceptStatementBody:
		//	annotations+=Annotation* abstract?='abstract'? (root?='root' | name=CAMELCASE_ID ('identified' 'as'
		//	(stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))?)
		//	(docstring=STRING? & (('is' coreConcept?='core'? | alias?='equals') (nothing?='nothing' | parents+=ConceptDeclaration
		//	(connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? & ('exposes'
		//	contextualizedTraits+=ObservableSemantics (',' contextualizedTraits+=ObservableSemantics)* | specific?='exposing'
		//	contextualizesTraits+=ConceptDeclaration (',' contextualizesTraits+=ConceptDeclaration)*)? & ('defines' ('authority'
		//	definedAuthority=UPPERCASE_PATH | upperConcept=Concept))? & ('requires' requirements+=IdentityRequirement (','
		//	requirements+=IdentityRequirement)*)? & ('describes' describedQuality=ConceptDeclaration)? & ('increases' 'with'
		//	describedProportionality=ConceptDeclaration)? & ('decreases' 'with'
		//	describedInverseProportionalityQuality=ConceptDeclaration)? & ('marks' describedNonzeroQuality=ConceptDeclaration)? &
		//	('classifies' classifiesQuality=ConceptDeclaration)? & ('discretizes' discretizesQuality=ConceptDeclaration)? &
		//	('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? & ('has'
		//	'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)* ('for' targetObservables+=ConceptDeclaration (','
		//	targetObservables+=ConceptDeclaration)*)? ('in' restrictedObservables+=ConceptDeclaration (','
		//	restrictedObservables+=ConceptDeclaration)*))? & ('confers' conferredTraits+=ConceptDeclaration (','
		//	conferredTraits+=ConceptDeclaration)* ('to' conferredTargets+=ConceptDeclaration (','
		//	conferredTargets+=ConceptDeclaration)*)?)? & (('part' | constituent?='constituent' | constitutes?='consists')
		//	partOf?='of' whole=ConceptDeclaration)? & ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)?
		//	& ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? & ('links'
		//	domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration (',' domains+=SimpleConceptDeclaration =>
		//	'to' ranges+=SimpleConceptDeclaration)*)? & ('inverse' 'of' inverse=ConceptDeclaration)? & ('affects'
		//	qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? & ('has' disjoint?='disjoint'?
		//	'children' children+=ChildConcept (',' children+=ChildConcept)*)? & restrictions+=RestrictionStatement* & ('with'
		//	'metadata' metadata=Metadata)?);
		@Override public ParserRule getRule() { return rule; }
		
		//// FIXME shouldn't have to repeat these two. Mostly to keep the underlying ECore neat at the children.
		//
		//annotations+=Annotation* abstract?='abstract'? (root?='root' | name=CAMELCASE_ID ('identified' 'as'
		//(stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))?)
		//(docstring=STRING? & (('is' coreConcept?='core'? | alias?='equals') (nothing?='nothing' | parents+=ConceptDeclaration
		//(connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? & ('exposes'
		//contextualizedTraits+=ObservableSemantics (',' contextualizedTraits+=ObservableSemantics)* | specific?='exposing'
		//contextualizesTraits+=ConceptDeclaration (',' contextualizesTraits+=ConceptDeclaration)*)? & ('defines' ('authority'
		//definedAuthority=UPPERCASE_PATH | upperConcept=Concept))? & ('requires' requirements+=IdentityRequirement (','
		//requirements+=IdentityRequirement)*)? & ('describes' describedQuality=ConceptDeclaration)? & ('increases' 'with'
		//describedProportionality=ConceptDeclaration)? & ('decreases' 'with'
		//describedInverseProportionalityQuality=ConceptDeclaration)? & ('marks' describedNonzeroQuality=ConceptDeclaration)? &
		//('classifies' classifiesQuality=ConceptDeclaration)? & ('discretizes' discretizesQuality=ConceptDeclaration)? &
		//('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? & ('has'
		//'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)* ('for' targetObservables+=ConceptDeclaration (','
		//targetObservables+=ConceptDeclaration)*)? ('in' restrictedObservables+=ConceptDeclaration (','
		//restrictedObservables+=ConceptDeclaration)*))? & ('confers' conferredTraits+=ConceptDeclaration (','
		//conferredTraits+=ConceptDeclaration)* ('to' conferredTargets+=ConceptDeclaration (','
		//conferredTargets+=ConceptDeclaration)*)?)? & (('part' | constituent?='constituent' | constitutes?='consists')
		//partOf?='of' whole=ConceptDeclaration)? & ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)?
		//& ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? & ('links'
		//domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration (',' domains+=SimpleConceptDeclaration =>
		//'to' ranges+=SimpleConceptDeclaration)*)? & ('inverse' 'of' inverse=ConceptDeclaration)? & ('affects'
		//qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? & ('has' disjoint?='disjoint'?
		//'children' children+=ChildConcept (',' children+=ChildConcept)*)? & restrictions+=RestrictionStatement* & ('with'
		//'metadata' metadata=Metadata)?)
		public Group getGroup() { return cGroup; }
		
		//// FIXME shouldn't have to repeat these two. Mostly to keep the underlying ECore neat at the children.
		//
		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//root?='root' | name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by'
		//authority=(UPPERCASE_ID | UPPERCASE_PATH))?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//root?='root'
		public Assignment getRootAssignment_2_0() { return cRootAssignment_2_0; }
		
		//'root'
		public Keyword getRootRootKeyword_2_0_0() { return cRootRootKeyword_2_0_0; }
		
		//name=CAMELCASE_ID ('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID |
		//UPPERCASE_PATH))?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=CAMELCASE_ID
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//CAMELCASE_ID
		public RuleCall getNameCAMELCASE_IDTerminalRuleCall_2_1_0_0() { return cNameCAMELCASE_IDTerminalRuleCall_2_1_0_0; }
		
		//('identified' 'as' (stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'identified'
		public Keyword getIdentifiedKeyword_2_1_1_0() { return cIdentifiedKeyword_2_1_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2_1_1_1() { return cAsKeyword_2_1_1_1; }
		
		//stringIdentifier=(ID | STRING) | intIdentifier=INT
		public Alternatives getAlternatives_2_1_1_2() { return cAlternatives_2_1_1_2; }
		
		//stringIdentifier=(ID | STRING)
		public Assignment getStringIdentifierAssignment_2_1_1_2_0() { return cStringIdentifierAssignment_2_1_1_2_0; }
		
		//(ID | STRING)
		public Alternatives getStringIdentifierAlternatives_2_1_1_2_0_0() { return cStringIdentifierAlternatives_2_1_1_2_0_0; }
		
		//ID
		public RuleCall getStringIdentifierIDTerminalRuleCall_2_1_1_2_0_0_0() { return cStringIdentifierIDTerminalRuleCall_2_1_1_2_0_0_0; }
		
		//STRING
		public RuleCall getStringIdentifierSTRINGTerminalRuleCall_2_1_1_2_0_0_1() { return cStringIdentifierSTRINGTerminalRuleCall_2_1_1_2_0_0_1; }
		
		//intIdentifier=INT
		public Assignment getIntIdentifierAssignment_2_1_1_2_1() { return cIntIdentifierAssignment_2_1_1_2_1; }
		
		//INT
		public RuleCall getIntIdentifierINTTerminalRuleCall_2_1_1_2_1_0() { return cIntIdentifierINTTerminalRuleCall_2_1_1_2_1_0; }
		
		//'by'
		public Keyword getByKeyword_2_1_1_3() { return cByKeyword_2_1_1_3; }
		
		//authority=(UPPERCASE_ID | UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_2_1_1_4() { return cAuthorityAssignment_2_1_1_4; }
		
		//(UPPERCASE_ID | UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_2_1_1_4_0() { return cAuthorityAlternatives_2_1_1_4_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_2_1_1_4_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_2_1_1_4_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_2_1_1_4_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_2_1_1_4_0_1; }
		
		//docstring=STRING? & (('is' coreConcept?='core'? | alias?='equals') (nothing?='nothing' | parents+=ConceptDeclaration
		//(connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? & ('exposes'
		//contextualizedTraits+=ObservableSemantics (',' contextualizedTraits+=ObservableSemantics)* | specific?='exposing'
		//contextualizesTraits+=ConceptDeclaration (',' contextualizesTraits+=ConceptDeclaration)*)? & ('defines' ('authority'
		//definedAuthority=UPPERCASE_PATH | upperConcept=Concept))? & ('requires' requirements+=IdentityRequirement (','
		//requirements+=IdentityRequirement)*)? & ('describes' describedQuality=ConceptDeclaration)? & ('increases' 'with'
		//describedProportionality=ConceptDeclaration)? & ('decreases' 'with'
		//describedInverseProportionalityQuality=ConceptDeclaration)? & ('marks' describedNonzeroQuality=ConceptDeclaration)? &
		//('classifies' classifiesQuality=ConceptDeclaration)? & ('discretizes' discretizesQuality=ConceptDeclaration)? &
		//('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? & ('has'
		//'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)* ('for' targetObservables+=ConceptDeclaration (','
		//targetObservables+=ConceptDeclaration)*)? ('in' restrictedObservables+=ConceptDeclaration (','
		//restrictedObservables+=ConceptDeclaration)*))? & ('confers' conferredTraits+=ConceptDeclaration (','
		//conferredTraits+=ConceptDeclaration)* ('to' conferredTargets+=ConceptDeclaration (','
		//conferredTargets+=ConceptDeclaration)*)?)? & (('part' | constituent?='constituent' | constitutes?='consists')
		//partOf?='of' whole=ConceptDeclaration)? & ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)?
		//& ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? & ('links'
		//domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration (',' domains+=SimpleConceptDeclaration =>
		//'to' ranges+=SimpleConceptDeclaration)*)? & ('inverse' 'of' inverse=ConceptDeclaration)? & ('affects'
		//qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? & ('has' disjoint?='disjoint'?
		//'children' children+=ChildConcept (',' children+=ChildConcept)*)? & restrictions+=RestrictionStatement* & ('with'
		//'metadata' metadata=Metadata)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//docstring=STRING?
		public Assignment getDocstringAssignment_3_0() { return cDocstringAssignment_3_0; }
		
		//STRING
		public RuleCall getDocstringSTRINGTerminalRuleCall_3_0_0() { return cDocstringSTRINGTerminalRuleCall_3_0_0; }
		
		//(('is' coreConcept?='core'? | alias?='equals') (nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' |
		//'or' | 'and') parents+=ConceptDeclaration)*))?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'is' coreConcept?='core'? | alias?='equals'
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }
		
		//'is' coreConcept?='core'?
		public Group getGroup_3_1_0_0() { return cGroup_3_1_0_0; }
		
		//'is'
		public Keyword getIsKeyword_3_1_0_0_0() { return cIsKeyword_3_1_0_0_0; }
		
		//coreConcept?='core'?
		public Assignment getCoreConceptAssignment_3_1_0_0_1() { return cCoreConceptAssignment_3_1_0_0_1; }
		
		//'core'
		public Keyword getCoreConceptCoreKeyword_3_1_0_0_1_0() { return cCoreConceptCoreKeyword_3_1_0_0_1_0; }
		
		//alias?='equals'
		public Assignment getAliasAssignment_3_1_0_1() { return cAliasAssignment_3_1_0_1; }
		
		//'equals'
		public Keyword getAliasEqualsKeyword_3_1_0_1_0() { return cAliasEqualsKeyword_3_1_0_1_0; }
		
		//nothing?='nothing' | parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//nothing?='nothing'
		public Assignment getNothingAssignment_3_1_1_0() { return cNothingAssignment_3_1_1_0; }
		
		//'nothing'
		public Keyword getNothingNothingKeyword_3_1_1_0_0() { return cNothingNothingKeyword_3_1_1_0_0; }
		
		//parents+=ConceptDeclaration (connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }
		
		//parents+=ConceptDeclaration
		public Assignment getParentsAssignment_3_1_1_1_0() { return cParentsAssignment_3_1_1_1_0; }
		
		//ConceptDeclaration
		public RuleCall getParentsConceptDeclarationParserRuleCall_3_1_1_1_0_0() { return cParentsConceptDeclarationParserRuleCall_3_1_1_1_0_0; }
		
		//(connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*
		public Group getGroup_3_1_1_1_1() { return cGroup_3_1_1_1_1; }
		
		//connectors+=(',' | 'or' | 'and')
		public Assignment getConnectorsAssignment_3_1_1_1_1_0() { return cConnectorsAssignment_3_1_1_1_1_0; }
		
		//(',' | 'or' | 'and')
		public Alternatives getConnectorsAlternatives_3_1_1_1_1_0_0() { return cConnectorsAlternatives_3_1_1_1_1_0_0; }
		
		//','
		public Keyword getConnectorsCommaKeyword_3_1_1_1_1_0_0_0() { return cConnectorsCommaKeyword_3_1_1_1_1_0_0_0; }
		
		//'or'
		public Keyword getConnectorsOrKeyword_3_1_1_1_1_0_0_1() { return cConnectorsOrKeyword_3_1_1_1_1_0_0_1; }
		
		//'and'
		public Keyword getConnectorsAndKeyword_3_1_1_1_1_0_0_2() { return cConnectorsAndKeyword_3_1_1_1_1_0_0_2; }
		
		//parents+=ConceptDeclaration
		public Assignment getParentsAssignment_3_1_1_1_1_1() { return cParentsAssignment_3_1_1_1_1_1; }
		
		//ConceptDeclaration
		public RuleCall getParentsConceptDeclarationParserRuleCall_3_1_1_1_1_1_0() { return cParentsConceptDeclarationParserRuleCall_3_1_1_1_1_1_0; }
		
		//('exposes' contextualizedTraits+=ObservableSemantics (',' contextualizedTraits+=ObservableSemantics)* |
		//specific?='exposing' contextualizesTraits+=ConceptDeclaration (',' contextualizesTraits+=ConceptDeclaration)*)?
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//'exposes' contextualizedTraits+=ObservableSemantics (',' contextualizedTraits+=ObservableSemantics)*
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }
		
		//'exposes'
		public Keyword getExposesKeyword_3_2_0_0() { return cExposesKeyword_3_2_0_0; }
		
		//contextualizedTraits+=ObservableSemantics
		public Assignment getContextualizedTraitsAssignment_3_2_0_1() { return cContextualizedTraitsAssignment_3_2_0_1; }
		
		//ObservableSemantics
		public RuleCall getContextualizedTraitsObservableSemanticsParserRuleCall_3_2_0_1_0() { return cContextualizedTraitsObservableSemanticsParserRuleCall_3_2_0_1_0; }
		
		//(',' contextualizedTraits+=ObservableSemantics)*
		public Group getGroup_3_2_0_2() { return cGroup_3_2_0_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0_2_0() { return cCommaKeyword_3_2_0_2_0; }
		
		//contextualizedTraits+=ObservableSemantics
		public Assignment getContextualizedTraitsAssignment_3_2_0_2_1() { return cContextualizedTraitsAssignment_3_2_0_2_1; }
		
		//ObservableSemantics
		public RuleCall getContextualizedTraitsObservableSemanticsParserRuleCall_3_2_0_2_1_0() { return cContextualizedTraitsObservableSemanticsParserRuleCall_3_2_0_2_1_0; }
		
		//specific?='exposing' contextualizesTraits+=ConceptDeclaration (',' contextualizesTraits+=ConceptDeclaration)*
		public Group getGroup_3_2_1() { return cGroup_3_2_1; }
		
		//specific?='exposing'
		public Assignment getSpecificAssignment_3_2_1_0() { return cSpecificAssignment_3_2_1_0; }
		
		//'exposing'
		public Keyword getSpecificExposingKeyword_3_2_1_0_0() { return cSpecificExposingKeyword_3_2_1_0_0; }
		
		//contextualizesTraits+=ConceptDeclaration
		public Assignment getContextualizesTraitsAssignment_3_2_1_1() { return cContextualizesTraitsAssignment_3_2_1_1; }
		
		//ConceptDeclaration
		public RuleCall getContextualizesTraitsConceptDeclarationParserRuleCall_3_2_1_1_0() { return cContextualizesTraitsConceptDeclarationParserRuleCall_3_2_1_1_0; }
		
		//(',' contextualizesTraits+=ConceptDeclaration)*
		public Group getGroup_3_2_1_2() { return cGroup_3_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_1_2_0() { return cCommaKeyword_3_2_1_2_0; }
		
		//contextualizesTraits+=ConceptDeclaration
		public Assignment getContextualizesTraitsAssignment_3_2_1_2_1() { return cContextualizesTraitsAssignment_3_2_1_2_1; }
		
		//ConceptDeclaration
		public RuleCall getContextualizesTraitsConceptDeclarationParserRuleCall_3_2_1_2_1_0() { return cContextualizesTraitsConceptDeclarationParserRuleCall_3_2_1_2_1_0; }
		
		//('defines' ('authority' definedAuthority=UPPERCASE_PATH | upperConcept=Concept))?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'defines'
		public Keyword getDefinesKeyword_3_3_0() { return cDefinesKeyword_3_3_0; }
		
		//'authority' definedAuthority=UPPERCASE_PATH | upperConcept=Concept
		public Alternatives getAlternatives_3_3_1() { return cAlternatives_3_3_1; }
		
		//'authority' definedAuthority=UPPERCASE_PATH
		public Group getGroup_3_3_1_0() { return cGroup_3_3_1_0; }
		
		//'authority'
		public Keyword getAuthorityKeyword_3_3_1_0_0() { return cAuthorityKeyword_3_3_1_0_0; }
		
		//definedAuthority=UPPERCASE_PATH
		public Assignment getDefinedAuthorityAssignment_3_3_1_0_1() { return cDefinedAuthorityAssignment_3_3_1_0_1; }
		
		//UPPERCASE_PATH
		public RuleCall getDefinedAuthorityUPPERCASE_PATHTerminalRuleCall_3_3_1_0_1_0() { return cDefinedAuthorityUPPERCASE_PATHTerminalRuleCall_3_3_1_0_1_0; }
		
		//upperConcept=Concept
		public Assignment getUpperConceptAssignment_3_3_1_1() { return cUpperConceptAssignment_3_3_1_1; }
		
		//Concept
		public RuleCall getUpperConceptConceptParserRuleCall_3_3_1_1_0() { return cUpperConceptConceptParserRuleCall_3_3_1_1_0; }
		
		//('requires' requirements+=IdentityRequirement (',' requirements+=IdentityRequirement)*)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'requires'
		public Keyword getRequiresKeyword_3_4_0() { return cRequiresKeyword_3_4_0; }
		
		//requirements+=IdentityRequirement
		public Assignment getRequirementsAssignment_3_4_1() { return cRequirementsAssignment_3_4_1; }
		
		//IdentityRequirement
		public RuleCall getRequirementsIdentityRequirementParserRuleCall_3_4_1_0() { return cRequirementsIdentityRequirementParserRuleCall_3_4_1_0; }
		
		//(',' requirements+=IdentityRequirement)*
		public Group getGroup_3_4_2() { return cGroup_3_4_2; }
		
		//','
		public Keyword getCommaKeyword_3_4_2_0() { return cCommaKeyword_3_4_2_0; }
		
		//requirements+=IdentityRequirement
		public Assignment getRequirementsAssignment_3_4_2_1() { return cRequirementsAssignment_3_4_2_1; }
		
		//IdentityRequirement
		public RuleCall getRequirementsIdentityRequirementParserRuleCall_3_4_2_1_0() { return cRequirementsIdentityRequirementParserRuleCall_3_4_2_1_0; }
		
		//('describes' describedQuality=ConceptDeclaration)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'describes'
		public Keyword getDescribesKeyword_3_5_0() { return cDescribesKeyword_3_5_0; }
		
		//describedQuality=ConceptDeclaration
		public Assignment getDescribedQualityAssignment_3_5_1() { return cDescribedQualityAssignment_3_5_1; }
		
		//ConceptDeclaration
		public RuleCall getDescribedQualityConceptDeclarationParserRuleCall_3_5_1_0() { return cDescribedQualityConceptDeclarationParserRuleCall_3_5_1_0; }
		
		//('increases' 'with' describedProportionality=ConceptDeclaration)?
		public Group getGroup_3_6() { return cGroup_3_6; }
		
		//'increases'
		public Keyword getIncreasesKeyword_3_6_0() { return cIncreasesKeyword_3_6_0; }
		
		//'with'
		public Keyword getWithKeyword_3_6_1() { return cWithKeyword_3_6_1; }
		
		//describedProportionality=ConceptDeclaration
		public Assignment getDescribedProportionalityAssignment_3_6_2() { return cDescribedProportionalityAssignment_3_6_2; }
		
		//ConceptDeclaration
		public RuleCall getDescribedProportionalityConceptDeclarationParserRuleCall_3_6_2_0() { return cDescribedProportionalityConceptDeclarationParserRuleCall_3_6_2_0; }
		
		//('decreases' 'with' describedInverseProportionalityQuality=ConceptDeclaration)?
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//'decreases'
		public Keyword getDecreasesKeyword_3_7_0() { return cDecreasesKeyword_3_7_0; }
		
		//'with'
		public Keyword getWithKeyword_3_7_1() { return cWithKeyword_3_7_1; }
		
		//describedInverseProportionalityQuality=ConceptDeclaration
		public Assignment getDescribedInverseProportionalityQualityAssignment_3_7_2() { return cDescribedInverseProportionalityQualityAssignment_3_7_2; }
		
		//ConceptDeclaration
		public RuleCall getDescribedInverseProportionalityQualityConceptDeclarationParserRuleCall_3_7_2_0() { return cDescribedInverseProportionalityQualityConceptDeclarationParserRuleCall_3_7_2_0; }
		
		//('marks' describedNonzeroQuality=ConceptDeclaration)?
		public Group getGroup_3_8() { return cGroup_3_8; }
		
		//'marks'
		public Keyword getMarksKeyword_3_8_0() { return cMarksKeyword_3_8_0; }
		
		//describedNonzeroQuality=ConceptDeclaration
		public Assignment getDescribedNonzeroQualityAssignment_3_8_1() { return cDescribedNonzeroQualityAssignment_3_8_1; }
		
		//ConceptDeclaration
		public RuleCall getDescribedNonzeroQualityConceptDeclarationParserRuleCall_3_8_1_0() { return cDescribedNonzeroQualityConceptDeclarationParserRuleCall_3_8_1_0; }
		
		//('classifies' classifiesQuality=ConceptDeclaration)?
		public Group getGroup_3_9() { return cGroup_3_9; }
		
		//'classifies'
		public Keyword getClassifiesKeyword_3_9_0() { return cClassifiesKeyword_3_9_0; }
		
		//classifiesQuality=ConceptDeclaration
		public Assignment getClassifiesQualityAssignment_3_9_1() { return cClassifiesQualityAssignment_3_9_1; }
		
		//ConceptDeclaration
		public RuleCall getClassifiesQualityConceptDeclarationParserRuleCall_3_9_1_0() { return cClassifiesQualityConceptDeclarationParserRuleCall_3_9_1_0; }
		
		//('discretizes' discretizesQuality=ConceptDeclaration)?
		public Group getGroup_3_10() { return cGroup_3_10; }
		
		//'discretizes'
		public Keyword getDiscretizesKeyword_3_10_0() { return cDiscretizesKeyword_3_10_0; }
		
		//discretizesQuality=ConceptDeclaration
		public Assignment getDiscretizesQualityAssignment_3_10_1() { return cDiscretizesQualityAssignment_3_10_1; }
		
		//ConceptDeclaration
		public RuleCall getDiscretizesQualityConceptDeclarationParserRuleCall_3_10_1_0() { return cDiscretizesQualityConceptDeclarationParserRuleCall_3_10_1_0; }
		
		//('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)?
		public Group getGroup_3_11() { return cGroup_3_11; }
		
		//'inherits'
		public Keyword getInheritsKeyword_3_11_0() { return cInheritsKeyword_3_11_0; }
		
		//actuallyInheritedTraits+=ConceptDeclaration
		public Assignment getActuallyInheritedTraitsAssignment_3_11_1() { return cActuallyInheritedTraitsAssignment_3_11_1; }
		
		//ConceptDeclaration
		public RuleCall getActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_11_1_0() { return cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_11_1_0; }
		
		//(',' actuallyInheritedTraits+=ConceptDeclaration)*
		public Group getGroup_3_11_2() { return cGroup_3_11_2; }
		
		//','
		public Keyword getCommaKeyword_3_11_2_0() { return cCommaKeyword_3_11_2_0; }
		
		//actuallyInheritedTraits+=ConceptDeclaration
		public Assignment getActuallyInheritedTraitsAssignment_3_11_2_1() { return cActuallyInheritedTraitsAssignment_3_11_2_1; }
		
		//ConceptDeclaration
		public RuleCall getActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_11_2_1_0() { return cActuallyInheritedTraitsConceptDeclarationParserRuleCall_3_11_2_1_0; }
		
		//('has' 'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)* ('for' targetObservables+=ConceptDeclaration
		//(',' targetObservables+=ConceptDeclaration)*)? ('in' restrictedObservables+=ConceptDeclaration (','
		//restrictedObservables+=ConceptDeclaration)*))?
		public Group getGroup_3_12() { return cGroup_3_12; }
		
		//'has'
		public Keyword getHasKeyword_3_12_0() { return cHasKeyword_3_12_0; }
		
		//'role'
		public Keyword getRoleKeyword_3_12_1() { return cRoleKeyword_3_12_1; }
		
		//roles+=ConceptDeclaration
		public Assignment getRolesAssignment_3_12_2() { return cRolesAssignment_3_12_2; }
		
		//ConceptDeclaration
		public RuleCall getRolesConceptDeclarationParserRuleCall_3_12_2_0() { return cRolesConceptDeclarationParserRuleCall_3_12_2_0; }
		
		//(',' roles+=ConceptDeclaration)*
		public Group getGroup_3_12_3() { return cGroup_3_12_3; }
		
		//','
		public Keyword getCommaKeyword_3_12_3_0() { return cCommaKeyword_3_12_3_0; }
		
		//roles+=ConceptDeclaration
		public Assignment getRolesAssignment_3_12_3_1() { return cRolesAssignment_3_12_3_1; }
		
		//ConceptDeclaration
		public RuleCall getRolesConceptDeclarationParserRuleCall_3_12_3_1_0() { return cRolesConceptDeclarationParserRuleCall_3_12_3_1_0; }
		
		//('for' targetObservables+=ConceptDeclaration (',' targetObservables+=ConceptDeclaration)*)?
		public Group getGroup_3_12_4() { return cGroup_3_12_4; }
		
		//'for'
		public Keyword getForKeyword_3_12_4_0() { return cForKeyword_3_12_4_0; }
		
		//targetObservables+=ConceptDeclaration
		public Assignment getTargetObservablesAssignment_3_12_4_1() { return cTargetObservablesAssignment_3_12_4_1; }
		
		//ConceptDeclaration
		public RuleCall getTargetObservablesConceptDeclarationParserRuleCall_3_12_4_1_0() { return cTargetObservablesConceptDeclarationParserRuleCall_3_12_4_1_0; }
		
		//(',' targetObservables+=ConceptDeclaration)*
		public Group getGroup_3_12_4_2() { return cGroup_3_12_4_2; }
		
		//','
		public Keyword getCommaKeyword_3_12_4_2_0() { return cCommaKeyword_3_12_4_2_0; }
		
		//targetObservables+=ConceptDeclaration
		public Assignment getTargetObservablesAssignment_3_12_4_2_1() { return cTargetObservablesAssignment_3_12_4_2_1; }
		
		//ConceptDeclaration
		public RuleCall getTargetObservablesConceptDeclarationParserRuleCall_3_12_4_2_1_0() { return cTargetObservablesConceptDeclarationParserRuleCall_3_12_4_2_1_0; }
		
		//'in' restrictedObservables+=ConceptDeclaration (',' restrictedObservables+=ConceptDeclaration)*
		public Group getGroup_3_12_5() { return cGroup_3_12_5; }
		
		//'in'
		public Keyword getInKeyword_3_12_5_0() { return cInKeyword_3_12_5_0; }
		
		//restrictedObservables+=ConceptDeclaration
		public Assignment getRestrictedObservablesAssignment_3_12_5_1() { return cRestrictedObservablesAssignment_3_12_5_1; }
		
		//ConceptDeclaration
		public RuleCall getRestrictedObservablesConceptDeclarationParserRuleCall_3_12_5_1_0() { return cRestrictedObservablesConceptDeclarationParserRuleCall_3_12_5_1_0; }
		
		//(',' restrictedObservables+=ConceptDeclaration)*
		public Group getGroup_3_12_5_2() { return cGroup_3_12_5_2; }
		
		//','
		public Keyword getCommaKeyword_3_12_5_2_0() { return cCommaKeyword_3_12_5_2_0; }
		
		//restrictedObservables+=ConceptDeclaration
		public Assignment getRestrictedObservablesAssignment_3_12_5_2_1() { return cRestrictedObservablesAssignment_3_12_5_2_1; }
		
		//ConceptDeclaration
		public RuleCall getRestrictedObservablesConceptDeclarationParserRuleCall_3_12_5_2_1_0() { return cRestrictedObservablesConceptDeclarationParserRuleCall_3_12_5_2_1_0; }
		
		//('confers' conferredTraits+=ConceptDeclaration (',' conferredTraits+=ConceptDeclaration)* ('to'
		//conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?)?
		public Group getGroup_3_13() { return cGroup_3_13; }
		
		//'confers'
		public Keyword getConfersKeyword_3_13_0() { return cConfersKeyword_3_13_0; }
		
		//conferredTraits+=ConceptDeclaration
		public Assignment getConferredTraitsAssignment_3_13_1() { return cConferredTraitsAssignment_3_13_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTraitsConceptDeclarationParserRuleCall_3_13_1_0() { return cConferredTraitsConceptDeclarationParserRuleCall_3_13_1_0; }
		
		//(',' conferredTraits+=ConceptDeclaration)*
		public Group getGroup_3_13_2() { return cGroup_3_13_2; }
		
		//','
		public Keyword getCommaKeyword_3_13_2_0() { return cCommaKeyword_3_13_2_0; }
		
		//conferredTraits+=ConceptDeclaration
		public Assignment getConferredTraitsAssignment_3_13_2_1() { return cConferredTraitsAssignment_3_13_2_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTraitsConceptDeclarationParserRuleCall_3_13_2_1_0() { return cConferredTraitsConceptDeclarationParserRuleCall_3_13_2_1_0; }
		
		//('to' conferredTargets+=ConceptDeclaration (',' conferredTargets+=ConceptDeclaration)*)?
		public Group getGroup_3_13_3() { return cGroup_3_13_3; }
		
		//'to'
		public Keyword getToKeyword_3_13_3_0() { return cToKeyword_3_13_3_0; }
		
		//conferredTargets+=ConceptDeclaration
		public Assignment getConferredTargetsAssignment_3_13_3_1() { return cConferredTargetsAssignment_3_13_3_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTargetsConceptDeclarationParserRuleCall_3_13_3_1_0() { return cConferredTargetsConceptDeclarationParserRuleCall_3_13_3_1_0; }
		
		//(',' conferredTargets+=ConceptDeclaration)*
		public Group getGroup_3_13_3_2() { return cGroup_3_13_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_13_3_2_0() { return cCommaKeyword_3_13_3_2_0; }
		
		//conferredTargets+=ConceptDeclaration
		public Assignment getConferredTargetsAssignment_3_13_3_2_1() { return cConferredTargetsAssignment_3_13_3_2_1; }
		
		//ConceptDeclaration
		public RuleCall getConferredTargetsConceptDeclarationParserRuleCall_3_13_3_2_1_0() { return cConferredTargetsConceptDeclarationParserRuleCall_3_13_3_2_1_0; }
		
		//(('part' | constituent?='constituent' | constitutes?='consists') partOf?='of' whole=ConceptDeclaration)?
		public Group getGroup_3_14() { return cGroup_3_14; }
		
		//'part' | constituent?='constituent' | constitutes?='consists'
		public Alternatives getAlternatives_3_14_0() { return cAlternatives_3_14_0; }
		
		//'part'
		public Keyword getPartKeyword_3_14_0_0() { return cPartKeyword_3_14_0_0; }
		
		//constituent?='constituent'
		public Assignment getConstituentAssignment_3_14_0_1() { return cConstituentAssignment_3_14_0_1; }
		
		//'constituent'
		public Keyword getConstituentConstituentKeyword_3_14_0_1_0() { return cConstituentConstituentKeyword_3_14_0_1_0; }
		
		//constitutes?='consists'
		public Assignment getConstitutesAssignment_3_14_0_2() { return cConstitutesAssignment_3_14_0_2; }
		
		//'consists'
		public Keyword getConstitutesConsistsKeyword_3_14_0_2_0() { return cConstitutesConsistsKeyword_3_14_0_2_0; }
		
		//partOf?='of'
		public Assignment getPartOfAssignment_3_14_1() { return cPartOfAssignment_3_14_1; }
		
		//'of'
		public Keyword getPartOfOfKeyword_3_14_1_0() { return cPartOfOfKeyword_3_14_1_0; }
		
		//whole=ConceptDeclaration
		public Assignment getWholeAssignment_3_14_2() { return cWholeAssignment_3_14_2; }
		
		//ConceptDeclaration
		public RuleCall getWholeConceptDeclarationParserRuleCall_3_14_2_0() { return cWholeConceptDeclarationParserRuleCall_3_14_2_0; }
		
		//('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)?
		public Group getGroup_3_15() { return cGroup_3_15; }
		
		//'creates'
		public Keyword getCreatesKeyword_3_15_0() { return cCreatesKeyword_3_15_0; }
		
		//creates+=ConceptDeclaration
		public Assignment getCreatesAssignment_3_15_1() { return cCreatesAssignment_3_15_1; }
		
		//ConceptDeclaration
		public RuleCall getCreatesConceptDeclarationParserRuleCall_3_15_1_0() { return cCreatesConceptDeclarationParserRuleCall_3_15_1_0; }
		
		//(',' creates+=ConceptDeclaration)*
		public Group getGroup_3_15_2() { return cGroup_3_15_2; }
		
		//','
		public Keyword getCommaKeyword_3_15_2_0() { return cCommaKeyword_3_15_2_0; }
		
		//creates+=ConceptDeclaration
		public Assignment getCreatesAssignment_3_15_2_1() { return cCreatesAssignment_3_15_2_1; }
		
		//ConceptDeclaration
		public RuleCall getCreatesConceptDeclarationParserRuleCall_3_15_2_1_0() { return cCreatesConceptDeclarationParserRuleCall_3_15_2_1_0; }
		
		//('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)?
		public Group getGroup_3_16() { return cGroup_3_16; }
		
		//'applies'
		public Keyword getAppliesKeyword_3_16_0() { return cAppliesKeyword_3_16_0; }
		
		//'to'
		public Keyword getToKeyword_3_16_1() { return cToKeyword_3_16_1; }
		
		//traitTargets+=ApplicableTarget
		public Assignment getTraitTargetsAssignment_3_16_2() { return cTraitTargetsAssignment_3_16_2; }
		
		//ApplicableTarget
		public RuleCall getTraitTargetsApplicableTargetParserRuleCall_3_16_2_0() { return cTraitTargetsApplicableTargetParserRuleCall_3_16_2_0; }
		
		//(',' traitTargets+=ApplicableTarget)*
		public Group getGroup_3_16_3() { return cGroup_3_16_3; }
		
		//','
		public Keyword getCommaKeyword_3_16_3_0() { return cCommaKeyword_3_16_3_0; }
		
		//traitTargets+=ApplicableTarget
		public Assignment getTraitTargetsAssignment_3_16_3_1() { return cTraitTargetsAssignment_3_16_3_1; }
		
		//ApplicableTarget
		public RuleCall getTraitTargetsApplicableTargetParserRuleCall_3_16_3_1_0() { return cTraitTargetsApplicableTargetParserRuleCall_3_16_3_1_0; }
		
		//('links' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration (','
		//domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*)?
		public Group getGroup_3_17() { return cGroup_3_17; }
		
		//'links'
		public Keyword getLinksKeyword_3_17_0() { return cLinksKeyword_3_17_0; }
		
		//domains+=SimpleConceptDeclaration
		public Assignment getDomainsAssignment_3_17_1() { return cDomainsAssignment_3_17_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getDomainsSimpleConceptDeclarationParserRuleCall_3_17_1_0() { return cDomainsSimpleConceptDeclarationParserRuleCall_3_17_1_0; }
		
		//=> 'to'
		public Keyword getToKeyword_3_17_2() { return cToKeyword_3_17_2; }
		
		//ranges+=SimpleConceptDeclaration
		public Assignment getRangesAssignment_3_17_3() { return cRangesAssignment_3_17_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getRangesSimpleConceptDeclarationParserRuleCall_3_17_3_0() { return cRangesSimpleConceptDeclarationParserRuleCall_3_17_3_0; }
		
		//(',' domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration)*
		public Group getGroup_3_17_4() { return cGroup_3_17_4; }
		
		//','
		public Keyword getCommaKeyword_3_17_4_0() { return cCommaKeyword_3_17_4_0; }
		
		//domains+=SimpleConceptDeclaration
		public Assignment getDomainsAssignment_3_17_4_1() { return cDomainsAssignment_3_17_4_1; }
		
		//SimpleConceptDeclaration
		public RuleCall getDomainsSimpleConceptDeclarationParserRuleCall_3_17_4_1_0() { return cDomainsSimpleConceptDeclarationParserRuleCall_3_17_4_1_0; }
		
		//=> 'to'
		public Keyword getToKeyword_3_17_4_2() { return cToKeyword_3_17_4_2; }
		
		//ranges+=SimpleConceptDeclaration
		public Assignment getRangesAssignment_3_17_4_3() { return cRangesAssignment_3_17_4_3; }
		
		//SimpleConceptDeclaration
		public RuleCall getRangesSimpleConceptDeclarationParserRuleCall_3_17_4_3_0() { return cRangesSimpleConceptDeclarationParserRuleCall_3_17_4_3_0; }
		
		//('inverse' 'of' inverse=ConceptDeclaration)?
		public Group getGroup_3_18() { return cGroup_3_18; }
		
		//'inverse'
		public Keyword getInverseKeyword_3_18_0() { return cInverseKeyword_3_18_0; }
		
		//'of'
		public Keyword getOfKeyword_3_18_1() { return cOfKeyword_3_18_1; }
		
		//inverse=ConceptDeclaration
		public Assignment getInverseAssignment_3_18_2() { return cInverseAssignment_3_18_2; }
		
		//ConceptDeclaration
		public RuleCall getInverseConceptDeclarationParserRuleCall_3_18_2_0() { return cInverseConceptDeclarationParserRuleCall_3_18_2_0; }
		
		//('affects' qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)?
		public Group getGroup_3_19() { return cGroup_3_19; }
		
		//'affects'
		public Keyword getAffectsKeyword_3_19_0() { return cAffectsKeyword_3_19_0; }
		
		//qualitiesAffected+=ConceptDeclaration
		public Assignment getQualitiesAffectedAssignment_3_19_1() { return cQualitiesAffectedAssignment_3_19_1; }
		
		//ConceptDeclaration
		public RuleCall getQualitiesAffectedConceptDeclarationParserRuleCall_3_19_1_0() { return cQualitiesAffectedConceptDeclarationParserRuleCall_3_19_1_0; }
		
		//(',' qualitiesAffected+=ConceptDeclaration)*
		public Group getGroup_3_19_2() { return cGroup_3_19_2; }
		
		//','
		public Keyword getCommaKeyword_3_19_2_0() { return cCommaKeyword_3_19_2_0; }
		
		//qualitiesAffected+=ConceptDeclaration
		public Assignment getQualitiesAffectedAssignment_3_19_2_1() { return cQualitiesAffectedAssignment_3_19_2_1; }
		
		//ConceptDeclaration
		public RuleCall getQualitiesAffectedConceptDeclarationParserRuleCall_3_19_2_1_0() { return cQualitiesAffectedConceptDeclarationParserRuleCall_3_19_2_1_0; }
		
		//('has' disjoint?='disjoint'? 'children' children+=ChildConcept (',' children+=ChildConcept)*)?
		public Group getGroup_3_20() { return cGroup_3_20; }
		
		//'has'
		public Keyword getHasKeyword_3_20_0() { return cHasKeyword_3_20_0; }
		
		//disjoint?='disjoint'?
		public Assignment getDisjointAssignment_3_20_1() { return cDisjointAssignment_3_20_1; }
		
		//'disjoint'
		public Keyword getDisjointDisjointKeyword_3_20_1_0() { return cDisjointDisjointKeyword_3_20_1_0; }
		
		//'children'
		public Keyword getChildrenKeyword_3_20_2() { return cChildrenKeyword_3_20_2; }
		
		//children+=ChildConcept
		public Assignment getChildrenAssignment_3_20_3() { return cChildrenAssignment_3_20_3; }
		
		//ChildConcept
		public RuleCall getChildrenChildConceptParserRuleCall_3_20_3_0() { return cChildrenChildConceptParserRuleCall_3_20_3_0; }
		
		//(',' children+=ChildConcept)*
		public Group getGroup_3_20_4() { return cGroup_3_20_4; }
		
		//','
		public Keyword getCommaKeyword_3_20_4_0() { return cCommaKeyword_3_20_4_0; }
		
		//children+=ChildConcept
		public Assignment getChildrenAssignment_3_20_4_1() { return cChildrenAssignment_3_20_4_1; }
		
		//ChildConcept
		public RuleCall getChildrenChildConceptParserRuleCall_3_20_4_1_0() { return cChildrenChildConceptParserRuleCall_3_20_4_1_0; }
		
		//restrictions+=RestrictionStatement*
		public Assignment getRestrictionsAssignment_3_21() { return cRestrictionsAssignment_3_21; }
		
		//RestrictionStatement
		public RuleCall getRestrictionsRestrictionStatementParserRuleCall_3_21_0() { return cRestrictionsRestrictionStatementParserRuleCall_3_21_0; }
		
		//('with' 'metadata' metadata=Metadata)?
		public Group getGroup_3_22() { return cGroup_3_22; }
		
		//'with'
		public Keyword getWithKeyword_3_22_0() { return cWithKeyword_3_22_0; }
		
		//'metadata'
		public Keyword getMetadataKeyword_3_22_1() { return cMetadataKeyword_3_22_1; }
		
		//metadata=Metadata
		public Assignment getMetadataAssignment_3_22_2() { return cMetadataAssignment_3_22_2; }
		
		//Metadata
		public RuleCall getMetadataMetadataParserRuleCall_3_22_2_0() { return cMetadataMetadataParserRuleCall_3_22_2_0; }
	}
	public class ApplicableTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ApplicableTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetConceptDeclarationParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBetweenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLinkFromAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinkFromConceptDeclarationParserRuleCall_1_1_0 = (RuleCall)cLinkFromAssignment_1_1.eContents().get(0);
		private final Keyword cAndKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLinkToAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLinkToConceptDeclarationParserRuleCall_1_3_0 = (RuleCall)cLinkToAssignment_1_3.eContents().get(0);
		
		//ApplicableTarget:
		//	target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?;
		@Override public ParserRule getRule() { return rule; }
		
		//target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?
		public Group getGroup() { return cGroup; }
		
		//target=ConceptDeclaration
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getTargetConceptDeclarationParserRuleCall_0_0() { return cTargetConceptDeclarationParserRuleCall_0_0; }
		
		//('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'between'
		public Keyword getBetweenKeyword_1_0() { return cBetweenKeyword_1_0; }
		
		//linkFrom=ConceptDeclaration
		public Assignment getLinkFromAssignment_1_1() { return cLinkFromAssignment_1_1; }
		
		//ConceptDeclaration
		public RuleCall getLinkFromConceptDeclarationParserRuleCall_1_1_0() { return cLinkFromConceptDeclarationParserRuleCall_1_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_2() { return cAndKeyword_1_2; }
		
		//linkTo=ConceptDeclaration
		public Assignment getLinkToAssignment_1_3() { return cLinkToAssignment_1_3; }
		
		//ConceptDeclaration
		public RuleCall getLinkToConceptDeclarationParserRuleCall_1_3_0() { return cLinkToConceptDeclarationParserRuleCall_1_3_0; }
	}
	public class ChildConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ChildConcept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0_0 = (Keyword)cAbstractAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameCAMELCASE_IDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConceptStatementBodyParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ChildConcept ConceptStatementBody:
		//	abstract?='abstract'? name=CAMELCASE_ID | '(' ConceptStatementBody ')';
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? name=CAMELCASE_ID | '(' ConceptStatementBody ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//abstract?='abstract'? name=CAMELCASE_ID
		public Group getGroup_0() { return cGroup_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_0() { return cAbstractAssignment_0_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0_0() { return cAbstractAbstractKeyword_0_0_0; }
		
		//name=CAMELCASE_ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getNameCAMELCASE_IDTerminalRuleCall_0_1_0() { return cNameCAMELCASE_IDTerminalRuleCall_0_1_0; }
		
		//'(' ConceptStatementBody ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//ConceptStatementBody
		public RuleCall getConceptStatementBodyParserRuleCall_1_1() { return cConceptStatementBodyParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class IdentityRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.IdentityRequirement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cIdentityKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cAttributeKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cRealmKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final Keyword cExtentKeyword_0_0_3 = (Keyword)cAlternatives_0_0.eContents().get(3);
		private final Assignment cIdentitiesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdentitiesConceptDeclarationParserRuleCall_0_1_0 = (RuleCall)cIdentitiesAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cIdentitiesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIdentitiesConceptDeclarationParserRuleCall_0_2_1_0 = (RuleCall)cIdentitiesAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAuthorityKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAuthorityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAuthorityAlternatives_1_1_0 = (Alternatives)cAuthorityAssignment_1_1.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_IDTerminalRuleCall_1_1_0_0 = (RuleCall)cAuthorityAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cAuthorityUPPERCASE_PATHTerminalRuleCall_1_1_0_1 = (RuleCall)cAuthorityAlternatives_1_1_0.eContents().get(1);
		
		//IdentityRequirement:
		//	('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)*
		//	| 'authority' authority=(UPPERCASE_ID | UPPERCASE_PATH);
		@Override public ParserRule getRule() { return rule; }
		
		//('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)* |
		//'authority' authority=(UPPERCASE_ID | UPPERCASE_PATH)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'identity' | 'attribute' | 'realm' | 'extent'
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'identity'
		public Keyword getIdentityKeyword_0_0_0() { return cIdentityKeyword_0_0_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0_0_1() { return cAttributeKeyword_0_0_1; }
		
		//'realm'
		public Keyword getRealmKeyword_0_0_2() { return cRealmKeyword_0_0_2; }
		
		//'extent'
		public Keyword getExtentKeyword_0_0_3() { return cExtentKeyword_0_0_3; }
		
		//identities+=ConceptDeclaration
		public Assignment getIdentitiesAssignment_0_1() { return cIdentitiesAssignment_0_1; }
		
		//ConceptDeclaration
		public RuleCall getIdentitiesConceptDeclarationParserRuleCall_0_1_0() { return cIdentitiesConceptDeclarationParserRuleCall_0_1_0; }
		
		//(',' identities+=ConceptDeclaration)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//identities+=ConceptDeclaration
		public Assignment getIdentitiesAssignment_0_2_1() { return cIdentitiesAssignment_0_2_1; }
		
		//ConceptDeclaration
		public RuleCall getIdentitiesConceptDeclarationParserRuleCall_0_2_1_0() { return cIdentitiesConceptDeclarationParserRuleCall_0_2_1_0; }
		
		//'authority' authority=(UPPERCASE_ID | UPPERCASE_PATH)
		public Group getGroup_1() { return cGroup_1; }
		
		//'authority'
		public Keyword getAuthorityKeyword_1_0() { return cAuthorityKeyword_1_0; }
		
		//authority=(UPPERCASE_ID | UPPERCASE_PATH)
		public Assignment getAuthorityAssignment_1_1() { return cAuthorityAssignment_1_1; }
		
		//(UPPERCASE_ID | UPPERCASE_PATH)
		public Alternatives getAuthorityAlternatives_1_1_0() { return cAuthorityAlternatives_1_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthorityUPPERCASE_IDTerminalRuleCall_1_1_0_0() { return cAuthorityUPPERCASE_IDTerminalRuleCall_1_1_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthorityUPPERCASE_PATHTerminalRuleCall_1_1_0_1() { return cAuthorityUPPERCASE_PATHTerminalRuleCall_1_1_0_1; }
	}
	public class RestrictionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.RestrictionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRelTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cRelTypeAlternatives_0_0_0 = (Alternatives)cRelTypeAssignment_0_0.eContents().get(0);
		private final Keyword cRelTypeUsesKeyword_0_0_0_0 = (Keyword)cRelTypeAlternatives_0_0_0.eContents().get(0);
		private final Keyword cRelTypeHasKeyword_0_0_0_1 = (Keyword)cRelTypeAlternatives_0_0_0.eContents().get(1);
		private final Keyword cRelTypeContainsKeyword_0_0_0_2 = (Keyword)cRelTypeAlternatives_0_0_0.eContents().get(2);
		private final Keyword cRelTypeImpliesKeyword_0_0_0_3 = (Keyword)cRelTypeAlternatives_0_0_0.eContents().get(3);
		private final Assignment cDefinitionsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDefinitionsRestrictionDefinitionParserRuleCall_0_1_0 = (RuleCall)cDefinitionsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cDefinitionsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cDefinitionsRestrictionDefinitionParserRuleCall_0_2_1_0 = (RuleCall)cDefinitionsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cUsesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAuthorityKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAuthoritiesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cAuthoritiesAlternatives_1_2_0 = (Alternatives)cAuthoritiesAssignment_1_2.eContents().get(0);
		private final RuleCall cAuthoritiesUPPERCASE_IDTerminalRuleCall_1_2_0_0 = (RuleCall)cAuthoritiesAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cAuthoritiesUPPERCASE_PATHTerminalRuleCall_1_2_0_1 = (RuleCall)cAuthoritiesAlternatives_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cAuthoritiesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final Alternatives cAuthoritiesAlternatives_1_3_1_0 = (Alternatives)cAuthoritiesAssignment_1_3_1.eContents().get(0);
		private final RuleCall cAuthoritiesUPPERCASE_IDTerminalRuleCall_1_3_1_0_0 = (RuleCall)cAuthoritiesAlternatives_1_3_1_0.eContents().get(0);
		private final RuleCall cAuthoritiesUPPERCASE_PATHTerminalRuleCall_1_3_1_0_1 = (RuleCall)cAuthoritiesAlternatives_1_3_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cLiteralForKeyword_2_2_0 = (Keyword)cLiteralAssignment_2_2.eContents().get(0);
		private final Assignment cSubjectAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Alternatives cSubjectAlternatives_2_3_0 = (Alternatives)cSubjectAssignment_2_3.eContents().get(0);
		private final RuleCall cSubjectCAMELCASE_IDTerminalRuleCall_2_3_0_0 = (RuleCall)cSubjectAlternatives_2_3_0.eContents().get(0);
		private final RuleCall cSubjectNamespaceIdParserRuleCall_2_3_0_1 = (RuleCall)cSubjectAlternatives_2_3_0.eContents().get(1);
		
		///*
		// * Ultra-simple restriction statements:
		// *
		// * uses [only] CCC [for PPP]; // PPP can be a property or a concept
		// * uses at [least|most] 1 CCC [for PPP]
		// * uses exactly 1 CCC [for PPP]
		// * uses 120 for PPP // data property
		// *
		// * uses = has; requires = functional has; contains = part-of (contextually resolved). implies is only for roles.
		// * 
		// * if PPP is a concept (much more intuitive), must be restricting a known one and hasPPP is created (or used).
		// * 
		// * Also hosts the 'uses authority' restriction which is only accepted by domains.
		// * 
		// */
		//RestrictionStatement:
		//	relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (','
		//	definitions+=RestrictionDefinition)* | 'uses' 'authority' authorities+=(UPPERCASE_ID | UPPERCASE_PATH) (=> ','
		//	authorities+=(UPPERCASE_ID | UPPERCASE_PATH))* | 'uses' value=Literal literal?='for' subject=(CAMELCASE_ID |
		//	NamespaceId);
		@Override public ParserRule getRule() { return rule; }
		
		//relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (','
		//definitions+=RestrictionDefinition)* | 'uses' 'authority' authorities+=(UPPERCASE_ID | UPPERCASE_PATH) (=> ','
		//authorities+=(UPPERCASE_ID | UPPERCASE_PATH))* | 'uses' value=Literal literal?='for' subject=(CAMELCASE_ID |
		//NamespaceId)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (','
		//definitions+=RestrictionDefinition)*
		public Group getGroup_0() { return cGroup_0; }
		
		//relType=('uses' | 'has' | 'contains' | 'implies')
		public Assignment getRelTypeAssignment_0_0() { return cRelTypeAssignment_0_0; }
		
		//('uses' | 'has' | 'contains' | 'implies')
		public Alternatives getRelTypeAlternatives_0_0_0() { return cRelTypeAlternatives_0_0_0; }
		
		//'uses'
		public Keyword getRelTypeUsesKeyword_0_0_0_0() { return cRelTypeUsesKeyword_0_0_0_0; }
		
		//'has'
		public Keyword getRelTypeHasKeyword_0_0_0_1() { return cRelTypeHasKeyword_0_0_0_1; }
		
		//'contains'
		public Keyword getRelTypeContainsKeyword_0_0_0_2() { return cRelTypeContainsKeyword_0_0_0_2; }
		
		//'implies'
		public Keyword getRelTypeImpliesKeyword_0_0_0_3() { return cRelTypeImpliesKeyword_0_0_0_3; }
		
		//definitions+=RestrictionDefinition
		public Assignment getDefinitionsAssignment_0_1() { return cDefinitionsAssignment_0_1; }
		
		//RestrictionDefinition
		public RuleCall getDefinitionsRestrictionDefinitionParserRuleCall_0_1_0() { return cDefinitionsRestrictionDefinitionParserRuleCall_0_1_0; }
		
		//(',' definitions+=RestrictionDefinition)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//definitions+=RestrictionDefinition
		public Assignment getDefinitionsAssignment_0_2_1() { return cDefinitionsAssignment_0_2_1; }
		
		//RestrictionDefinition
		public RuleCall getDefinitionsRestrictionDefinitionParserRuleCall_0_2_1_0() { return cDefinitionsRestrictionDefinitionParserRuleCall_0_2_1_0; }
		
		//'uses' 'authority' authorities+=(UPPERCASE_ID | UPPERCASE_PATH) (=> ',' authorities+=(UPPERCASE_ID | UPPERCASE_PATH))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'uses'
		public Keyword getUsesKeyword_1_0() { return cUsesKeyword_1_0; }
		
		//'authority'
		public Keyword getAuthorityKeyword_1_1() { return cAuthorityKeyword_1_1; }
		
		//authorities+=(UPPERCASE_ID | UPPERCASE_PATH)
		public Assignment getAuthoritiesAssignment_1_2() { return cAuthoritiesAssignment_1_2; }
		
		//(UPPERCASE_ID | UPPERCASE_PATH)
		public Alternatives getAuthoritiesAlternatives_1_2_0() { return cAuthoritiesAlternatives_1_2_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthoritiesUPPERCASE_IDTerminalRuleCall_1_2_0_0() { return cAuthoritiesUPPERCASE_IDTerminalRuleCall_1_2_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthoritiesUPPERCASE_PATHTerminalRuleCall_1_2_0_1() { return cAuthoritiesUPPERCASE_PATHTerminalRuleCall_1_2_0_1; }
		
		//(=> ',' authorities+=(UPPERCASE_ID | UPPERCASE_PATH))*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//=> ','
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//authorities+=(UPPERCASE_ID | UPPERCASE_PATH)
		public Assignment getAuthoritiesAssignment_1_3_1() { return cAuthoritiesAssignment_1_3_1; }
		
		//(UPPERCASE_ID | UPPERCASE_PATH)
		public Alternatives getAuthoritiesAlternatives_1_3_1_0() { return cAuthoritiesAlternatives_1_3_1_0; }
		
		//UPPERCASE_ID
		public RuleCall getAuthoritiesUPPERCASE_IDTerminalRuleCall_1_3_1_0_0() { return cAuthoritiesUPPERCASE_IDTerminalRuleCall_1_3_1_0_0; }
		
		//UPPERCASE_PATH
		public RuleCall getAuthoritiesUPPERCASE_PATHTerminalRuleCall_1_3_1_0_1() { return cAuthoritiesUPPERCASE_PATHTerminalRuleCall_1_3_1_0_1; }
		
		//'uses' value=Literal literal?='for' subject=(CAMELCASE_ID | NamespaceId)
		public Group getGroup_2() { return cGroup_2; }
		
		//'uses'
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }
		
		//value=Literal
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_2_1_0() { return cValueLiteralParserRuleCall_2_1_0; }
		
		//literal?='for'
		public Assignment getLiteralAssignment_2_2() { return cLiteralAssignment_2_2; }
		
		//'for'
		public Keyword getLiteralForKeyword_2_2_0() { return cLiteralForKeyword_2_2_0; }
		
		//subject=(CAMELCASE_ID | NamespaceId)
		public Assignment getSubjectAssignment_2_3() { return cSubjectAssignment_2_3; }
		
		//(CAMELCASE_ID | NamespaceId)
		public Alternatives getSubjectAlternatives_2_3_0() { return cSubjectAlternatives_2_3_0; }
		
		//CAMELCASE_ID
		public RuleCall getSubjectCAMELCASE_IDTerminalRuleCall_2_3_0_0() { return cSubjectCAMELCASE_IDTerminalRuleCall_2_3_0_0; }
		
		//NamespaceId
		public RuleCall getSubjectNamespaceIdParserRuleCall_2_3_0_1() { return cSubjectNamespaceIdParserRuleCall_2_3_0_1; }
	}
	public class RestrictionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.RestrictionDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cOnlyAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cOnlyOnlyKeyword_0_0_0_0 = (Keyword)cOnlyAssignment_0_0_0.eContents().get(0);
		private final Assignment cNoneAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNoneNoKeyword_0_0_1_0 = (Keyword)cNoneAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final Alternatives cAlternatives_0_0_2_0 = (Alternatives)cGroup_0_0_2.eContents().get(0);
		private final Assignment cExactlyAssignment_0_0_2_0_0 = (Assignment)cAlternatives_0_0_2_0.eContents().get(0);
		private final Keyword cExactlyExactlyKeyword_0_0_2_0_0_0 = (Keyword)cExactlyAssignment_0_0_2_0_0.eContents().get(0);
		private final Group cGroup_0_0_2_0_1 = (Group)cAlternatives_0_0_2_0.eContents().get(1);
		private final Keyword cAtKeyword_0_0_2_0_1_0 = (Keyword)cGroup_0_0_2_0_1.eContents().get(0);
		private final Assignment cAtLeastAssignment_0_0_2_0_1_1 = (Assignment)cGroup_0_0_2_0_1.eContents().get(1);
		private final Keyword cAtLeastLeastKeyword_0_0_2_0_1_1_0 = (Keyword)cAtLeastAssignment_0_0_2_0_1_1.eContents().get(0);
		private final Group cGroup_0_0_2_0_2 = (Group)cAlternatives_0_0_2_0.eContents().get(2);
		private final Keyword cAtKeyword_0_0_2_0_2_0 = (Keyword)cGroup_0_0_2_0_2.eContents().get(0);
		private final Assignment cAtMostAssignment_0_0_2_0_2_1 = (Assignment)cGroup_0_0_2_0_2.eContents().get(1);
		private final Keyword cAtMostMostKeyword_0_0_2_0_2_1_0 = (Keyword)cAtMostAssignment_0_0_2_0_2_1.eContents().get(0);
		private final Assignment cHowmanyAssignment_0_0_2_1 = (Assignment)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cHowmanyINTTerminalRuleCall_0_0_2_1_0 = (RuleCall)cHowmanyAssignment_0_0_2_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cSourceAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cSourceConceptDeclarationParserRuleCall_0_1_0_0 = (RuleCall)cSourceAssignment_0_1_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_0_1_1_0 = (RuleCall)cDataTypeAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cInheritingKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTraitTypeAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTraitTypeConceptDeclarationParserRuleCall_0_2_1_0 = (RuleCall)cTraitTypeAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_0_3_0 = (Alternatives)cGroup_0_3.eContents().get(0);
		private final Keyword cForKeyword_0_3_0_0 = (Keyword)cAlternatives_0_3_0.eContents().get(0);
		private final Keyword cAsKeyword_0_3_0_1 = (Keyword)cAlternatives_0_3_0.eContents().get(1);
		private final Assignment cSubjectAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cSubjectConceptDeclarationParserRuleCall_0_3_1_0 = (RuleCall)cSubjectAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueLiteralParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cToKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMaxValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMaxValueNumberParserRuleCall_1_1_1_0 = (RuleCall)cMaxValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cForKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPropertyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPropertyPropertyIdParserRuleCall_1_3_0 = (RuleCall)cPropertyAssignment_1_3.eContents().get(0);
		
		//RestrictionDefinition:
		//	(only?='only' | none?='no' | (exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most') howmany=INT)?
		//	(source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)? (('for' | 'as')
		//	subject=ConceptDeclaration)? | value=Literal ('to' maxValue=Number)? 'for' property=PropertyId;
		@Override public ParserRule getRule() { return rule; }
		
		//(only?='only' | none?='no' | (exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most') howmany=INT)?
		//(source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)? (('for' | 'as')
		//subject=ConceptDeclaration)? | value=Literal ('to' maxValue=Number)? 'for' property=PropertyId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(only?='only' | none?='no' | (exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most') howmany=INT)?
		//(source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)? (('for' | 'as')
		//subject=ConceptDeclaration)?
		public Group getGroup_0() { return cGroup_0; }
		
		//(only?='only' | none?='no' | (exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most') howmany=INT)?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//only?='only'
		public Assignment getOnlyAssignment_0_0_0() { return cOnlyAssignment_0_0_0; }
		
		//'only'
		public Keyword getOnlyOnlyKeyword_0_0_0_0() { return cOnlyOnlyKeyword_0_0_0_0; }
		
		//none?='no'
		public Assignment getNoneAssignment_0_0_1() { return cNoneAssignment_0_0_1; }
		
		//'no'
		public Keyword getNoneNoKeyword_0_0_1_0() { return cNoneNoKeyword_0_0_1_0; }
		
		//(exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most') howmany=INT
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most'
		public Alternatives getAlternatives_0_0_2_0() { return cAlternatives_0_0_2_0; }
		
		//exactly?='exactly'
		public Assignment getExactlyAssignment_0_0_2_0_0() { return cExactlyAssignment_0_0_2_0_0; }
		
		//'exactly'
		public Keyword getExactlyExactlyKeyword_0_0_2_0_0_0() { return cExactlyExactlyKeyword_0_0_2_0_0_0; }
		
		//'at' atLeast?='least'
		public Group getGroup_0_0_2_0_1() { return cGroup_0_0_2_0_1; }
		
		//'at'
		public Keyword getAtKeyword_0_0_2_0_1_0() { return cAtKeyword_0_0_2_0_1_0; }
		
		//atLeast?='least'
		public Assignment getAtLeastAssignment_0_0_2_0_1_1() { return cAtLeastAssignment_0_0_2_0_1_1; }
		
		//'least'
		public Keyword getAtLeastLeastKeyword_0_0_2_0_1_1_0() { return cAtLeastLeastKeyword_0_0_2_0_1_1_0; }
		
		//'at' atMost?='most'
		public Group getGroup_0_0_2_0_2() { return cGroup_0_0_2_0_2; }
		
		//'at'
		public Keyword getAtKeyword_0_0_2_0_2_0() { return cAtKeyword_0_0_2_0_2_0; }
		
		//atMost?='most'
		public Assignment getAtMostAssignment_0_0_2_0_2_1() { return cAtMostAssignment_0_0_2_0_2_1; }
		
		//'most'
		public Keyword getAtMostMostKeyword_0_0_2_0_2_1_0() { return cAtMostMostKeyword_0_0_2_0_2_1_0; }
		
		//howmany=INT
		public Assignment getHowmanyAssignment_0_0_2_1() { return cHowmanyAssignment_0_0_2_1; }
		
		//INT
		public RuleCall getHowmanyINTTerminalRuleCall_0_0_2_1_0() { return cHowmanyINTTerminalRuleCall_0_0_2_1_0; }
		
		//source=ConceptDeclaration | dataType=DataType
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//source=ConceptDeclaration
		public Assignment getSourceAssignment_0_1_0() { return cSourceAssignment_0_1_0; }
		
		//ConceptDeclaration
		public RuleCall getSourceConceptDeclarationParserRuleCall_0_1_0_0() { return cSourceConceptDeclarationParserRuleCall_0_1_0_0; }
		
		//dataType=DataType
		public Assignment getDataTypeAssignment_0_1_1() { return cDataTypeAssignment_0_1_1; }
		
		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_0_1_1_0() { return cDataTypeDataTypeEnumRuleCall_0_1_1_0; }
		
		//('inheriting' traitType=ConceptDeclaration)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'inheriting'
		public Keyword getInheritingKeyword_0_2_0() { return cInheritingKeyword_0_2_0; }
		
		//traitType=ConceptDeclaration
		public Assignment getTraitTypeAssignment_0_2_1() { return cTraitTypeAssignment_0_2_1; }
		
		//ConceptDeclaration
		public RuleCall getTraitTypeConceptDeclarationParserRuleCall_0_2_1_0() { return cTraitTypeConceptDeclarationParserRuleCall_0_2_1_0; }
		
		//(('for' | 'as') subject=ConceptDeclaration)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'for' | 'as'
		public Alternatives getAlternatives_0_3_0() { return cAlternatives_0_3_0; }
		
		//'for'
		public Keyword getForKeyword_0_3_0_0() { return cForKeyword_0_3_0_0; }
		
		//'as'
		public Keyword getAsKeyword_0_3_0_1() { return cAsKeyword_0_3_0_1; }
		
		//subject=ConceptDeclaration
		public Assignment getSubjectAssignment_0_3_1() { return cSubjectAssignment_0_3_1; }
		
		//ConceptDeclaration
		public RuleCall getSubjectConceptDeclarationParserRuleCall_0_3_1_0() { return cSubjectConceptDeclarationParserRuleCall_0_3_1_0; }
		
		//// data restriction, only for special cases in worldview namespaces; 'for' introduces a data property from core ontologies
		//
		//value=Literal ('to' maxValue=Number)? 'for' property=PropertyId
		public Group getGroup_1() { return cGroup_1; }
		
		//// data restriction, only for special cases in worldview namespaces; 'for' introduces a data property from core ontologies
		//
		//value=Literal
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0_0() { return cValueLiteralParserRuleCall_1_0_0; }
		
		//('to' maxValue=Number)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'to'
		public Keyword getToKeyword_1_1_0() { return cToKeyword_1_1_0; }
		
		//maxValue=Number
		public Assignment getMaxValueAssignment_1_1_1() { return cMaxValueAssignment_1_1_1; }
		
		//Number
		public RuleCall getMaxValueNumberParserRuleCall_1_1_1_0() { return cMaxValueNumberParserRuleCall_1_1_1_0; }
		
		//'for'
		public Keyword getForKeyword_1_2() { return cForKeyword_1_2; }
		
		//property=PropertyId
		public Assignment getPropertyAssignment_1_3() { return cPropertyAssignment_1_3; }
		
		//PropertyId
		public RuleCall getPropertyPropertyIdParserRuleCall_1_3_0() { return cPropertyPropertyIdParserRuleCall_1_3_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameANNOTATION_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterListParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Annotation:
		//	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ANNOTATION_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ANNOTATION_ID
		public RuleCall getNameANNOTATION_IDTerminalRuleCall_0_0() { return cNameANNOTATION_IDTerminalRuleCall_0_0; }
		
		//('(' parameters=ParameterList? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_1_1_0() { return cParametersParameterListParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsValueParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//	{List} '(' contents+=Value* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{List} '(' contents+=Value* ')'
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//contents+=Value*
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }
		
		//Value
		public RuleCall getContentsValueParserRuleCall_2_0() { return cContentsValueParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cToAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_0_2_0 = (RuleCall)cToAssignment_0_2.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBooleanAlternatives_3_0 = (Alternatives)cBooleanAssignment_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_3_0_0 = (Keyword)cBooleanAlternatives_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_3_0_1 = (Keyword)cBooleanAlternatives_3_0.eContents().get(1);
		
		//Literal:
		//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//from=Number => 'to' => to=Number
		public Group getGroup_0() { return cGroup_0; }
		
		//from=Number
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_0_0_0() { return cFromNumberParserRuleCall_0_0_0; }
		
		//=> 'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//=> to=Number
		public Assignment getToAssignment_0_2() { return cToAssignment_0_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_0_2_0() { return cToNumberParserRuleCall_0_2_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_3_0() { return cBooleanAlternatives_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_3_0_0() { return cBooleanTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_3_0_1() { return cBooleanFalseKeyword_3_0_1; }
	}
	public class LiteralOrIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.LiteralOrID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberNumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cBooleanAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cBooleanAlternatives_2_0 = (Alternatives)cBooleanAssignment_2.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_2_0_0 = (Keyword)cBooleanAlternatives_2_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_2_0_1 = (Keyword)cBooleanAlternatives_2_0.eContents().get(1);
		private final Assignment cIdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		
		//LiteralOrID Literal:
		//	number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//number=Number | string=STRING | boolean=('true' | 'false') | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=Number
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_0_0() { return cNumberNumberParserRuleCall_0_0; }
		
		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_2() { return cBooleanAssignment_2; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_2_0() { return cBooleanAlternatives_2_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_2_0_0() { return cBooleanTrueKeyword_2_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_2_0_1() { return cBooleanFalseKeyword_2_0_1; }
		
		//id=ID
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }
	}
	public class LiteralOrIdOrCommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.LiteralOrIdOrComma");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Keyword cToKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cToAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_0_2_0 = (RuleCall)cToAssignment_0_2.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNumberParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cBooleanAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cBooleanAlternatives_3_0 = (Alternatives)cBooleanAssignment_3.eContents().get(0);
		private final Keyword cBooleanTrueKeyword_3_0_0 = (Keyword)cBooleanAlternatives_3_0.eContents().get(0);
		private final Keyword cBooleanFalseKeyword_3_0_1 = (Keyword)cBooleanAlternatives_3_0.eContents().get(1);
		private final Assignment cIdAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cCommaAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cCommaCommaKeyword_5_0 = (Keyword)cCommaAssignment_5.eContents().get(0);
		
		//LiteralOrIdOrComma Literal:
		//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';
		@Override public ParserRule getRule() { return rule; }
		
		//from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=','
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//from=Number => 'to' => to=Number
		public Group getGroup_0() { return cGroup_0; }
		
		//from=Number
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_0_0_0() { return cFromNumberParserRuleCall_0_0_0; }
		
		//=> 'to'
		public Keyword getToKeyword_0_1() { return cToKeyword_0_1; }
		
		//=> to=Number
		public Assignment getToAssignment_0_2() { return cToAssignment_0_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_0_2_0() { return cToNumberParserRuleCall_0_2_0; }
		
		//number=Number
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_1_0() { return cNumberNumberParserRuleCall_1_0; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//boolean=('true' | 'false')
		public Assignment getBooleanAssignment_3() { return cBooleanAssignment_3; }
		
		//('true' | 'false')
		public Alternatives getBooleanAlternatives_3_0() { return cBooleanAlternatives_3_0; }
		
		//'true'
		public Keyword getBooleanTrueKeyword_3_0_0() { return cBooleanTrueKeyword_3_0_0; }
		
		//'false'
		public Keyword getBooleanFalseKeyword_3_0_1() { return cBooleanFalseKeyword_3_0_1; }
		
		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }
		
		//comma?=','
		public Assignment getCommaAssignment_5() { return cCommaAssignment_5; }
		
		//','
		public Keyword getCommaCommaKeyword_5_0() { return cCommaCommaKeyword_5_0; }
	}
	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetadataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cIdsAlternatives_2_0_0 = (Alternatives)cIdsAssignment_2_0.eContents().get(0);
		private final RuleCall cIdsLOWERCASE_IDTerminalRuleCall_2_0_0_0 = (RuleCall)cIdsAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cIdsPropertyIdParserRuleCall_2_0_0_1 = (RuleCall)cIdsAlternatives_2_0_0.eContents().get(1);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValuesAlternatives_2_1_0 = (Alternatives)cValuesAssignment_2_1.eContents().get(0);
		private final RuleCall cValuesLiteralOrIDParserRuleCall_2_1_0_0 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cValuesMetadataParserRuleCall_2_1_0_1 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cValuesListParserRuleCall_2_1_0_2 = (RuleCall)cValuesAlternatives_2_1_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Metadata:
		//	{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}'
		public Group getGroup() { return cGroup; }
		
		//{Metadata}
		public Action getMetadataAction_0() { return cMetadataAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))*
		public Group getGroup_2() { return cGroup_2; }
		
		//ids+=(LOWERCASE_ID | PropertyId)
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }
		
		//(LOWERCASE_ID | PropertyId)
		public Alternatives getIdsAlternatives_2_0_0() { return cIdsAlternatives_2_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdsLOWERCASE_IDTerminalRuleCall_2_0_0_0() { return cIdsLOWERCASE_IDTerminalRuleCall_2_0_0_0; }
		
		//PropertyId
		public RuleCall getIdsPropertyIdParserRuleCall_2_0_0_1() { return cIdsPropertyIdParserRuleCall_2_0_0_1; }
		
		//values+=(LiteralOrID | Metadata | List)
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//(LiteralOrID | Metadata | List)
		public Alternatives getValuesAlternatives_2_1_0() { return cValuesAlternatives_2_1_0; }
		
		//LiteralOrID
		public RuleCall getValuesLiteralOrIDParserRuleCall_2_1_0_0() { return cValuesLiteralOrIDParserRuleCall_2_1_0_0; }
		
		//Metadata
		public RuleCall getValuesMetadataParserRuleCall_2_1_0_1() { return cValuesMetadataParserRuleCall_2_1_0_1; }
		
		//List
		public RuleCall getValuesListParserRuleCall_2_1_0_2() { return cValuesListParserRuleCall_2_1_0_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMetadataAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSelectorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSelectorsDocSelectorParserRuleCall_2_0_0 = (RuleCall)cSelectorsAssignment_2_0.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesLiteralOrIDParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Documentation:
		//	{Metadata} '{' (selectors+=DocSelector values+=LiteralOrID)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Metadata} '{' (selectors+=DocSelector values+=LiteralOrID)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Metadata}
		public Action getMetadataAction_0() { return cMetadataAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(selectors+=DocSelector values+=LiteralOrID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//selectors+=DocSelector
		public Assignment getSelectorsAssignment_2_0() { return cSelectorsAssignment_2_0; }
		
		//DocSelector
		public RuleCall getSelectorsDocSelectorParserRuleCall_2_0_0() { return cSelectorsDocSelectorParserRuleCall_2_0_0; }
		
		//values+=LiteralOrID
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//LiteralOrID
		public RuleCall getValuesLiteralOrIDParserRuleCall_2_1_0() { return cValuesLiteralOrIDParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DocSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.DocSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdPropertyIdParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOnKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cDefinitionAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cDefinitionDefinitionKeyword_1_1_0_0 = (Keyword)cDefinitionAssignment_1_1_0.eContents().get(0);
		private final Assignment cInitializationAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cInitializationInitializationKeyword_1_1_1_0 = (Keyword)cInitializationAssignment_1_1_1.eContents().get(0);
		private final Assignment cTerminationAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cTerminationTerminationKeyword_1_1_2_0 = (Keyword)cTerminationAssignment_1_1_2.eContents().get(0);
		private final Assignment cTransitionAssignment_1_1_3 = (Assignment)cAlternatives_1_1.eContents().get(3);
		private final Keyword cTransitionTransitionKeyword_1_1_3_0 = (Keyword)cTransitionAssignment_1_1_3.eContents().get(0);
		
		//DocSelector:
		//	id=PropertyId | 'on' (definition?='definition' | initialization?='initialization' | termination?='termination' |
		//	transition?='transition');
		@Override public ParserRule getRule() { return rule; }
		
		//id=PropertyId | 'on' (definition?='definition' | initialization?='initialization' | termination?='termination' |
		//transition?='transition')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=PropertyId
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//PropertyId
		public RuleCall getIdPropertyIdParserRuleCall_0_0() { return cIdPropertyIdParserRuleCall_0_0; }
		
		//'on' (definition?='definition' | initialization?='initialization' | termination?='termination' |
		//transition?='transition')
		public Group getGroup_1() { return cGroup_1; }
		
		//'on'
		public Keyword getOnKeyword_1_0() { return cOnKeyword_1_0; }
		
		//definition?='definition' | initialization?='initialization' | termination?='termination' | transition?='transition'
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//definition?='definition'
		public Assignment getDefinitionAssignment_1_1_0() { return cDefinitionAssignment_1_1_0; }
		
		//'definition'
		public Keyword getDefinitionDefinitionKeyword_1_1_0_0() { return cDefinitionDefinitionKeyword_1_1_0_0; }
		
		//initialization?='initialization'
		public Assignment getInitializationAssignment_1_1_1() { return cInitializationAssignment_1_1_1; }
		
		//'initialization'
		public Keyword getInitializationInitializationKeyword_1_1_1_0() { return cInitializationInitializationKeyword_1_1_1_0; }
		
		//termination?='termination'
		public Assignment getTerminationAssignment_1_1_2() { return cTerminationAssignment_1_1_2; }
		
		//'termination'
		public Keyword getTerminationTerminationKeyword_1_1_2_0() { return cTerminationTerminationKeyword_1_1_2_0; }
		
		//transition?='transition'
		public Assignment getTransitionAssignment_1_1_3() { return cTransitionAssignment_1_1_3; }
		
		//'transition'
		public Keyword getTransitionTransitionKeyword_1_1_3_0() { return cTransitionTransitionKeyword_1_1_3_0; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNamePathNameParserRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInteractiveAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cInteractiveQuestionMarkEqualsSignKeyword_1_0_0 = (Keyword)cInteractiveAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//KeyValuePair:
		//	name=(LOWERCASE_ID | PathName) (interactive?='?=' | '=') value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//name=(LOWERCASE_ID | PathName) (interactive?='?=' | '=') value=Value
		public Group getGroup() { return cGroup; }
		
		//name=(LOWERCASE_ID | PathName)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//(LOWERCASE_ID | PathName)
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_0_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_0_0_0; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_0_0_1() { return cNamePathNameParserRuleCall_0_0_1; }
		
		//interactive?='?=' | '='
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//interactive?='?='
		public Assignment getInteractiveAssignment_1_0() { return cInteractiveAssignment_1_0; }
		
		//'?='
		public Keyword getInteractiveQuestionMarkEqualsSignKeyword_1_0_0() { return cInteractiveQuestionMarkEqualsSignKeyword_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ParameterList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSingleValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSingleValueValueParserRuleCall_0_0 = (RuleCall)cSingleValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPairsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_0_0 = (RuleCall)cPairsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPairsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPairsKeyValuePairParserRuleCall_1_1_1_0 = (RuleCall)cPairsAssignment_1_1_1.eContents().get(0);
		
		//ParameterList:
		//	singleValue=Value | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
		@Override public ParserRule getRule() { return rule; }
		
		//singleValue=Value | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//singleValue=Value
		public Assignment getSingleValueAssignment_0() { return cSingleValueAssignment_0; }
		
		//Value
		public RuleCall getSingleValueValueParserRuleCall_0_0() { return cSingleValueValueParserRuleCall_0_0; }
		
		//pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*
		public Group getGroup_1() { return cGroup_1; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_0() { return cPairsAssignment_1_0; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_0_0() { return cPairsKeyValuePairParserRuleCall_1_0_0; }
		
		//(=> ',' pairs+=KeyValuePair)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//pairs+=KeyValuePair
		public Assignment getPairsAssignment_1_1_1() { return cPairsAssignment_1_1_1; }
		
		//KeyValuePair
		public RuleCall getPairsKeyValuePairParserRuleCall_1_1_1_0() { return cPairsKeyValuePairParserRuleCall_1_1_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralOrIdOrCommaParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExprEXPRTerminalRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Assignment cIdAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cIdAlternatives_3_0 = (Alternatives)cIdAssignment_3.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_3_0_0 = (RuleCall)cIdAlternatives_3_0.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_3_0_1 = (RuleCall)cIdAlternatives_3_0.eContents().get(1);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_3_0_2 = (RuleCall)cIdAlternatives_3_0.eContents().get(2);
		private final Assignment cListAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cListListParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Assignment cMapAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cMapMetadataParserRuleCall_5_0 = (RuleCall)cMapAssignment_5.eContents().get(0);
		private final Assignment cNullAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cNullUnknownKeyword_6_0 = (Keyword)cNullAssignment_6.eContents().get(0);
		
		//Value:
		//	literal=LiteralOrIdOrComma | function=Function | expr=EXPR | id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID) |
		//	list=List | map=Metadata | null?='unknown';
		@Override public ParserRule getRule() { return rule; }
		
		//literal=LiteralOrIdOrComma | function=Function | expr=EXPR | id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID) | list=List
		//| map=Metadata | null?='unknown'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=LiteralOrIdOrComma
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//LiteralOrIdOrComma
		public RuleCall getLiteralLiteralOrIdOrCommaParserRuleCall_0_0() { return cLiteralLiteralOrIdOrCommaParserRuleCall_0_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//expr=EXPR
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//EXPR
		public RuleCall getExprEXPRTerminalRuleCall_2_0() { return cExprEXPRTerminalRuleCall_2_0; }
		
		//id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID)
		public Alternatives getIdAlternatives_3_0() { return cIdAlternatives_3_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_3_0_0() { return cIdLOWERCASE_IDTerminalRuleCall_3_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_3_0_1() { return cIdUPPERCASE_IDTerminalRuleCall_3_0_1; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_3_0_2() { return cIdCAMELCASE_IDTerminalRuleCall_3_0_2; }
		
		//list=List
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//List
		public RuleCall getListListParserRuleCall_4_0() { return cListListParserRuleCall_4_0; }
		
		//map=Metadata
		public Assignment getMapAssignment_5() { return cMapAssignment_5; }
		
		//Metadata
		public RuleCall getMapMetadataParserRuleCall_5_0() { return cMapMetadataParserRuleCall_5_0; }
		
		//null?='unknown'
		public Assignment getNullAssignment_6() { return cNullAssignment_6; }
		
		//'unknown'
		public Keyword getNullUnknownKeyword_6_0() { return cNullUnknownKeyword_6_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePathNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Function:
		//	name=PathName '(' parameters=ParameterList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=PathName '(' parameters=ParameterList? ')'
		public Group getGroup() { return cGroup; }
		
		//name=PathName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//PathName
		public RuleCall getNamePathNameParserRuleCall_0_0() { return cNamePathNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CONCEPT_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.CONCEPT_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQualityKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cDECLARABLE_TYPEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///**
		// * Carefully selected keywords to define a concept, which enable automatic definition of
		// * fairly complex semantics and validation against upper ontologies. For now implement
		// * physical properties, value concepts and basic agent types re: DOLCE types.
		// * 
		// * A similar thing could be done for properties
		// * 
		// * This is a lot of keywords, although it's probably good to protect these names from
		// * being used as identifiers in anything.
		// */
		//CONCEPT_TYPE:
		//	'quality' | DECLARABLE_TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//'quality' | DECLARABLE_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'quality'
		public Keyword getQualityKeyword_0() { return cQualityKeyword_0; }
		
		//DECLARABLE_TYPE
		public RuleCall getDECLARABLE_TYPEParserRuleCall_1() { return cDECLARABLE_TYPEParserRuleCall_1; }
	}
	public class DECLARABLE_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.DECLARABLE_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cQuantityKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cConfigurationKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRelationshipKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExtentKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final RuleCall cEXTENSIVE_PROPERTYParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cINTENSIVE_PROPERTYParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAGENT_TYPEParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTRAITParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//DECLARABLE_TYPE:
		//	'class' | 'quantity' | 'configuration' | 'relationship' | 'extent' | EXTENSIVE_PROPERTY | INTENSIVE_PROPERTY |
		//	AGENT_TYPE | TRAIT;
		@Override public ParserRule getRule() { return rule; }
		
		//'class' | 'quantity' | 'configuration' | 'relationship' | 'extent' | EXTENSIVE_PROPERTY | INTENSIVE_PROPERTY |
		//AGENT_TYPE | TRAIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'class'
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//'quantity'
		public Keyword getQuantityKeyword_1() { return cQuantityKeyword_1; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_2() { return cConfigurationKeyword_2; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_3() { return cRelationshipKeyword_3; }
		
		//'extent'
		public Keyword getExtentKeyword_4() { return cExtentKeyword_4; }
		
		//EXTENSIVE_PROPERTY
		public RuleCall getEXTENSIVE_PROPERTYParserRuleCall_5() { return cEXTENSIVE_PROPERTYParserRuleCall_5; }
		
		//INTENSIVE_PROPERTY
		public RuleCall getINTENSIVE_PROPERTYParserRuleCall_6() { return cINTENSIVE_PROPERTYParserRuleCall_6; }
		
		//AGENT_TYPE
		public RuleCall getAGENT_TYPEParserRuleCall_7() { return cAGENT_TYPEParserRuleCall_7; }
		
		//TRAIT
		public RuleCall getTRAITParserRuleCall_8() { return cTRAITParserRuleCall_8; }
	}
	public class TRAITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.TRAIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrderingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIdentityKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRoleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRealmKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDomainKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//TRAIT:
		//	'ordering' | 'attribute' | 'identity' | 'role' | 'realm' | 'domain';
		@Override public ParserRule getRule() { return rule; }
		
		//'ordering' | 'attribute' | 'identity' | 'role' | 'realm' | 'domain'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ordering'
		public Keyword getOrderingKeyword_0() { return cOrderingKeyword_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//'identity'
		public Keyword getIdentityKeyword_2() { return cIdentityKeyword_2; }
		
		//'role'
		public Keyword getRoleKeyword_3() { return cRoleKeyword_3; }
		
		//'realm'
		public Keyword getRealmKeyword_4() { return cRealmKeyword_4; }
		
		//'domain'
		public Keyword getDomainKeyword_5() { return cDomainKeyword_5; }
	}
	public class EXTENSIVE_PROPERTYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.EXTENSIVE_PROPERTY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmountKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMassKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVolumeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWeightKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMoneyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDurationKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAreaKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//EXTENSIVE_PROPERTY:
		//	'amount' | 'length' | 'mass' | 'volume' | 'weight' | 'money' | 'duration' | 'area';
		@Override public ParserRule getRule() { return rule; }
		
		//'amount' | 'length' | 'mass' | 'volume' | 'weight' | 'money' | 'duration' | 'area'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'amount'
		public Keyword getAmountKeyword_0() { return cAmountKeyword_0; }
		
		//'length'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//'mass'
		public Keyword getMassKeyword_2() { return cMassKeyword_2; }
		
		//'volume'
		public Keyword getVolumeKeyword_3() { return cVolumeKeyword_3; }
		
		//'weight'
		public Keyword getWeightKeyword_4() { return cWeightKeyword_4; }
		
		//'money'
		public Keyword getMoneyKeyword_5() { return cMoneyKeyword_5; }
		
		//'duration'
		public Keyword getDurationKeyword_6() { return cDurationKeyword_6; }
		
		//'area'
		public Keyword getAreaKeyword_7() { return cAreaKeyword_7; }
	}
	public class INTENSIVE_PROPERTYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.INTENSIVE_PROPERTY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAccelerationKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEnergyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEntropyKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPriorityKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cElectricPotentialKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cChargeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cResistanceKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cResistivityKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cPressureKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAngleKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVelocityKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cTemperatureKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cViscosityKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//INTENSIVE_PROPERTY:
		//	'acceleration' | 'energy' | 'entropy' | 'priority' | 'electric-potential' | 'charge' | 'resistance' | 'resistivity' |
		//	'pressure' | 'angle' | 'velocity' | 'temperature' | 'viscosity';
		@Override public ParserRule getRule() { return rule; }
		
		//'acceleration' | 'energy' | 'entropy' | 'priority' | 'electric-potential' | 'charge' | 'resistance' | 'resistivity' |
		//'pressure' | 'angle' | 'velocity' | 'temperature' | 'viscosity'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'acceleration'
		public Keyword getAccelerationKeyword_0() { return cAccelerationKeyword_0; }
		
		//'energy'
		public Keyword getEnergyKeyword_1() { return cEnergyKeyword_1; }
		
		//'entropy'
		public Keyword getEntropyKeyword_2() { return cEntropyKeyword_2; }
		
		//'priority'
		public Keyword getPriorityKeyword_3() { return cPriorityKeyword_3; }
		
		//'electric-potential'
		public Keyword getElectricPotentialKeyword_4() { return cElectricPotentialKeyword_4; }
		
		//'charge'
		public Keyword getChargeKeyword_5() { return cChargeKeyword_5; }
		
		//'resistance'
		public Keyword getResistanceKeyword_6() { return cResistanceKeyword_6; }
		
		//'resistivity'
		public Keyword getResistivityKeyword_7() { return cResistivityKeyword_7; }
		
		//'pressure'
		public Keyword getPressureKeyword_8() { return cPressureKeyword_8; }
		
		//'angle'
		public Keyword getAngleKeyword_9() { return cAngleKeyword_9; }
		
		//'velocity'
		public Keyword getVelocityKeyword_10() { return cVelocityKeyword_10; }
		
		//'temperature'
		public Keyword getTemperatureKeyword_11() { return cTemperatureKeyword_11; }
		
		//'viscosity'
		public Keyword getViscosityKeyword_12() { return cViscosityKeyword_12; }
	}
	public class AGENT_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.AGENT_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cThingKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAgentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEventKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//AGENT_TYPE:
		//	'thing' | 'process' | 'agent' | 'event';
		@Override public ParserRule getRule() { return rule; }
		
		//'thing' | 'process' | 'agent' | 'event'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'thing'
		public Keyword getThingKeyword_0() { return cThingKeyword_0; }
		
		//'process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//'agent'
		public Keyword getAgentKeyword_2() { return cAgentKeyword_2; }
		
		//'event'
		public Keyword getEventKeyword_3() { return cEventKeyword_3; }
	}
	public class PROPERTY_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.PROPERTY_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFunctionalKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBidirectionalKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUnidirectionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStructuralKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//PROPERTY_TYPE:
		//	'functional' | 'bidirectional' | 'unidirectional' | 'structural';
		@Override public ParserRule getRule() { return rule; }
		
		//'functional' | 'bidirectional' | 'unidirectional' | 'structural'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'functional'
		public Keyword getFunctionalKeyword_0() { return cFunctionalKeyword_0; }
		
		//'bidirectional'
		public Keyword getBidirectionalKeyword_1() { return cBidirectionalKeyword_1; }
		
		//'unidirectional'
		public Keyword getUnidirectionalKeyword_2() { return cUnidirectionalKeyword_2; }
		
		//'structural'
		public Keyword getStructuralKeyword_3() { return cStructuralKeyword_3; }
	}
	public class SimpleObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.SimpleObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cByKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cByAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cByConceptParserRuleCall_1_0_1_0 = (RuleCall)cByAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cDownKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cToKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cDownToAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final Alternatives cDownToAlternatives_1_1_2_0 = (Alternatives)cDownToAssignment_1_1_2.eContents().get(0);
		private final RuleCall cDownToCAMELCASE_IDTerminalRuleCall_1_1_2_0_0 = (RuleCall)cDownToAlternatives_1_1_2_0.eContents().get(0);
		private final RuleCall cDownToNamespaceIdParserRuleCall_1_1_2_0_1 = (RuleCall)cDownToAlternatives_1_1_2_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cAccordingKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cToKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cAccordingToAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cAccordingToPropertyIdParserRuleCall_1_2_2_0 = (RuleCall)cAccordingToAssignment_1_2_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cUnorderedGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cAlternatives_1_3.eContents().get(0);
		private final Keyword cInKeyword_1_3_0_0 = (Keyword)cGroup_1_3_0.eContents().get(0);
		private final Alternatives cAlternatives_1_3_0_1 = (Alternatives)cGroup_1_3_0.eContents().get(1);
		private final Assignment cUnitAssignment_1_3_0_1_0 = (Assignment)cAlternatives_1_3_0_1.eContents().get(0);
		private final RuleCall cUnitUnitParserRuleCall_1_3_0_1_0_0 = (RuleCall)cUnitAssignment_1_3_0_1_0.eContents().get(0);
		private final Assignment cCurrencyAssignment_1_3_0_1_1 = (Assignment)cAlternatives_1_3_0_1.eContents().get(1);
		private final RuleCall cCurrencyCurrencyParserRuleCall_1_3_0_1_1_0 = (RuleCall)cCurrencyAssignment_1_3_0_1_1.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Keyword cPerKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_3_1_1_0 = (RuleCall)cUnitAssignment_1_3_1_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cUnorderedGroup_1.eContents().get(4);
		private final Assignment cFromAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cFromNumberParserRuleCall_1_4_0_0 = (RuleCall)cFromAssignment_1_4_0.eContents().get(0);
		private final Keyword cToKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cToAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cToNumberParserRuleCall_1_4_2_0 = (RuleCall)cToAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cUnorderedGroup_1.eContents().get(5);
		private final Keyword cNamedKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cNameAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_1_5_1_0 = (RuleCall)cNameAssignment_1_5_1.eContents().get(0);
		
		///*
		// * Observable without the 'as' to use in model declarations where 'as' has
		// * different syntax.
		// */
		//SimpleObservableSemantics ObservableSemantics:
		//	declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))? &
		//	('according' 'to' accordingTo=PropertyId)? & ('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)? & (from=Number
		//	'to' to=Number)? & ('named' name=LOWERCASE_ID)?);
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))? & ('according'
		//'to' accordingTo=PropertyId)? & ('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)? & (from=Number 'to'
		//to=Number)? & ('named' name=LOWERCASE_ID)?)
		public Group getGroup() { return cGroup; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_0_0() { return cDeclarationConceptDeclarationParserRuleCall_0_0; }
		
		//('by' by=Concept)? & ('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))? & ('according' 'to' accordingTo=PropertyId)? &
		//('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)? & (from=Number 'to' to=Number)? & ('named'
		//name=LOWERCASE_ID)?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//('by' by=Concept)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'by'
		public Keyword getByKeyword_1_0_0() { return cByKeyword_1_0_0; }
		
		//by=Concept
		public Assignment getByAssignment_1_0_1() { return cByAssignment_1_0_1; }
		
		//Concept
		public RuleCall getByConceptParserRuleCall_1_0_1_0() { return cByConceptParserRuleCall_1_0_1_0; }
		
		//('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'down'
		public Keyword getDownKeyword_1_1_0() { return cDownKeyword_1_1_0; }
		
		//'to'
		public Keyword getToKeyword_1_1_1() { return cToKeyword_1_1_1; }
		
		//downTo=(CAMELCASE_ID | NamespaceId)
		public Assignment getDownToAssignment_1_1_2() { return cDownToAssignment_1_1_2; }
		
		//(CAMELCASE_ID | NamespaceId)
		public Alternatives getDownToAlternatives_1_1_2_0() { return cDownToAlternatives_1_1_2_0; }
		
		//CAMELCASE_ID
		public RuleCall getDownToCAMELCASE_IDTerminalRuleCall_1_1_2_0_0() { return cDownToCAMELCASE_IDTerminalRuleCall_1_1_2_0_0; }
		
		//NamespaceId
		public RuleCall getDownToNamespaceIdParserRuleCall_1_1_2_0_1() { return cDownToNamespaceIdParserRuleCall_1_1_2_0_1; }
		
		//('according' 'to' accordingTo=PropertyId)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'according'
		public Keyword getAccordingKeyword_1_2_0() { return cAccordingKeyword_1_2_0; }
		
		//'to'
		public Keyword getToKeyword_1_2_1() { return cToKeyword_1_2_1; }
		
		//accordingTo=PropertyId
		public Assignment getAccordingToAssignment_1_2_2() { return cAccordingToAssignment_1_2_2; }
		
		//PropertyId
		public RuleCall getAccordingToPropertyIdParserRuleCall_1_2_2_0() { return cAccordingToPropertyIdParserRuleCall_1_2_2_0; }
		
		//('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)?
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//'in' (unit=Unit | currency=Currency)
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }
		
		//'in'
		public Keyword getInKeyword_1_3_0_0() { return cInKeyword_1_3_0_0; }
		
		//unit=Unit | currency=Currency
		public Alternatives getAlternatives_1_3_0_1() { return cAlternatives_1_3_0_1; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1_3_0_1_0() { return cUnitAssignment_1_3_0_1_0; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_3_0_1_0_0() { return cUnitUnitParserRuleCall_1_3_0_1_0_0; }
		
		//currency=Currency
		public Assignment getCurrencyAssignment_1_3_0_1_1() { return cCurrencyAssignment_1_3_0_1_1; }
		
		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_1_3_0_1_1_0() { return cCurrencyCurrencyParserRuleCall_1_3_0_1_1_0; }
		
		//'per' unit=Unit
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//'per'
		public Keyword getPerKeyword_1_3_1_0() { return cPerKeyword_1_3_1_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1_3_1_1() { return cUnitAssignment_1_3_1_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_3_1_1_0() { return cUnitUnitParserRuleCall_1_3_1_1_0; }
		
		//(from=Number 'to' to=Number)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//from=Number
		public Assignment getFromAssignment_1_4_0() { return cFromAssignment_1_4_0; }
		
		//Number
		public RuleCall getFromNumberParserRuleCall_1_4_0_0() { return cFromNumberParserRuleCall_1_4_0_0; }
		
		//'to'
		public Keyword getToKeyword_1_4_1() { return cToKeyword_1_4_1; }
		
		//to=Number
		public Assignment getToAssignment_1_4_2() { return cToAssignment_1_4_2; }
		
		//Number
		public RuleCall getToNumberParserRuleCall_1_4_2_0() { return cToNumberParserRuleCall_1_4_2_0; }
		
		//('named' name=LOWERCASE_ID)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'named'
		public Keyword getNamedKeyword_1_5_0() { return cNamedKeyword_1_5_0; }
		
		//name=LOWERCASE_ID
		public Assignment getNameAssignment_1_5_1() { return cNameAssignment_1_5_1; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_1_5_1_0() { return cNameLOWERCASE_IDTerminalRuleCall_1_5_1_0; }
	}
	public class NamedObservableSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.NamedObservableSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationConceptDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Keyword cNamedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameLOWERCASE_IDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final RuleCall cNameLOWERCASE_DASHIDTerminalRuleCall_2_0_1 = (RuleCall)cNameAlternatives_2_0.eContents().get(1);
		
		///*
		// * Observable with no quality semantics and mandatory name, for observations. Allows
		// * dashes in name.
		// */
		//NamedObservableSemantics ObservableSemantics:
		//	declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID | LOWERCASE_DASHID);
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID | LOWERCASE_DASHID)
		public Group getGroup() { return cGroup; }
		
		//declaration=ConceptDeclaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//ConceptDeclaration
		public RuleCall getDeclarationConceptDeclarationParserRuleCall_0_0() { return cDeclarationConceptDeclarationParserRuleCall_0_0; }
		
		//'named'
		public Keyword getNamedKeyword_1() { return cNamedKeyword_1; }
		
		//name=(LOWERCASE_ID | LOWERCASE_DASHID)
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(LOWERCASE_ID | LOWERCASE_DASHID)
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//LOWERCASE_ID
		public RuleCall getNameLOWERCASE_IDTerminalRuleCall_2_0_0() { return cNameLOWERCASE_IDTerminalRuleCall_2_0_0; }
		
		//LOWERCASE_DASHID
		public RuleCall getNameLOWERCASE_DASHIDTerminalRuleCall_2_0_1() { return cNameLOWERCASE_DASHIDTerminalRuleCall_2_0_1; }
	}
	public class UnitElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.UnitElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdCAMELCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAlternatives_0_0.eContents().get(0);
		private final RuleCall cIdLOWERCASE_IDTerminalRuleCall_0_0_1 = (RuleCall)cIdAlternatives_0_0.eContents().get(1);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumNumberParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		///**
		// * ---------------------------------------
		// * Unit of measurement re: jsr-108, parseable by Java
		// * TODO implement expression syntax and provide validator
		// * ---------------------------------------
		// */
		//UnitElement:
		//	id=(CAMELCASE_ID | LOWERCASE_ID) | num=Number | '(' unit=Unit ')';
		@Override public ParserRule getRule() { return rule; }
		
		//id=(CAMELCASE_ID | LOWERCASE_ID) | num=Number | '(' unit=Unit ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=(CAMELCASE_ID | LOWERCASE_ID)
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//(CAMELCASE_ID | LOWERCASE_ID)
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }
		
		//CAMELCASE_ID
		public RuleCall getIdCAMELCASE_IDTerminalRuleCall_0_0_0() { return cIdCAMELCASE_IDTerminalRuleCall_0_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getIdLOWERCASE_IDTerminalRuleCall_0_0_1() { return cIdLOWERCASE_IDTerminalRuleCall_0_0_1; }
		
		//num=Number
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//Number
		public RuleCall getNumNumberParserRuleCall_1_0() { return cNumNumberParserRuleCall_1_0; }
		
		//'(' unit=Unit ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_2_1_0() { return cUnitUnitParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class REL_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.REL_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cGtGreaterThanSignKeyword_0_0 = (Keyword)cGtAssignment_0.eContents().get(0);
		private final Assignment cLtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLtLessThanSignKeyword_1_0 = (Keyword)cLtAssignment_1.eContents().get(0);
		private final Assignment cEqAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cEqEqualsSignKeyword_2_0 = (Keyword)cEqAssignment_2.eContents().get(0);
		private final Assignment cNeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNeExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNeAssignment_3.eContents().get(0);
		private final Assignment cLeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cLeLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLeAssignment_4.eContents().get(0);
		private final Assignment cGeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cGeGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGeAssignment_5.eContents().get(0);
		
		//REL_OPERATOR:
		//	gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>=';
		@Override public ParserRule getRule() { return rule; }
		
		//gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gt?='>'
		public Assignment getGtAssignment_0() { return cGtAssignment_0; }
		
		//'>'
		public Keyword getGtGreaterThanSignKeyword_0_0() { return cGtGreaterThanSignKeyword_0_0; }
		
		//lt?='<'
		public Assignment getLtAssignment_1() { return cLtAssignment_1; }
		
		//'<'
		public Keyword getLtLessThanSignKeyword_1_0() { return cLtLessThanSignKeyword_1_0; }
		
		//eq?='='
		public Assignment getEqAssignment_2() { return cEqAssignment_2; }
		
		//'='
		public Keyword getEqEqualsSignKeyword_2_0() { return cEqEqualsSignKeyword_2_0; }
		
		//ne?='!='
		public Assignment getNeAssignment_3() { return cNeAssignment_3; }
		
		//'!='
		public Keyword getNeExclamationMarkEqualsSignKeyword_3_0() { return cNeExclamationMarkEqualsSignKeyword_3_0; }
		
		//le?='<='
		public Assignment getLeAssignment_4() { return cLeAssignment_4; }
		
		//'<='
		public Keyword getLeLessThanSignEqualsSignKeyword_4_0() { return cLeLessThanSignEqualsSignKeyword_4_0; }
		
		//ge?='>='
		public Assignment getGeAssignment_5() { return cGeAssignment_5; }
		
		//'>='
		public Keyword getGeGreaterThanSignEqualsSignKeyword_5_0() { return cGeGreaterThanSignEqualsSignKeyword_5_0; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootUnitElementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cConnectorsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cConnectorsUnitOpEnumRuleCall_2_0_0_0 = (RuleCall)cConnectorsAssignment_2_0_0.eContents().get(0);
		private final Assignment cUnitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitsUnitElementParserRuleCall_2_1_0 = (RuleCall)cUnitsAssignment_2_1.eContents().get(0);
		
		//Unit:
		//	{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*
		public Group getGroup() { return cGroup; }
		
		//{Unit}
		public Action getUnitAction_0() { return cUnitAction_0; }
		
		//root=UnitElement?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//UnitElement
		public RuleCall getRootUnitElementParserRuleCall_1_0() { return cRootUnitElementParserRuleCall_1_0; }
		
		//(=> (connectors+=UnitOp) units+=UnitElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//=> (connectors+=UnitOp)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//connectors+=UnitOp
		public Assignment getConnectorsAssignment_2_0_0() { return cConnectorsAssignment_2_0_0; }
		
		//UnitOp
		public RuleCall getConnectorsUnitOpEnumRuleCall_2_0_0_0() { return cConnectorsUnitOpEnumRuleCall_2_0_0_0; }
		
		//units+=UnitElement
		public Assignment getUnitsAssignment_2_1() { return cUnitsAssignment_2_1; }
		
		//UnitElement
		public RuleCall getUnitsUnitElementParserRuleCall_2_1_0() { return cUnitsUnitElementParserRuleCall_2_1_0; }
	}
	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Currency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdUPPERCASE_IDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cYearAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cYearINTTerminalRuleCall_0_1_1_0 = (RuleCall)cYearAssignment_0_1_1.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cConceptAlternatives_1_0 = (Alternatives)cConceptAssignment_1.eContents().get(0);
		private final RuleCall cConceptCAMELCASE_IDTerminalRuleCall_1_0_0 = (RuleCall)cConceptAlternatives_1_0.eContents().get(0);
		private final RuleCall cConceptNamespaceIdParserRuleCall_1_0_1 = (RuleCall)cConceptAlternatives_1_0.eContents().get(1);
		
		//Currency:
		//	id=UPPERCASE_ID ('@' year=INT) | concept=(CAMELCASE_ID | NamespaceId);
		@Override public ParserRule getRule() { return rule; }
		
		//id=UPPERCASE_ID ('@' year=INT) | concept=(CAMELCASE_ID | NamespaceId)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=UPPERCASE_ID ('@' year=INT)
		public Group getGroup_0() { return cGroup_0; }
		
		//id=UPPERCASE_ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//UPPERCASE_ID
		public RuleCall getIdUPPERCASE_IDTerminalRuleCall_0_0_0() { return cIdUPPERCASE_IDTerminalRuleCall_0_0_0; }
		
		//'@' year=INT
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0_1_0() { return cCommercialAtKeyword_0_1_0; }
		
		//year=INT
		public Assignment getYearAssignment_0_1_1() { return cYearAssignment_0_1_1; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_0_1_1_0() { return cYearINTTerminalRuleCall_0_1_1_0; }
		
		//concept=(CAMELCASE_ID | NamespaceId)
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//(CAMELCASE_ID | NamespaceId)
		public Alternatives getConceptAlternatives_1_0() { return cConceptAlternatives_1_0; }
		
		//CAMELCASE_ID
		public RuleCall getConceptCAMELCASE_IDTerminalRuleCall_1_0_0() { return cConceptCAMELCASE_IDTerminalRuleCall_1_0_0; }
		
		//NamespaceId
		public RuleCall getConceptNamespaceIdParserRuleCall_1_0_1() { return cConceptNamespaceIdParserRuleCall_1_0_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cNegativeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cNegativeHyphenMinusKeyword_0_1_0 = (Keyword)cNegativeAssignment_0_1.eContents().get(0);
		private final Assignment cRealAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRealINTTerminalRuleCall_1_0 = (RuleCall)cRealAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cDecimalAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cDecimalFullStopKeyword_2_0_0_0 = (Keyword)cDecimalAssignment_2_0_0.eContents().get(0);
		private final Assignment cDecimalPartAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDecimalPartINTTerminalRuleCall_2_0_1_0 = (RuleCall)cDecimalPartAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cExponentialAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Alternatives cExponentialAlternatives_3_0_0_0 = (Alternatives)cExponentialAssignment_3_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_3_0_0_0_0 = (Keyword)cExponentialAlternatives_3_0_0_0.eContents().get(0);
		private final Keyword cExponentialEKeyword_3_0_0_0_1 = (Keyword)cExponentialAlternatives_3_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_0_1_0 = (Keyword)cAlternatives_3_0_1.eContents().get(0);
		private final Assignment cExpNegativeAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final Keyword cExpNegativeHyphenMinusKeyword_3_0_1_1_0 = (Keyword)cExpNegativeAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cExpAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cExpINTTerminalRuleCall_3_0_2_0 = (RuleCall)cExpAssignment_3_0_2.eContents().get(0);
		
		//Number:
		//	('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
		//	expNegative?='-')? exp=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
		//expNegative?='-')? exp=INT)?
		public Group getGroup() { return cGroup; }
		
		//('+' | negative?='-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//negative?='-'
		public Assignment getNegativeAssignment_0_1() { return cNegativeAssignment_0_1; }
		
		//'-'
		public Keyword getNegativeHyphenMinusKeyword_0_1_0() { return cNegativeHyphenMinusKeyword_0_1_0; }
		
		//=> real=INT
		public Assignment getRealAssignment_1() { return cRealAssignment_1; }
		
		//INT
		public RuleCall getRealINTTerminalRuleCall_1_0() { return cRealINTTerminalRuleCall_1_0; }
		
		//=> (decimal?='.' decimalPart=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//decimal?='.' decimalPart=INT
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//decimal?='.'
		public Assignment getDecimalAssignment_2_0_0() { return cDecimalAssignment_2_0_0; }
		
		//'.'
		public Keyword getDecimalFullStopKeyword_2_0_0_0() { return cDecimalFullStopKeyword_2_0_0_0; }
		
		//decimalPart=INT
		public Assignment getDecimalPartAssignment_2_0_1() { return cDecimalPartAssignment_2_0_1; }
		
		//INT
		public RuleCall getDecimalPartINTTerminalRuleCall_2_0_1_0() { return cDecimalPartINTTerminalRuleCall_2_0_1_0; }
		
		//=> (exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//exponential?=('e' | 'E') ('+' | expNegative?='-')? exp=INT
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//exponential?=('e' | 'E')
		public Assignment getExponentialAssignment_3_0_0() { return cExponentialAssignment_3_0_0; }
		
		//('e' | 'E')
		public Alternatives getExponentialAlternatives_3_0_0_0() { return cExponentialAlternatives_3_0_0_0; }
		
		//'e'
		public Keyword getExponentialEKeyword_3_0_0_0_0() { return cExponentialEKeyword_3_0_0_0_0; }
		
		//'E'
		public Keyword getExponentialEKeyword_3_0_0_0_1() { return cExponentialEKeyword_3_0_0_0_1; }
		
		//('+' | expNegative?='-')?
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_0_1_0() { return cPlusSignKeyword_3_0_1_0; }
		
		//expNegative?='-'
		public Assignment getExpNegativeAssignment_3_0_1_1() { return cExpNegativeAssignment_3_0_1_1; }
		
		//'-'
		public Keyword getExpNegativeHyphenMinusKeyword_3_0_1_1_0() { return cExpNegativeHyphenMinusKeyword_3_0_1_1_0; }
		
		//exp=INT
		public Assignment getExpAssignment_3_0_2() { return cExpAssignment_3_0_2; }
		
		//INT
		public RuleCall getExpINTTerminalRuleCall_3_0_2_0() { return cExpINTTerminalRuleCall_3_0_2_0; }
	}
	public class PathNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.PathName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PathName:
		//	LOWERCASE_ID ('.' LOWERCASE_ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWERCASE_ID ('.' LOWERCASE_ID)*
		public Group getGroup() { return cGroup; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0() { return cLOWERCASE_IDTerminalRuleCall_0; }
		
		//('.' LOWERCASE_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Path:
		//	LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*
		public Group getGroup() { return cGroup; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0() { return cLOWERCASE_IDTerminalRuleCall_0; }
		
		//(('.' | '/') LOWERCASE_ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.' | '/'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_1_1() { return cLOWERCASE_IDTerminalRuleCall_1_1; }
	}
	public class NamespaceIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.NamespaceId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPathNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCAMELCASE_IDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NamespaceId:
		//	PathName ':' CAMELCASE_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//PathName ':' CAMELCASE_ID
		public Group getGroup() { return cGroup; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0() { return cPathNameParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//CAMELCASE_ID
		public RuleCall getCAMELCASE_IDTerminalRuleCall_2() { return cCAMELCASE_IDTerminalRuleCall_2; }
	}
	public class PropertyIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.PropertyId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPathNameParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cLOWERCASE_DASHIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//PropertyId:
		//	(PathName | LOWERCASE_ID) ':' (LOWERCASE_ID | LOWERCASE_DASHID);
		@Override public ParserRule getRule() { return rule; }
		
		//(PathName | LOWERCASE_ID) ':' (LOWERCASE_ID | LOWERCASE_DASHID)
		public Group getGroup() { return cGroup; }
		
		//PathName | LOWERCASE_ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PathName
		public RuleCall getPathNameParserRuleCall_0_0() { return cPathNameParserRuleCall_0_0; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_0_1() { return cLOWERCASE_IDTerminalRuleCall_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//LOWERCASE_ID | LOWERCASE_DASHID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_2_0() { return cLOWERCASE_IDTerminalRuleCall_2_0; }
		
		//LOWERCASE_DASHID
		public RuleCall getLOWERCASE_DASHIDTerminalRuleCall_2_1() { return cLOWERCASE_DASHIDTerminalRuleCall_2_1; }
	}
	public class VersionNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.VersionNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cLOWERCASE_IDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cUPPERCASE_IDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//VersionNumber:
		//	INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT ('.' INT)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//('.' INT)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//(LOWERCASE_ID | UPPERCASE_ID)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//LOWERCASE_ID
		public RuleCall getLOWERCASE_IDTerminalRuleCall_3_0() { return cLOWERCASE_IDTerminalRuleCall_3_0; }
		
		//UPPERCASE_ID
		public RuleCall getUPPERCASE_IDTerminalRuleCall_3_1() { return cUPPERCASE_IDTerminalRuleCall_3_1; }
	}
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTEXTTextKeyword_0_0 = (Keyword)cTEXTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERIntegerKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLOATFloatKeyword_2_0 = (Keyword)cFLOATEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDOUBLEDoubleKeyword_3_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBOOLEANBooleanKeyword_4_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDATEDateKeyword_5_0 = (Keyword)cDATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPOINTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPOINTPointKeyword_6_0 = (Keyword)cPOINTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLINEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLINELineKeyword_7_0 = (Keyword)cLINEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPOLYGONEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPOLYGONPolygonKeyword_8_0 = (Keyword)cPOLYGONEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum DataType:
		//	TEXT='text' | INTEGER='integer' | FLOAT='float' | DOUBLE='double' | BOOLEAN='boolean' | DATE='date' | POINT='point' |
		//	LINE='line' | POLYGON='polygon';
		public EnumRule getRule() { return rule; }
		
		//TEXT='text' | INTEGER='integer' | FLOAT='float' | DOUBLE='double' | BOOLEAN='boolean' | DATE='date' | POINT='point' |
		//LINE='line' | POLYGON='polygon'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TEXT='text'
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_0() { return cTEXTEnumLiteralDeclaration_0; }
		
		//'text'
		public Keyword getTEXTTextKeyword_0_0() { return cTEXTTextKeyword_0_0; }
		
		//INTEGER='integer'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }
		
		//'integer'
		public Keyword getINTEGERIntegerKeyword_1_0() { return cINTEGERIntegerKeyword_1_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_2() { return cFLOATEnumLiteralDeclaration_2; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_2_0() { return cFLOATFloatKeyword_2_0; }
		
		//DOUBLE='double'
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_3() { return cDOUBLEEnumLiteralDeclaration_3; }
		
		//'double'
		public Keyword getDOUBLEDoubleKeyword_3_0() { return cDOUBLEDoubleKeyword_3_0; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_4() { return cBOOLEANEnumLiteralDeclaration_4; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_4_0() { return cBOOLEANBooleanKeyword_4_0; }
		
		//DATE='date'
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_5() { return cDATEEnumLiteralDeclaration_5; }
		
		//'date'
		public Keyword getDATEDateKeyword_5_0() { return cDATEDateKeyword_5_0; }
		
		//POINT='point'
		public EnumLiteralDeclaration getPOINTEnumLiteralDeclaration_6() { return cPOINTEnumLiteralDeclaration_6; }
		
		//'point'
		public Keyword getPOINTPointKeyword_6_0() { return cPOINTPointKeyword_6_0; }
		
		//LINE='line'
		public EnumLiteralDeclaration getLINEEnumLiteralDeclaration_7() { return cLINEEnumLiteralDeclaration_7; }
		
		//'line'
		public Keyword getLINELineKeyword_7_0() { return cLINELineKeyword_7_0; }
		
		//POLYGON='polygon'
		public EnumLiteralDeclaration getPOLYGONEnumLiteralDeclaration_8() { return cPOLYGONEnumLiteralDeclaration_8; }
		
		//'polygon'
		public Keyword getPOLYGONPolygonKeyword_8_0() { return cPOLYGONPolygonKeyword_8_0; }
	}
	public class UnitOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.UnitOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOVEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOVERSolidusKeyword_0_0 = (Keyword)cOVEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCARETEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCARETCircumflexAccentKeyword_1_0 = (Keyword)cCARETEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTARAsteriskKeyword_2_0 = (Keyword)cSTAREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnitOp:
		//	OVER='/' | CARET='^' | STAR='*';
		public EnumRule getRule() { return rule; }
		
		//OVER='/' | CARET='^' | STAR='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OVER='/'
		public EnumLiteralDeclaration getOVEREnumLiteralDeclaration_0() { return cOVEREnumLiteralDeclaration_0; }
		
		//'/'
		public Keyword getOVERSolidusKeyword_0_0() { return cOVERSolidusKeyword_0_0; }
		
		//CARET='^'
		public EnumLiteralDeclaration getCARETEnumLiteralDeclaration_1() { return cCARETEnumLiteralDeclaration_1; }
		
		//'^'
		public Keyword getCARETCircumflexAccentKeyword_1_0() { return cCARETCircumflexAccentKeyword_1_0; }
		
		//STAR='*'
		public EnumLiteralDeclaration getSTAREnumLiteralDeclaration_2() { return cSTAREnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getSTARAsteriskKeyword_2_0() { return cSTARAsteriskKeyword_2_0; }
	}
	
	private final ObservableSemanticsElements pObservableSemantics;
	private final ConceptDeclarationElements pConceptDeclaration;
	private final ConceptReferenceElements pConceptReference;
	private final OPERATOR_TARGETElements pOPERATOR_TARGET;
	private final ConceptElements pConcept;
	private final ExpressionElements pExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final SimpleConceptDeclarationElements pSimpleConceptDeclaration;
	private final UpperOntologyDefinitionElements pUpperOntologyDefinition;
	private final ConceptStatementElements pConceptStatement;
	private final ConceptStatementBodyElements pConceptStatementBody;
	private final ApplicableTargetElements pApplicableTarget;
	private final ChildConceptElements pChildConcept;
	private final IdentityRequirementElements pIdentityRequirement;
	private final RestrictionStatementElements pRestrictionStatement;
	private final RestrictionDefinitionElements pRestrictionDefinition;
	private final AnnotationElements pAnnotation;
	private final ListElements pList;
	private final LiteralElements pLiteral;
	private final LiteralOrIDElements pLiteralOrID;
	private final LiteralOrIdOrCommaElements pLiteralOrIdOrComma;
	private final MetadataElements pMetadata;
	private final DocumentationElements pDocumentation;
	private final DocSelectorElements pDocSelector;
	private final KeyValuePairElements pKeyValuePair;
	private final ParameterListElements pParameterList;
	private final ValueElements pValue;
	private final FunctionElements pFunction;
	private final TerminalRule tEXPR;
	private final DataTypeElements eDataType;
	private final CONCEPT_TYPEElements pCONCEPT_TYPE;
	private final DECLARABLE_TYPEElements pDECLARABLE_TYPE;
	private final TRAITElements pTRAIT;
	private final EXTENSIVE_PROPERTYElements pEXTENSIVE_PROPERTY;
	private final INTENSIVE_PROPERTYElements pINTENSIVE_PROPERTY;
	private final AGENT_TYPEElements pAGENT_TYPE;
	private final PROPERTY_TYPEElements pPROPERTY_TYPE;
	private final TerminalRule tANNOTATION_ID;
	private final SimpleObservableSemanticsElements pSimpleObservableSemantics;
	private final NamedObservableSemanticsElements pNamedObservableSemantics;
	private final UnitElementElements pUnitElement;
	private final UnitOpElements eUnitOp;
	private final REL_OPERATORElements pREL_OPERATOR;
	private final UnitElements pUnit;
	private final CurrencyElements pCurrency;
	private final NumberElements pNumber;
	private final TerminalRule tLOWERCASE_ID;
	private final TerminalRule tLOWERCASE_DASHID;
	private final PathNameElements pPathName;
	private final PathElements pPath;
	private final TerminalRule tUPPERCASE_ID;
	private final TerminalRule tUPPERCASE_PATH;
	private final TerminalRule tCAMELCASE_ID;
	private final NamespaceIdElements pNamespaceId;
	private final PropertyIdElements pPropertyId;
	private final VersionNumberElements pVersionNumber;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KnowledgeDeclarationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pObservableSemantics = new ObservableSemanticsElements();
		this.pConceptDeclaration = new ConceptDeclarationElements();
		this.pConceptReference = new ConceptReferenceElements();
		this.pOPERATOR_TARGET = new OPERATOR_TARGETElements();
		this.pConcept = new ConceptElements();
		this.pExpression = new ExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pSimpleConceptDeclaration = new SimpleConceptDeclarationElements();
		this.pUpperOntologyDefinition = new UpperOntologyDefinitionElements();
		this.pConceptStatement = new ConceptStatementElements();
		this.pConceptStatementBody = new ConceptStatementBodyElements();
		this.pApplicableTarget = new ApplicableTargetElements();
		this.pChildConcept = new ChildConceptElements();
		this.pIdentityRequirement = new IdentityRequirementElements();
		this.pRestrictionStatement = new RestrictionStatementElements();
		this.pRestrictionDefinition = new RestrictionDefinitionElements();
		this.pAnnotation = new AnnotationElements();
		this.pList = new ListElements();
		this.pLiteral = new LiteralElements();
		this.pLiteralOrID = new LiteralOrIDElements();
		this.pLiteralOrIdOrComma = new LiteralOrIdOrCommaElements();
		this.pMetadata = new MetadataElements();
		this.pDocumentation = new DocumentationElements();
		this.pDocSelector = new DocSelectorElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pParameterList = new ParameterListElements();
		this.pValue = new ValueElements();
		this.pFunction = new FunctionElements();
		this.tEXPR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.EXPR");
		this.eDataType = new DataTypeElements();
		this.pCONCEPT_TYPE = new CONCEPT_TYPEElements();
		this.pDECLARABLE_TYPE = new DECLARABLE_TYPEElements();
		this.pTRAIT = new TRAITElements();
		this.pEXTENSIVE_PROPERTY = new EXTENSIVE_PROPERTYElements();
		this.pINTENSIVE_PROPERTY = new INTENSIVE_PROPERTYElements();
		this.pAGENT_TYPE = new AGENT_TYPEElements();
		this.pPROPERTY_TYPE = new PROPERTY_TYPEElements();
		this.tANNOTATION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.ANNOTATION_ID");
		this.pSimpleObservableSemantics = new SimpleObservableSemanticsElements();
		this.pNamedObservableSemantics = new NamedObservableSemanticsElements();
		this.pUnitElement = new UnitElementElements();
		this.eUnitOp = new UnitOpElements();
		this.pREL_OPERATOR = new REL_OPERATORElements();
		this.pUnit = new UnitElements();
		this.pCurrency = new CurrencyElements();
		this.pNumber = new NumberElements();
		this.tLOWERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.LOWERCASE_ID");
		this.tLOWERCASE_DASHID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.LOWERCASE_DASHID");
		this.pPathName = new PathNameElements();
		this.pPath = new PathElements();
		this.tUPPERCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.UPPERCASE_ID");
		this.tUPPERCASE_PATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.UPPERCASE_PATH");
		this.tCAMELCASE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.integratedmodelling.kim.KnowledgeDeclaration.CAMELCASE_ID");
		this.pNamespaceId = new NamespaceIdElements();
		this.pPropertyId = new PropertyIdElements();
		this.pVersionNumber = new VersionNumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.integratedmodelling.kim.KnowledgeDeclaration".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * Observable semantics is a concept declaration with optional observation semantics and formal name.
	// */
	//ObservableSemantics:
	//	(value=Value 'as')? generic?='any'? declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to'
	//	downTo=(CAMELCASE_ID | NamespaceId))? & ('as' role=Concept)? & ('according' 'to' accordingTo=PropertyId)? & ('in'
	//	(unit=Unit | currency=Currency) | 'per' unit=Unit)? & (optional?='optional' | 'required')? & (from=Number 'to'
	//	to=Number)? & ('named' name=LOWERCASE_ID)?);
	public ObservableSemanticsElements getObservableSemanticsAccess() {
		return pObservableSemantics;
	}
	
	public ParserRule getObservableSemanticsRule() {
		return getObservableSemanticsAccess().getRule();
	}
	
	//ConceptDeclaration:
	//	name=STRING? main+=Concept+ (('of' inherency=SimpleConceptDeclaration)? & ('for'
	//	motivation=SimpleConceptDeclaration)? & ('with' compresent=SimpleConceptDeclaration)? & ('caused' 'by'
	//	causant=SimpleConceptDeclaration)? & ('adjacent' 'to' adjacent=SimpleConceptDeclaration)? & ('contained' 'in'
	//	container=SimpleConceptDeclaration)? & ('containing' contained=SimpleConceptDeclaration)? & ('causing'
	//	caused=SimpleConceptDeclaration)?) ('within' context=SimpleConceptDeclaration)?;
	public ConceptDeclarationElements getConceptDeclarationAccess() {
		return pConceptDeclaration;
	}
	
	public ParserRule getConceptDeclarationRule() {
		return getConceptDeclarationAccess().getRule();
	}
	
	//ConceptReference:
	//	name=CAMELCASE_ID | name=NamespaceId | templateType=('${' | '#{') (name='context' (type=CONCEPT_TYPE | 'extends'
	//	extends=Concept) | name='inherent' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='compresent'
	//	(type=CONCEPT_TYPE | 'extends' extends=Concept) | name='adjacent' (type=CONCEPT_TYPE | 'extends' extends=Concept) |
	//	name='container' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='contained' (type=CONCEPT_TYPE | 'extends'
	//	extends=Concept) | name='purpose' (type=CONCEPT_TYPE | 'extends' extends=Concept) | name='causant' (type=CONCEPT_TYPE
	//	| 'extends' extends=Concept) | name='caused' (type=CONCEPT_TYPE | 'extends' extends=Concept)) template?='}';
	public ConceptReferenceElements getConceptReferenceAccess() {
		return pConceptReference;
	}
	
	public ParserRule getConceptReferenceRule() {
		return getConceptReferenceAccess().getRule();
	}
	
	//OPERATOR_TARGET:
	//	'context' | 'inherent' | 'compresent' | 'adjacent' | 'container' | 'contained' | 'purpose' | 'causant' | 'caused';
	public OPERATOR_TARGETElements getOPERATOR_TARGETAccess() {
		return pOPERATOR_TARGET;
	}
	
	public ParserRule getOPERATOR_TARGETRule() {
		return getOPERATOR_TARGETAccess().getRule();
	}
	
	//Concept:
	//	negated?=('not' | 'no')? name=ConceptReference ('identified' 'as' (stringIdentifier=(ID | STRING) |
	//	intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))? | presence?='presence' 'of'
	//	concept=SimpleConceptDeclaration | count?='count' 'of' concept=SimpleConceptDeclaration | distance?='distance' ('to'
	//	| 'from') concept=SimpleConceptDeclaration | probability?='probability' 'of' concept=SimpleConceptDeclaration |
	//	assessment?='assessment' 'of' concept=SimpleConceptDeclaration | uncertainty?='uncertainty' 'of'
	//	concept=SimpleConceptDeclaration | type?='type' 'of' concept=SimpleConceptDeclaration |
	//	observability?='observability' 'of' concept=SimpleConceptDeclaration | proportion?='proportion' 'of'
	//	concept=SimpleConceptDeclaration (=> 'in' other=SimpleConceptDeclaration)? | ratio?='ratio' 'of'
	//	concept=SimpleConceptDeclaration => 'to' other=SimpleConceptDeclaration | value?='value' 'of'
	//	concept=SimpleConceptDeclaration (=> 'over' other=SimpleConceptDeclaration)? | occurrence?='occurrence' 'of'
	//	concept=SimpleConceptDeclaration | '(' declaration=Expression ')';
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Expression ConceptDeclaration:
	//	Term;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Term ConceptDeclaration:
	//	Factor (operators+='or' operands+=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor ConceptDeclaration:
	//	ConceptDeclaration (operators+=('and' | 'follows') operands+=Term)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	///*
	// * Declaration without inherency and context, used in Concept to ensure that
	// * the 'within' and 'of' remain outer-level unless parenthesesized.
	// */
	//SimpleConceptDeclaration ConceptDeclaration:
	//	name=STRING? main+=Concept+;
	public SimpleConceptDeclarationElements getSimpleConceptDeclarationAccess() {
		return pSimpleConceptDeclaration;
	}
	
	public ParserRule getSimpleConceptDeclarationRule() {
		return getSimpleConceptDeclarationAccess().getRule();
	}
	
	///*
	// * statement to connect specialized type or target of relationship to upper ontology
	// */ UpperOntologyDefinition:
	//	'model' ((agentSpecifier=('deliberative' | 'interactive' | 'reactive') concept='agent' |
	//	(propertySpecifiers+=PROPERTY_TYPE propertySpecifiers+=PROPERTY_TYPE* concept='relationship')?) 'using'
	//	coreconcept=(NamespaceId | PropertyId) | operand=OPERATOR_TARGET 'using' property=(PropertyId | NamespaceId));
	public UpperOntologyDefinitionElements getUpperOntologyDefinitionAccess() {
		return pUpperOntologyDefinition;
	}
	
	public ParserRule getUpperOntologyDefinitionRule() {
		return getUpperOntologyDefinitionAccess().getRule();
	}
	
	//ConceptStatement:
	//	annotations+=Annotation* (abstract?='abstract'? & deniable?='deniable'? & subjective?='subjective'? &
	//	(agentSpecifier=('deliberative' | 'interactive' | 'reactive') | propertySpecifiers+=PROPERTY_TYPE
	//	propertySpecifiers+=PROPERTY_TYPE*)?) concept=CONCEPT_TYPE body=ConceptStatementBody ('named' name=NamespaceId)?;
	public ConceptStatementElements getConceptStatementAccess() {
		return pConceptStatement;
	}
	
	public ParserRule getConceptStatementRule() {
		return getConceptStatementAccess().getRule();
	}
	
	///*
	// * ------------------------------------------------------------------------------------------
	// * Ontology language - basically a more intuitive and imperative OW2L/Manchester syntax. Does not
	// * cover all of OWL2 yet, but should be plenty for modeling. 
	// * 
	// * deniable is for traits only. If a trait is deniable, 'not Trait' is a trait (of not being Trait).
	// * if not deniable, 'not Trait' means being any of the other concrete traits; if there is only one 
	// * concrete trait it's an error. If there are two, it means being the other.
	// * ------------------------------------------------------------------------------------------
	// */
	//ConceptStatementBody:
	//	annotations+=Annotation* abstract?='abstract'? (root?='root' | name=CAMELCASE_ID ('identified' 'as'
	//	(stringIdentifier=(ID | STRING) | intIdentifier=INT) 'by' authority=(UPPERCASE_ID | UPPERCASE_PATH))?)
	//	(docstring=STRING? & (('is' coreConcept?='core'? | alias?='equals') (nothing?='nothing' | parents+=ConceptDeclaration
	//	(connectors+=(',' | 'or' | 'and') parents+=ConceptDeclaration)*))? & ('exposes'
	//	contextualizedTraits+=ObservableSemantics (',' contextualizedTraits+=ObservableSemantics)* | specific?='exposing'
	//	contextualizesTraits+=ConceptDeclaration (',' contextualizesTraits+=ConceptDeclaration)*)? & ('defines' ('authority'
	//	definedAuthority=UPPERCASE_PATH | upperConcept=Concept))? & ('requires' requirements+=IdentityRequirement (','
	//	requirements+=IdentityRequirement)*)? & ('describes' describedQuality=ConceptDeclaration)? & ('increases' 'with'
	//	describedProportionality=ConceptDeclaration)? & ('decreases' 'with'
	//	describedInverseProportionalityQuality=ConceptDeclaration)? & ('marks' describedNonzeroQuality=ConceptDeclaration)? &
	//	('classifies' classifiesQuality=ConceptDeclaration)? & ('discretizes' discretizesQuality=ConceptDeclaration)? &
	//	('inherits' actuallyInheritedTraits+=ConceptDeclaration (',' actuallyInheritedTraits+=ConceptDeclaration)*)? & ('has'
	//	'role' roles+=ConceptDeclaration (',' roles+=ConceptDeclaration)* ('for' targetObservables+=ConceptDeclaration (','
	//	targetObservables+=ConceptDeclaration)*)? ('in' restrictedObservables+=ConceptDeclaration (','
	//	restrictedObservables+=ConceptDeclaration)*))? & ('confers' conferredTraits+=ConceptDeclaration (','
	//	conferredTraits+=ConceptDeclaration)* ('to' conferredTargets+=ConceptDeclaration (','
	//	conferredTargets+=ConceptDeclaration)*)?)? & (('part' | constituent?='constituent' | constitutes?='consists')
	//	partOf?='of' whole=ConceptDeclaration)? & ('creates' creates+=ConceptDeclaration (',' creates+=ConceptDeclaration)*)?
	//	& ('applies' 'to' traitTargets+=ApplicableTarget (',' traitTargets+=ApplicableTarget)*)? & ('links'
	//	domains+=SimpleConceptDeclaration => 'to' ranges+=SimpleConceptDeclaration (',' domains+=SimpleConceptDeclaration =>
	//	'to' ranges+=SimpleConceptDeclaration)*)? & ('inverse' 'of' inverse=ConceptDeclaration)? & ('affects'
	//	qualitiesAffected+=ConceptDeclaration (',' qualitiesAffected+=ConceptDeclaration)*)? & ('has' disjoint?='disjoint'?
	//	'children' children+=ChildConcept (',' children+=ChildConcept)*)? & restrictions+=RestrictionStatement* & ('with'
	//	'metadata' metadata=Metadata)?);
	public ConceptStatementBodyElements getConceptStatementBodyAccess() {
		return pConceptStatementBody;
	}
	
	public ParserRule getConceptStatementBodyRule() {
		return getConceptStatementBodyAccess().getRule();
	}
	
	//ApplicableTarget:
	//	target=ConceptDeclaration ('between' linkFrom=ConceptDeclaration 'and' linkTo=ConceptDeclaration)?;
	public ApplicableTargetElements getApplicableTargetAccess() {
		return pApplicableTarget;
	}
	
	public ParserRule getApplicableTargetRule() {
		return getApplicableTargetAccess().getRule();
	}
	
	//ChildConcept ConceptStatementBody:
	//	abstract?='abstract'? name=CAMELCASE_ID | '(' ConceptStatementBody ')';
	public ChildConceptElements getChildConceptAccess() {
		return pChildConcept;
	}
	
	public ParserRule getChildConceptRule() {
		return getChildConceptAccess().getRule();
	}
	
	//IdentityRequirement:
	//	('identity' | 'attribute' | 'realm' | 'extent') identities+=ConceptDeclaration (',' identities+=ConceptDeclaration)*
	//	| 'authority' authority=(UPPERCASE_ID | UPPERCASE_PATH);
	public IdentityRequirementElements getIdentityRequirementAccess() {
		return pIdentityRequirement;
	}
	
	public ParserRule getIdentityRequirementRule() {
		return getIdentityRequirementAccess().getRule();
	}
	
	///*
	// * Ultra-simple restriction statements:
	// *
	// * uses [only] CCC [for PPP]; // PPP can be a property or a concept
	// * uses at [least|most] 1 CCC [for PPP]
	// * uses exactly 1 CCC [for PPP]
	// * uses 120 for PPP // data property
	// *
	// * uses = has; requires = functional has; contains = part-of (contextually resolved). implies is only for roles.
	// * 
	// * if PPP is a concept (much more intuitive), must be restricting a known one and hasPPP is created (or used).
	// * 
	// * Also hosts the 'uses authority' restriction which is only accepted by domains.
	// * 
	// */
	//RestrictionStatement:
	//	relType=('uses' | 'has' | 'contains' | 'implies') definitions+=RestrictionDefinition (','
	//	definitions+=RestrictionDefinition)* | 'uses' 'authority' authorities+=(UPPERCASE_ID | UPPERCASE_PATH) (=> ','
	//	authorities+=(UPPERCASE_ID | UPPERCASE_PATH))* | 'uses' value=Literal literal?='for' subject=(CAMELCASE_ID |
	//	NamespaceId);
	public RestrictionStatementElements getRestrictionStatementAccess() {
		return pRestrictionStatement;
	}
	
	public ParserRule getRestrictionStatementRule() {
		return getRestrictionStatementAccess().getRule();
	}
	
	//RestrictionDefinition:
	//	(only?='only' | none?='no' | (exactly?='exactly' | 'at' atLeast?='least' | 'at' atMost?='most') howmany=INT)?
	//	(source=ConceptDeclaration | dataType=DataType) ('inheriting' traitType=ConceptDeclaration)? (('for' | 'as')
	//	subject=ConceptDeclaration)? | value=Literal ('to' maxValue=Number)? 'for' property=PropertyId;
	public RestrictionDefinitionElements getRestrictionDefinitionAccess() {
		return pRestrictionDefinition;
	}
	
	public ParserRule getRestrictionDefinitionRule() {
		return getRestrictionDefinitionAccess().getRule();
	}
	
	//Annotation:
	//	name=ANNOTATION_ID ('(' parameters=ParameterList? ')')?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//List:
	//	{List} '(' contents+=Value* ')';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Literal:
	//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false');
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//LiteralOrID Literal:
	//	number=Number | string=STRING | boolean=('true' | 'false') | id=ID;
	public LiteralOrIDElements getLiteralOrIDAccess() {
		return pLiteralOrID;
	}
	
	public ParserRule getLiteralOrIDRule() {
		return getLiteralOrIDAccess().getRule();
	}
	
	//LiteralOrIdOrComma Literal:
	//	from=Number => 'to' => to=Number | number=Number | string=STRING | boolean=('true' | 'false') | id=ID | comma?=',';
	public LiteralOrIdOrCommaElements getLiteralOrIdOrCommaAccess() {
		return pLiteralOrIdOrComma;
	}
	
	public ParserRule getLiteralOrIdOrCommaRule() {
		return getLiteralOrIdOrCommaAccess().getRule();
	}
	
	//Metadata:
	//	{Metadata} '{' (ids+=(LOWERCASE_ID | PropertyId) values+=(LiteralOrID | Metadata | List))* '}';
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}
	
	//Documentation:
	//	{Metadata} '{' (selectors+=DocSelector values+=LiteralOrID)* '}';
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//DocSelector:
	//	id=PropertyId | 'on' (definition?='definition' | initialization?='initialization' | termination?='termination' |
	//	transition?='transition');
	public DocSelectorElements getDocSelectorAccess() {
		return pDocSelector;
	}
	
	public ParserRule getDocSelectorRule() {
		return getDocSelectorAccess().getRule();
	}
	
	//KeyValuePair:
	//	name=(LOWERCASE_ID | PathName) (interactive?='?=' | '=') value=Value;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//ParameterList:
	//	singleValue=Value | pairs+=KeyValuePair (=> ',' pairs+=KeyValuePair)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Value:
	//	literal=LiteralOrIdOrComma | function=Function | expr=EXPR | id=(LOWERCASE_ID | UPPERCASE_ID | CAMELCASE_ID) |
	//	list=List | map=Metadata | null?='unknown';
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Function:
	//	name=PathName '(' parameters=ParameterList? ')';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//terminal EXPR:
	//	'[' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | ']' | '\\') | !('\\' | ']'))* ']';
	public TerminalRule getEXPRRule() {
		return tEXPR;
	}
	
	//enum DataType:
	//	TEXT='text' | INTEGER='integer' | FLOAT='float' | DOUBLE='double' | BOOLEAN='boolean' | DATE='date' | POINT='point' |
	//	LINE='line' | POLYGON='polygon';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	///**
	// * Carefully selected keywords to define a concept, which enable automatic definition of
	// * fairly complex semantics and validation against upper ontologies. For now implement
	// * physical properties, value concepts and basic agent types re: DOLCE types.
	// * 
	// * A similar thing could be done for properties
	// * 
	// * This is a lot of keywords, although it's probably good to protect these names from
	// * being used as identifiers in anything.
	// */
	//CONCEPT_TYPE:
	//	'quality' | DECLARABLE_TYPE;
	public CONCEPT_TYPEElements getCONCEPT_TYPEAccess() {
		return pCONCEPT_TYPE;
	}
	
	public ParserRule getCONCEPT_TYPERule() {
		return getCONCEPT_TYPEAccess().getRule();
	}
	
	//DECLARABLE_TYPE:
	//	'class' | 'quantity' | 'configuration' | 'relationship' | 'extent' | EXTENSIVE_PROPERTY | INTENSIVE_PROPERTY |
	//	AGENT_TYPE | TRAIT;
	public DECLARABLE_TYPEElements getDECLARABLE_TYPEAccess() {
		return pDECLARABLE_TYPE;
	}
	
	public ParserRule getDECLARABLE_TYPERule() {
		return getDECLARABLE_TYPEAccess().getRule();
	}
	
	//TRAIT:
	//	'ordering' | 'attribute' | 'identity' | 'role' | 'realm' | 'domain';
	public TRAITElements getTRAITAccess() {
		return pTRAIT;
	}
	
	public ParserRule getTRAITRule() {
		return getTRAITAccess().getRule();
	}
	
	//EXTENSIVE_PROPERTY:
	//	'amount' | 'length' | 'mass' | 'volume' | 'weight' | 'money' | 'duration' | 'area';
	public EXTENSIVE_PROPERTYElements getEXTENSIVE_PROPERTYAccess() {
		return pEXTENSIVE_PROPERTY;
	}
	
	public ParserRule getEXTENSIVE_PROPERTYRule() {
		return getEXTENSIVE_PROPERTYAccess().getRule();
	}
	
	//INTENSIVE_PROPERTY:
	//	'acceleration' | 'energy' | 'entropy' | 'priority' | 'electric-potential' | 'charge' | 'resistance' | 'resistivity' |
	//	'pressure' | 'angle' | 'velocity' | 'temperature' | 'viscosity';
	public INTENSIVE_PROPERTYElements getINTENSIVE_PROPERTYAccess() {
		return pINTENSIVE_PROPERTY;
	}
	
	public ParserRule getINTENSIVE_PROPERTYRule() {
		return getINTENSIVE_PROPERTYAccess().getRule();
	}
	
	//AGENT_TYPE:
	//	'thing' | 'process' | 'agent' | 'event';
	public AGENT_TYPEElements getAGENT_TYPEAccess() {
		return pAGENT_TYPE;
	}
	
	public ParserRule getAGENT_TYPERule() {
		return getAGENT_TYPEAccess().getRule();
	}
	
	//PROPERTY_TYPE:
	//	'functional' | 'bidirectional' | 'unidirectional' | 'structural';
	public PROPERTY_TYPEElements getPROPERTY_TYPEAccess() {
		return pPROPERTY_TYPE;
	}
	
	public ParserRule getPROPERTY_TYPERule() {
		return getPROPERTY_TYPEAccess().getRule();
	}
	
	//terminal ANNOTATION_ID:
	//	'@' LOWERCASE_ID;
	public TerminalRule getANNOTATION_IDRule() {
		return tANNOTATION_ID;
	}
	
	///*
	// * Observable without the 'as' to use in model declarations where 'as' has
	// * different syntax.
	// */
	//SimpleObservableSemantics ObservableSemantics:
	//	declaration=ConceptDeclaration (('by' by=Concept)? & ('down' 'to' downTo=(CAMELCASE_ID | NamespaceId))? &
	//	('according' 'to' accordingTo=PropertyId)? & ('in' (unit=Unit | currency=Currency) | 'per' unit=Unit)? & (from=Number
	//	'to' to=Number)? & ('named' name=LOWERCASE_ID)?);
	public SimpleObservableSemanticsElements getSimpleObservableSemanticsAccess() {
		return pSimpleObservableSemantics;
	}
	
	public ParserRule getSimpleObservableSemanticsRule() {
		return getSimpleObservableSemanticsAccess().getRule();
	}
	
	///*
	// * Observable with no quality semantics and mandatory name, for observations. Allows
	// * dashes in name.
	// */
	//NamedObservableSemantics ObservableSemantics:
	//	declaration=ConceptDeclaration 'named' name=(LOWERCASE_ID | LOWERCASE_DASHID);
	public NamedObservableSemanticsElements getNamedObservableSemanticsAccess() {
		return pNamedObservableSemantics;
	}
	
	public ParserRule getNamedObservableSemanticsRule() {
		return getNamedObservableSemanticsAccess().getRule();
	}
	
	///**
	// * ---------------------------------------
	// * Unit of measurement re: jsr-108, parseable by Java
	// * TODO implement expression syntax and provide validator
	// * ---------------------------------------
	// */
	//UnitElement:
	//	id=(CAMELCASE_ID | LOWERCASE_ID) | num=Number | '(' unit=Unit ')';
	public UnitElementElements getUnitElementAccess() {
		return pUnitElement;
	}
	
	public ParserRule getUnitElementRule() {
		return getUnitElementAccess().getRule();
	}
	
	//enum UnitOp:
	//	OVER='/' | CARET='^' | STAR='*';
	public UnitOpElements getUnitOpAccess() {
		return eUnitOp;
	}
	
	public EnumRule getUnitOpRule() {
		return getUnitOpAccess().getRule();
	}
	
	//REL_OPERATOR:
	//	gt?='>' | lt?='<' | eq?='=' | ne?='!=' | le?='<=' | ge?='>=';
	public REL_OPERATORElements getREL_OPERATORAccess() {
		return pREL_OPERATOR;
	}
	
	public ParserRule getREL_OPERATORRule() {
		return getREL_OPERATORAccess().getRule();
	}
	
	//Unit:
	//	{Unit} root=UnitElement? (=> (connectors+=UnitOp) units+=UnitElement)*;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//Currency:
	//	id=UPPERCASE_ID ('@' year=INT) | concept=(CAMELCASE_ID | NamespaceId);
	public CurrencyElements getCurrencyAccess() {
		return pCurrency;
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}
	
	//Number:
	//	('+' | negative?='-')? => real=INT => (decimal?='.' decimalPart=INT)? => (exponential?=('e' | 'E') ('+' |
	//	expNegative?='-')? exp=INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal LOWERCASE_ID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getLOWERCASE_IDRule() {
		return tLOWERCASE_ID;
	}
	
	//terminal LOWERCASE_DASHID:
	//	'a'..'z' ('a'..'z' | '0'..'9' | '-')*;
	public TerminalRule getLOWERCASE_DASHIDRule() {
		return tLOWERCASE_DASHID;
	}
	
	//PathName:
	//	LOWERCASE_ID ('.' LOWERCASE_ID)*;
	public PathNameElements getPathNameAccess() {
		return pPathName;
	}
	
	public ParserRule getPathNameRule() {
		return getPathNameAccess().getRule();
	}
	
	//Path:
	//	LOWERCASE_ID (('.' | '/') LOWERCASE_ID)*;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//terminal UPPERCASE_ID:
	//	'A'..'Z' 'A'..'Z'*;
	public TerminalRule getUPPERCASE_IDRule() {
		return tUPPERCASE_ID;
	}
	
	//terminal UPPERCASE_PATH:
	//	UPPERCASE_ID ('.' UPPERCASE_ID)*;
	public TerminalRule getUPPERCASE_PATHRule() {
		return tUPPERCASE_PATH;
	}
	
	//terminal CAMELCASE_ID:
	//	'A'..'Z' ('A'..'z' | '0'..'9')*;
	public TerminalRule getCAMELCASE_IDRule() {
		return tCAMELCASE_ID;
	}
	
	//NamespaceId:
	//	PathName ':' CAMELCASE_ID;
	public NamespaceIdElements getNamespaceIdAccess() {
		return pNamespaceId;
	}
	
	public ParserRule getNamespaceIdRule() {
		return getNamespaceIdAccess().getRule();
	}
	
	//PropertyId:
	//	(PathName | LOWERCASE_ID) ':' (LOWERCASE_ID | LOWERCASE_DASHID);
	public PropertyIdElements getPropertyIdAccess() {
		return pPropertyId;
	}
	
	public ParserRule getPropertyIdRule() {
		return getPropertyIdAccess().getRule();
	}
	
	//VersionNumber:
	//	INT ('.' INT ('.' INT)?)? '-'? (LOWERCASE_ID | UPPERCASE_ID)?;
	public VersionNumberElements getVersionNumberAccess() {
		return pVersionNumber;
	}
	
	public ParserRule getVersionNumberRule() {
		return getVersionNumberAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
