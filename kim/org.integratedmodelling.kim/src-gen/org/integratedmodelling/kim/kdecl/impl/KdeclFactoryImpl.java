/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.kdecl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.integratedmodelling.kim.kdecl.Annotation;
import org.integratedmodelling.kim.kdecl.ApplicableTarget;
import org.integratedmodelling.kim.kdecl.Concept;
import org.integratedmodelling.kim.kdecl.ConceptDeclaration;
import org.integratedmodelling.kim.kdecl.ConceptReference;
import org.integratedmodelling.kim.kdecl.ConceptStatement;
import org.integratedmodelling.kim.kdecl.ConceptStatementBody;
import org.integratedmodelling.kim.kdecl.Currency;
import org.integratedmodelling.kim.kdecl.DataType;
import org.integratedmodelling.kim.kdecl.DocSelector;
import org.integratedmodelling.kim.kdecl.Documentation;
import org.integratedmodelling.kim.kdecl.Function;
import org.integratedmodelling.kim.kdecl.IdentityRequirement;
import org.integratedmodelling.kim.kdecl.KdeclFactory;
import org.integratedmodelling.kim.kdecl.KdeclPackage;
import org.integratedmodelling.kim.kdecl.KeyValuePair;
import org.integratedmodelling.kim.kdecl.List;
import org.integratedmodelling.kim.kdecl.Literal;
import org.integratedmodelling.kim.kdecl.Metadata;
import org.integratedmodelling.kim.kdecl.ObservableSemantics;
import org.integratedmodelling.kim.kdecl.ParameterList;
import org.integratedmodelling.kim.kdecl.REL_OPERATOR;
import org.integratedmodelling.kim.kdecl.RestrictionDefinition;
import org.integratedmodelling.kim.kdecl.RestrictionStatement;
import org.integratedmodelling.kim.kdecl.Unit;
import org.integratedmodelling.kim.kdecl.UnitElement;
import org.integratedmodelling.kim.kdecl.UnitOp;
import org.integratedmodelling.kim.kdecl.UpperOntologyDefinition;
import org.integratedmodelling.kim.kdecl.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class KdeclFactoryImpl extends EFactoryImpl implements KdeclFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static KdeclFactory init()
  {
    try
    {
      KdeclFactory theKdeclFactory = (KdeclFactory)EPackage.Registry.INSTANCE.getEFactory(KdeclPackage.eNS_URI);
      if (theKdeclFactory != null)
      {
        return theKdeclFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new KdeclFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KdeclFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case KdeclPackage.OBSERVABLE_SEMANTICS: return createObservableSemantics();
      case KdeclPackage.CONCEPT_DECLARATION: return createConceptDeclaration();
      case KdeclPackage.CONCEPT_REFERENCE: return createConceptReference();
      case KdeclPackage.CONCEPT: return createConcept();
      case KdeclPackage.UPPER_ONTOLOGY_DEFINITION: return createUpperOntologyDefinition();
      case KdeclPackage.CONCEPT_STATEMENT: return createConceptStatement();
      case KdeclPackage.CONCEPT_STATEMENT_BODY: return createConceptStatementBody();
      case KdeclPackage.APPLICABLE_TARGET: return createApplicableTarget();
      case KdeclPackage.IDENTITY_REQUIREMENT: return createIdentityRequirement();
      case KdeclPackage.RESTRICTION_STATEMENT: return createRestrictionStatement();
      case KdeclPackage.RESTRICTION_DEFINITION: return createRestrictionDefinition();
      case KdeclPackage.ANNOTATION: return createAnnotation();
      case KdeclPackage.LIST: return createList();
      case KdeclPackage.LITERAL: return createLiteral();
      case KdeclPackage.METADATA: return createMetadata();
      case KdeclPackage.DOCUMENTATION: return createDocumentation();
      case KdeclPackage.DOC_SELECTOR: return createDocSelector();
      case KdeclPackage.KEY_VALUE_PAIR: return createKeyValuePair();
      case KdeclPackage.PARAMETER_LIST: return createParameterList();
      case KdeclPackage.VALUE: return createValue();
      case KdeclPackage.FUNCTION: return createFunction();
      case KdeclPackage.UNIT_ELEMENT: return createUnitElement();
      case KdeclPackage.REL_OPERATOR: return createREL_OPERATOR();
      case KdeclPackage.UNIT: return createUnit();
      case KdeclPackage.CURRENCY: return createCurrency();
      case KdeclPackage.NUMBER: return createNumber();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case KdeclPackage.DATA_TYPE:
        return createDataTypeFromString(eDataType, initialValue);
      case KdeclPackage.UNIT_OP:
        return createUnitOpFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case KdeclPackage.DATA_TYPE:
        return convertDataTypeToString(eDataType, instanceValue);
      case KdeclPackage.UNIT_OP:
        return convertUnitOpToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObservableSemantics createObservableSemantics()
  {
    ObservableSemanticsImpl observableSemantics = new ObservableSemanticsImpl();
    return observableSemantics;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptDeclaration createConceptDeclaration()
  {
    ConceptDeclarationImpl conceptDeclaration = new ConceptDeclarationImpl();
    return conceptDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptReference createConceptReference()
  {
    ConceptReferenceImpl conceptReference = new ConceptReferenceImpl();
    return conceptReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept createConcept()
  {
    ConceptImpl concept = new ConceptImpl();
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpperOntologyDefinition createUpperOntologyDefinition()
  {
    UpperOntologyDefinitionImpl upperOntologyDefinition = new UpperOntologyDefinitionImpl();
    return upperOntologyDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptStatement createConceptStatement()
  {
    ConceptStatementImpl conceptStatement = new ConceptStatementImpl();
    return conceptStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptStatementBody createConceptStatementBody()
  {
    ConceptStatementBodyImpl conceptStatementBody = new ConceptStatementBodyImpl();
    return conceptStatementBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ApplicableTarget createApplicableTarget()
  {
    ApplicableTargetImpl applicableTarget = new ApplicableTargetImpl();
    return applicableTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdentityRequirement createIdentityRequirement()
  {
    IdentityRequirementImpl identityRequirement = new IdentityRequirementImpl();
    return identityRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestrictionStatement createRestrictionStatement()
  {
    RestrictionStatementImpl restrictionStatement = new RestrictionStatementImpl();
    return restrictionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RestrictionDefinition createRestrictionDefinition()
  {
    RestrictionDefinitionImpl restrictionDefinition = new RestrictionDefinitionImpl();
    return restrictionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Annotation createAnnotation()
  {
    AnnotationImpl annotation = new AnnotationImpl();
    return annotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Metadata createMetadata()
  {
    MetadataImpl metadata = new MetadataImpl();
    return metadata;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Documentation createDocumentation()
  {
    DocumentationImpl documentation = new DocumentationImpl();
    return documentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DocSelector createDocSelector()
  {
    DocSelectorImpl docSelector = new DocSelectorImpl();
    return docSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KeyValuePair createKeyValuePair()
  {
    KeyValuePairImpl keyValuePair = new KeyValuePairImpl();
    return keyValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnitElement createUnitElement()
  {
    UnitElementImpl unitElement = new UnitElementImpl();
    return unitElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public REL_OPERATOR createREL_OPERATOR()
  {
    REL_OPERATORImpl reL_OPERATOR = new REL_OPERATORImpl();
    return reL_OPERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Unit createUnit()
  {
    UnitImpl unit = new UnitImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Currency createCurrency()
  {
    CurrencyImpl currency = new CurrencyImpl();
    return currency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.integratedmodelling.kim.kdecl.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataTypeFromString(EDataType eDataType, String initialValue)
  {
    DataType result = DataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnitOp createUnitOpFromString(EDataType eDataType, String initialValue)
  {
    UnitOp result = UnitOp.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnitOpToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KdeclPackage getKdeclPackage()
  {
    return (KdeclPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static KdeclPackage getPackage()
  {
    return KdeclPackage.eINSTANCE;
  }

} //KdeclFactoryImpl
