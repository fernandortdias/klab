/**
 * Copyright (C) 2009-2016 integratedmodelling.org
 * generated by Xtext 2.12.0
 */
package org.integratedmodelling.kim.kdecl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.integratedmodelling.kim.kdecl.Concept;
import org.integratedmodelling.kim.kdecl.ConceptDeclaration;
import org.integratedmodelling.kim.kdecl.ConceptReference;
import org.integratedmodelling.kim.kdecl.KdeclPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concept</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isNegated <em>Negated</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#getStringIdentifier <em>String Identifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#getIntIdentifier <em>Int Identifier</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#getAuthority <em>Authority</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isPresence <em>Presence</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isCount <em>Count</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isDistance <em>Distance</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isProbability <em>Probability</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isAssessment <em>Assessment</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isUncertainty <em>Uncertainty</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isType <em>Type</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isObservability <em>Observability</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isProportion <em>Proportion</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#getOther <em>Other</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isRatio <em>Ratio</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isValue <em>Value</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#isOccurrence <em>Occurrence</em>}</li>
 *   <li>{@link org.integratedmodelling.kim.kdecl.impl.ConceptImpl#getDeclaration <em>Declaration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptImpl extends MinimalEObjectImpl.Container implements Concept
{
  /**
   * The default value of the '{@link #isNegated() <em>Negated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegated()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegated() <em>Negated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegated()
   * @generated
   * @ordered
   */
  protected boolean negated = NEGATED_EDEFAULT;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected ConceptReference name;

  /**
   * The default value of the '{@link #getStringIdentifier() <em>String Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringIdentifier()
   * @generated
   * @ordered
   */
  protected static final String STRING_IDENTIFIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStringIdentifier() <em>String Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringIdentifier()
   * @generated
   * @ordered
   */
  protected String stringIdentifier = STRING_IDENTIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getIntIdentifier() <em>Int Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntIdentifier()
   * @generated
   * @ordered
   */
  protected static final int INT_IDENTIFIER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIntIdentifier() <em>Int Identifier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIntIdentifier()
   * @generated
   * @ordered
   */
  protected int intIdentifier = INT_IDENTIFIER_EDEFAULT;

  /**
   * The default value of the '{@link #getAuthority() <em>Authority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuthority()
   * @generated
   * @ordered
   */
  protected static final String AUTHORITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAuthority() <em>Authority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAuthority()
   * @generated
   * @ordered
   */
  protected String authority = AUTHORITY_EDEFAULT;

  /**
   * The default value of the '{@link #isPresence() <em>Presence</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPresence()
   * @generated
   * @ordered
   */
  protected static final boolean PRESENCE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPresence() <em>Presence</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPresence()
   * @generated
   * @ordered
   */
  protected boolean presence = PRESENCE_EDEFAULT;

  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration concept;

  /**
   * The default value of the '{@link #isCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCount()
   * @generated
   * @ordered
   */
  protected static final boolean COUNT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCount()
   * @generated
   * @ordered
   */
  protected boolean count = COUNT_EDEFAULT;

  /**
   * The default value of the '{@link #isDistance() <em>Distance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistance()
   * @generated
   * @ordered
   */
  protected static final boolean DISTANCE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDistance() <em>Distance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistance()
   * @generated
   * @ordered
   */
  protected boolean distance = DISTANCE_EDEFAULT;

  /**
   * The default value of the '{@link #isProbability() <em>Probability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProbability()
   * @generated
   * @ordered
   */
  protected static final boolean PROBABILITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isProbability() <em>Probability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProbability()
   * @generated
   * @ordered
   */
  protected boolean probability = PROBABILITY_EDEFAULT;

  /**
   * The default value of the '{@link #isAssessment() <em>Assessment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAssessment()
   * @generated
   * @ordered
   */
  protected static final boolean ASSESSMENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAssessment() <em>Assessment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAssessment()
   * @generated
   * @ordered
   */
  protected boolean assessment = ASSESSMENT_EDEFAULT;

  /**
   * The default value of the '{@link #isUncertainty() <em>Uncertainty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUncertainty()
   * @generated
   * @ordered
   */
  protected static final boolean UNCERTAINTY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUncertainty() <em>Uncertainty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUncertainty()
   * @generated
   * @ordered
   */
  protected boolean uncertainty = UNCERTAINTY_EDEFAULT;

  /**
   * The default value of the '{@link #isType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isType()
   * @generated
   * @ordered
   */
  protected static final boolean TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isType()
   * @generated
   * @ordered
   */
  protected boolean type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isObservability() <em>Observability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObservability()
   * @generated
   * @ordered
   */
  protected static final boolean OBSERVABILITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isObservability() <em>Observability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isObservability()
   * @generated
   * @ordered
   */
  protected boolean observability = OBSERVABILITY_EDEFAULT;

  /**
   * The default value of the '{@link #isProportion() <em>Proportion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProportion()
   * @generated
   * @ordered
   */
  protected static final boolean PROPORTION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isProportion() <em>Proportion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProportion()
   * @generated
   * @ordered
   */
  protected boolean proportion = PROPORTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getOther() <em>Other</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOther()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration other;

  /**
   * The default value of the '{@link #isRatio() <em>Ratio</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRatio()
   * @generated
   * @ordered
   */
  protected static final boolean RATIO_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRatio() <em>Ratio</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRatio()
   * @generated
   * @ordered
   */
  protected boolean ratio = RATIO_EDEFAULT;

  /**
   * The default value of the '{@link #isValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isValue()
   * @generated
   * @ordered
   */
  protected static final boolean VALUE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isValue()
   * @generated
   * @ordered
   */
  protected boolean value = VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #isOccurrence() <em>Occurrence</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOccurrence()
   * @generated
   * @ordered
   */
  protected static final boolean OCCURRENCE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOccurrence() <em>Occurrence</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOccurrence()
   * @generated
   * @ordered
   */
  protected boolean occurrence = OCCURRENCE_EDEFAULT;

  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected ConceptDeclaration declaration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KdeclPackage.Literals.CONCEPT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNegated()
  {
    return negated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNegated(boolean newNegated)
  {
    boolean oldNegated = negated;
    negated = newNegated;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__NEGATED, oldNegated, negated));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptReference getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(ConceptReference newName, NotificationChain msgs)
  {
    ConceptReference oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(ConceptReference newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStringIdentifier()
  {
    return stringIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStringIdentifier(String newStringIdentifier)
  {
    String oldStringIdentifier = stringIdentifier;
    stringIdentifier = newStringIdentifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__STRING_IDENTIFIER, oldStringIdentifier, stringIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getIntIdentifier()
  {
    return intIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIntIdentifier(int newIntIdentifier)
  {
    int oldIntIdentifier = intIdentifier;
    intIdentifier = newIntIdentifier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__INT_IDENTIFIER, oldIntIdentifier, intIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAuthority()
  {
    return authority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAuthority(String newAuthority)
  {
    String oldAuthority = authority;
    authority = newAuthority;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__AUTHORITY, oldAuthority, authority));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isPresence()
  {
    return presence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPresence(boolean newPresence)
  {
    boolean oldPresence = presence;
    presence = newPresence;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__PRESENCE, oldPresence, presence));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptDeclaration getConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConcept(ConceptDeclaration newConcept, NotificationChain msgs)
  {
    ConceptDeclaration oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__CONCEPT, oldConcept, newConcept);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConcept(ConceptDeclaration newConcept)
  {
    if (newConcept != concept)
    {
      NotificationChain msgs = null;
      if (concept != null)
        msgs = ((InternalEObject)concept).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__CONCEPT, null, msgs);
      if (newConcept != null)
        msgs = ((InternalEObject)newConcept).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__CONCEPT, null, msgs);
      msgs = basicSetConcept(newConcept, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__CONCEPT, newConcept, newConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isCount()
  {
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCount(boolean newCount)
  {
    boolean oldCount = count;
    count = newCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__COUNT, oldCount, count));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isDistance()
  {
    return distance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDistance(boolean newDistance)
  {
    boolean oldDistance = distance;
    distance = newDistance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__DISTANCE, oldDistance, distance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isProbability()
  {
    return probability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProbability(boolean newProbability)
  {
    boolean oldProbability = probability;
    probability = newProbability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__PROBABILITY, oldProbability, probability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAssessment()
  {
    return assessment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssessment(boolean newAssessment)
  {
    boolean oldAssessment = assessment;
    assessment = newAssessment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__ASSESSMENT, oldAssessment, assessment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isUncertainty()
  {
    return uncertainty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUncertainty(boolean newUncertainty)
  {
    boolean oldUncertainty = uncertainty;
    uncertainty = newUncertainty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__UNCERTAINTY, oldUncertainty, uncertainty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(boolean newType)
  {
    boolean oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isObservability()
  {
    return observability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setObservability(boolean newObservability)
  {
    boolean oldObservability = observability;
    observability = newObservability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__OBSERVABILITY, oldObservability, observability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isProportion()
  {
    return proportion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProportion(boolean newProportion)
  {
    boolean oldProportion = proportion;
    proportion = newProportion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__PROPORTION, oldProportion, proportion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptDeclaration getOther()
  {
    return other;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOther(ConceptDeclaration newOther, NotificationChain msgs)
  {
    ConceptDeclaration oldOther = other;
    other = newOther;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__OTHER, oldOther, newOther);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOther(ConceptDeclaration newOther)
  {
    if (newOther != other)
    {
      NotificationChain msgs = null;
      if (other != null)
        msgs = ((InternalEObject)other).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__OTHER, null, msgs);
      if (newOther != null)
        msgs = ((InternalEObject)newOther).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__OTHER, null, msgs);
      msgs = basicSetOther(newOther, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__OTHER, newOther, newOther));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isRatio()
  {
    return ratio;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRatio(boolean newRatio)
  {
    boolean oldRatio = ratio;
    ratio = newRatio;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__RATIO, oldRatio, ratio));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValue(boolean newValue)
  {
    boolean oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isOccurrence()
  {
    return occurrence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOccurrence(boolean newOccurrence)
  {
    boolean oldOccurrence = occurrence;
    occurrence = newOccurrence;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__OCCURRENCE, oldOccurrence, occurrence));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConceptDeclaration getDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclaration(ConceptDeclaration newDeclaration, NotificationChain msgs)
  {
    ConceptDeclaration oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__DECLARATION, oldDeclaration, newDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclaration(ConceptDeclaration newDeclaration)
  {
    if (newDeclaration != declaration)
    {
      NotificationChain msgs = null;
      if (declaration != null)
        msgs = ((InternalEObject)declaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__DECLARATION, null, msgs);
      if (newDeclaration != null)
        msgs = ((InternalEObject)newDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KdeclPackage.CONCEPT__DECLARATION, null, msgs);
      msgs = basicSetDeclaration(newDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KdeclPackage.CONCEPT__DECLARATION, newDeclaration, newDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KdeclPackage.CONCEPT__NAME:
        return basicSetName(null, msgs);
      case KdeclPackage.CONCEPT__CONCEPT:
        return basicSetConcept(null, msgs);
      case KdeclPackage.CONCEPT__OTHER:
        return basicSetOther(null, msgs);
      case KdeclPackage.CONCEPT__DECLARATION:
        return basicSetDeclaration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KdeclPackage.CONCEPT__NEGATED:
        return isNegated();
      case KdeclPackage.CONCEPT__NAME:
        return getName();
      case KdeclPackage.CONCEPT__STRING_IDENTIFIER:
        return getStringIdentifier();
      case KdeclPackage.CONCEPT__INT_IDENTIFIER:
        return getIntIdentifier();
      case KdeclPackage.CONCEPT__AUTHORITY:
        return getAuthority();
      case KdeclPackage.CONCEPT__PRESENCE:
        return isPresence();
      case KdeclPackage.CONCEPT__CONCEPT:
        return getConcept();
      case KdeclPackage.CONCEPT__COUNT:
        return isCount();
      case KdeclPackage.CONCEPT__DISTANCE:
        return isDistance();
      case KdeclPackage.CONCEPT__PROBABILITY:
        return isProbability();
      case KdeclPackage.CONCEPT__ASSESSMENT:
        return isAssessment();
      case KdeclPackage.CONCEPT__UNCERTAINTY:
        return isUncertainty();
      case KdeclPackage.CONCEPT__TYPE:
        return isType();
      case KdeclPackage.CONCEPT__OBSERVABILITY:
        return isObservability();
      case KdeclPackage.CONCEPT__PROPORTION:
        return isProportion();
      case KdeclPackage.CONCEPT__OTHER:
        return getOther();
      case KdeclPackage.CONCEPT__RATIO:
        return isRatio();
      case KdeclPackage.CONCEPT__VALUE:
        return isValue();
      case KdeclPackage.CONCEPT__OCCURRENCE:
        return isOccurrence();
      case KdeclPackage.CONCEPT__DECLARATION:
        return getDeclaration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KdeclPackage.CONCEPT__NEGATED:
        setNegated((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__NAME:
        setName((ConceptReference)newValue);
        return;
      case KdeclPackage.CONCEPT__STRING_IDENTIFIER:
        setStringIdentifier((String)newValue);
        return;
      case KdeclPackage.CONCEPT__INT_IDENTIFIER:
        setIntIdentifier((Integer)newValue);
        return;
      case KdeclPackage.CONCEPT__AUTHORITY:
        setAuthority((String)newValue);
        return;
      case KdeclPackage.CONCEPT__PRESENCE:
        setPresence((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__CONCEPT:
        setConcept((ConceptDeclaration)newValue);
        return;
      case KdeclPackage.CONCEPT__COUNT:
        setCount((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__DISTANCE:
        setDistance((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__PROBABILITY:
        setProbability((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__ASSESSMENT:
        setAssessment((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__UNCERTAINTY:
        setUncertainty((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__TYPE:
        setType((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__OBSERVABILITY:
        setObservability((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__PROPORTION:
        setProportion((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__OTHER:
        setOther((ConceptDeclaration)newValue);
        return;
      case KdeclPackage.CONCEPT__RATIO:
        setRatio((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__VALUE:
        setValue((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__OCCURRENCE:
        setOccurrence((Boolean)newValue);
        return;
      case KdeclPackage.CONCEPT__DECLARATION:
        setDeclaration((ConceptDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KdeclPackage.CONCEPT__NEGATED:
        setNegated(NEGATED_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__NAME:
        setName((ConceptReference)null);
        return;
      case KdeclPackage.CONCEPT__STRING_IDENTIFIER:
        setStringIdentifier(STRING_IDENTIFIER_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__INT_IDENTIFIER:
        setIntIdentifier(INT_IDENTIFIER_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__AUTHORITY:
        setAuthority(AUTHORITY_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__PRESENCE:
        setPresence(PRESENCE_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__CONCEPT:
        setConcept((ConceptDeclaration)null);
        return;
      case KdeclPackage.CONCEPT__COUNT:
        setCount(COUNT_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__DISTANCE:
        setDistance(DISTANCE_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__PROBABILITY:
        setProbability(PROBABILITY_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__ASSESSMENT:
        setAssessment(ASSESSMENT_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__UNCERTAINTY:
        setUncertainty(UNCERTAINTY_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__OBSERVABILITY:
        setObservability(OBSERVABILITY_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__PROPORTION:
        setProportion(PROPORTION_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__OTHER:
        setOther((ConceptDeclaration)null);
        return;
      case KdeclPackage.CONCEPT__RATIO:
        setRatio(RATIO_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__OCCURRENCE:
        setOccurrence(OCCURRENCE_EDEFAULT);
        return;
      case KdeclPackage.CONCEPT__DECLARATION:
        setDeclaration((ConceptDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KdeclPackage.CONCEPT__NEGATED:
        return negated != NEGATED_EDEFAULT;
      case KdeclPackage.CONCEPT__NAME:
        return name != null;
      case KdeclPackage.CONCEPT__STRING_IDENTIFIER:
        return STRING_IDENTIFIER_EDEFAULT == null ? stringIdentifier != null : !STRING_IDENTIFIER_EDEFAULT.equals(stringIdentifier);
      case KdeclPackage.CONCEPT__INT_IDENTIFIER:
        return intIdentifier != INT_IDENTIFIER_EDEFAULT;
      case KdeclPackage.CONCEPT__AUTHORITY:
        return AUTHORITY_EDEFAULT == null ? authority != null : !AUTHORITY_EDEFAULT.equals(authority);
      case KdeclPackage.CONCEPT__PRESENCE:
        return presence != PRESENCE_EDEFAULT;
      case KdeclPackage.CONCEPT__CONCEPT:
        return concept != null;
      case KdeclPackage.CONCEPT__COUNT:
        return count != COUNT_EDEFAULT;
      case KdeclPackage.CONCEPT__DISTANCE:
        return distance != DISTANCE_EDEFAULT;
      case KdeclPackage.CONCEPT__PROBABILITY:
        return probability != PROBABILITY_EDEFAULT;
      case KdeclPackage.CONCEPT__ASSESSMENT:
        return assessment != ASSESSMENT_EDEFAULT;
      case KdeclPackage.CONCEPT__UNCERTAINTY:
        return uncertainty != UNCERTAINTY_EDEFAULT;
      case KdeclPackage.CONCEPT__TYPE:
        return type != TYPE_EDEFAULT;
      case KdeclPackage.CONCEPT__OBSERVABILITY:
        return observability != OBSERVABILITY_EDEFAULT;
      case KdeclPackage.CONCEPT__PROPORTION:
        return proportion != PROPORTION_EDEFAULT;
      case KdeclPackage.CONCEPT__OTHER:
        return other != null;
      case KdeclPackage.CONCEPT__RATIO:
        return ratio != RATIO_EDEFAULT;
      case KdeclPackage.CONCEPT__VALUE:
        return value != VALUE_EDEFAULT;
      case KdeclPackage.CONCEPT__OCCURRENCE:
        return occurrence != OCCURRENCE_EDEFAULT;
      case KdeclPackage.CONCEPT__DECLARATION:
        return declaration != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (negated: ");
    result.append(negated);
    result.append(", stringIdentifier: ");
    result.append(stringIdentifier);
    result.append(", intIdentifier: ");
    result.append(intIdentifier);
    result.append(", authority: ");
    result.append(authority);
    result.append(", presence: ");
    result.append(presence);
    result.append(", count: ");
    result.append(count);
    result.append(", distance: ");
    result.append(distance);
    result.append(", probability: ");
    result.append(probability);
    result.append(", assessment: ");
    result.append(assessment);
    result.append(", uncertainty: ");
    result.append(uncertainty);
    result.append(", type: ");
    result.append(type);
    result.append(", observability: ");
    result.append(observability);
    result.append(", proportion: ");
    result.append(proportion);
    result.append(", ratio: ");
    result.append(ratio);
    result.append(", value: ");
    result.append(value);
    result.append(", occurrence: ");
    result.append(occurrence);
    result.append(')');
    return result.toString();
  }

} //ConceptImpl
