/**
 * generated by Xtext 2.9.1
 */
package org.integratedmodelling.kim.ui.outline;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.integratedmodelling.kim.kim.Classification;
import org.integratedmodelling.kim.kim.ConceptDeclaration;
import org.integratedmodelling.kim.kim.LookupTable;
import org.integratedmodelling.kim.kim.Model;
import org.integratedmodelling.kim.kim.Namespace;
import org.integratedmodelling.kim.kim.ObservableSemantics;
import org.integratedmodelling.kim.kim.Statement;
import org.integratedmodelling.kim.model.Kim;
import org.integratedmodelling.kim.model.KimNamespace;
import org.integratedmodelling.kim.model.KimProject;

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
@SuppressWarnings("all")
public class KimOutlineTreeProvider extends DefaultOutlineTreeProvider {
  public boolean _isLeaf(final ObservableSemantics obs) {
    return true;
  }
  
  public boolean _isLeaf(final ConceptDeclaration obs) {
    return true;
  }
  
  public boolean _isLeaf(final Classification obs) {
    return true;
  }
  
  public boolean _isLeaf(final LookupTable obs) {
    return true;
  }
  
  public void _createChildren(final DocumentRootNode parent, final Model model) {
    final KimProject project = Kim.INSTANCE.getProjectForResource(model.eResource());
    AbstractOutlineNode pnode = parent;
    if ((project != null)) {
      pnode = this.getProjectNode(pnode, project);
      Namespace _namespace = model.getNamespace();
      boolean _tripleNotEquals = (_namespace != null);
      if (_tripleNotEquals) {
        pnode = this.getNamespaceNode(pnode, project.getNamespace(Kim.getNamespaceId(model.getNamespace())));
      }
    }
    EList<EObject> _eContents = model.eContents();
    for (final EObject child : _eContents) {
      if ((child instanceof Statement)) {
        final Statement statement = ((Statement) child);
        if (((statement.getModelStatement() != null) && (statement.getModelStatement().getBody() != null))) {
          this.createNode(pnode, statement.getModelStatement().getBody());
        } else {
          if (((statement.getConceptStatement() != null) && (statement.getConceptStatement().getBody() != null))) {
            this.createNode(pnode, statement.getConceptStatement().getBody());
          } else {
            if (((statement.getObserveStatement() != null) && (statement.getObserveStatement().getBody() != null))) {
              this.createNode(pnode, statement.getObserveStatement().getBody());
            }
          }
        }
      } else {
        if ((child instanceof Namespace)) {
        }
      }
    }
  }
  
  public AbstractOutlineNode getProjectNode(final AbstractOutlineNode node, final KimProject project) {
    return node;
  }
  
  public AbstractOutlineNode getNamespaceNode(final AbstractOutlineNode node, final KimNamespace namespace) {
    return node;
  }
}
