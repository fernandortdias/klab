---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: node-service
    app.kubernetes.io/version: 0.10.0-SNAPSHOT
  name: node-service
spec:
  ports:
  - name: http
    port: 8287
    targetPort: 8287
  selector:
    app.kubernetes.io/name: node-service
    app.kubernetes.io/version: 0.10.0-SNAPSHOT
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    app.dekorate.io/commit-id: f39b85a568c31bdcb3cae1493d9ad62e45a7e243
    app.dekorate.io/vcs-url: https://bitbucket.org/integratedmodelling/klab.git
  labels:
    app.kubernetes.io/name: node-service
    app.kubernetes.io/version: 0.10.0-SNAPSHOT
  name: node-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: node-service
      app.kubernetes.io/version: 0.10.0-SNAPSHOT
  template:
    metadata:
      annotations:
        app.dekorate.io/commit-id: f39b85a568c31bdcb3cae1493d9ad62e45a7e243
        app.dekorate.io/vcs-url: https://bitbucket.org/integratedmodelling/klab.git
      labels:
        app.kubernetes.io/name: node-service
        app.kubernetes.io/version: 0.10.0-SNAPSHOT
    spec:
      serviceAccountName: node-service-account
      imagePullSecrets:
      - name: dpr-secret
      containers:
      - name: node-service
        image: node:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8287
          name: http
          protocol: TCP
      volumes:
      - name: node-service-persistent-storage
        persistentVolumeClaim:
          claimName: node-service-pv-claim
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: node-service
    app.kubernetes.io/version: 0.10.0-SNAPSHOT
  name: node-service
spec:
  rules:
  - host: ""
    http:
      paths:
      - backend:
          serviceName: node-service
          servicePort: 8287
        path: /node
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-service
  namespace: default
data:
  application.yml: |-
    klab: 
      adapter: 
        raster: 
          auth: "*"
        vector: 
          auth: "*"
        wcs: 
          auth: "*"
        weather: 
          auth: "*"
      geoserver: 
        password: geoserver_password
        url: "https://geoserver_node:8080"
        user: geoserver_user
      node: 
        searching: "*"
        submitting: "*"
      postgres: 
        host: postgres_node
        password: postgres_password
        port: 5432
        user: postgres_user
      certificate: |
        #Node Certificate Generated On Sun Aug 16 12:55:15 CEST 2020
        #Sun Aug 16 12:55:15 CEST 2020
        klab.user.email=support@integratedmodelling.org
        klab.partner.email=info@integratedmodelling.org
        klab.nodename=knot
        klab.certificate.level=INSTITUTIONAL
        klab.partner.hub=http\://192.168.39.1\:8284/hub
        klab.signature=3296bf41-fc15-4d7f-8c7d-6b82a432e390
        klab.validuntil=2021-02-14T12\:55\:15.028+01\:00
        klab.certificate=-----BEGIN PGP MESSAGE-----\nVersion\: BCPG v1.64\n\nowJ4nJvAy8zAxfg6K3jlLjnhCsbTB82TxHMyk1PzilPdMnNS/RJzU3U90/Pyi1JT\n4i0FJivr6ipApRXSgPJcysGleQqOpekKhmYKhkZWpqZWhqYKzq7BIQpGBkYGXNk5\niUl6pcWpRXqpuYmZObbFpQUF+UUlDpl5JanpRYklqSm5+SmpOTmZeel6+UXpEPUF\niUUleXAtmXlp+fjV5wGF8oAOtc3Oyy+BCCWnFpVkpmUmA3Xo5aSWpebYevoFh3iG\nhIZ4+vs5+qDak1GaZJtRUlIQY6Wvb2hppGdoZqFnbKlnGGNlYWRhog+UhqgvzkzP\nSywpLUq1NTayNEtKMzHUTUs2NNU1STFP07VINk/RNUuyMEo0MTZKNbaE+r0sMScz\npTSvBOgRYIAY6hoY6RqahBgaxQCDKgYYVnoGRhbaBkCrDKAayvOLUnLKMlPLbTNz\nocFXlIPVeUbG+iCf62P6uKSyINXWz9/FFdWf4DDCFZKdTOksDIxcDIGsTKCI9pLx\nBmpV8ChNUtAIycgsVgCikoxUhezUSoW0/CIw2yW1DKRAU8EGXxzZMXBxCsAS2Ax1\n/n/Gh629o41C5rAxSNZdiXDVuxMfb1qr/Kaei/mtbIr4bE9emT/Tjrb9sa+32vFu\nwoWcnYkMHDeNo9v3ftt77OWPL6tkJuzXsueVYcpqFAlx1MwoSM59v6Kf75DBGuMr\nM97GcXctFnaZfNH4liqLRMbawIIrea5O3Z29Txr1OppjJskm7OQyzy2pmHh406bd\nS+aaF1wzZ9hT++pj7GuPf2/OKidJMN74L5lQPe/pa6WW3+rreXLYzVLKdzLXGJ9Z\nIvN7Lb/hxvPm5QzmUr3SfBIvEva9TblgsuO184kvU7u95nbHfv10/mHt/ukrqxt2\nNxwujr/VOjP1vDWzypqsn1sOdM1m3hexYnvhyg0iOeujW9oen1v83+JH9Zxduumv\ndizRMzLZ5Zm3x1jJw0Y9ZabmhvjuLbdWTDA8Eu/6z2a7+WSL3NUhi9oXTFx1+NUf\ntw1GBeLRSbtVX+jOO3GvM/TJ37gPs/NqfOYE/U+2fePd9mvjsYMc1ts/nXFtib+z\nNvrts8cHzXKsz03+e+H8Qff+JZsi7/wWfZn3Ttpm8d/e3VtOnc90vaD5b2nSukXf\nzvk3MnwvWmTWf/Rb0/rd7ze33UtZcNvgSVacsVRdUuCKrI+9gpxbtQQu/fz2d+H3\n9Yvcc3bNffWR66CG5eWF1/bKpyh+NZALd5t+Ucsrr3PagrykWft7P4slWEnUrImZ\n3XB5cZreA4bZeryfa59lAgCKM9Ya\n\=xd46\n-----END PGP MESSAGE-----\n
        klab.url=http\://192.168.39.123/node/
        klab.wordlview=im
        klab.certificate.type=NODE
        klab.partner.name=integratedmodelling.org
    server: 
      port: 8287
      servlet: 
        context-path: /node
        multipart: 
          max-file-size: 100MB
          max-request-size: 100MB
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: demo-role
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["pods","configmaps"]
    verbs: ["get", "watch", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: demo-role-binding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: node-service-account
    namespace: default
roleRef:
  kind: Role
  name: demo-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: node-service-account
  namespace: default
---
apiVersion: v1
kind: PersistentVolume            # Create a PersistentVolume
metadata:
  name: nodeservice-pv
  labels:
    app.kubernetes.io/name: node-service
    app.kubernetes.io/version: 0.10.0-SNAPSHOT
spec:
  storageClassName: local-node-storage      # Storage class. A PV Claim requesting the same storageClass can be bound to this volume. 
  hostPath:
    path: /data/pv0001/
  capacity:
    storage: 1000Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain  # Retain the PersistentVolume even after PersistentVolumeClaim is deleted. The volume is considered “released”. But it is not yet available for another claim because the previous claimant’s data remains on the volume. 
---    
apiVersion: v1
kind: PersistentVolumeClaim        # Create a PersistentVolumeClaim to request a PersistentVolume storage
metadata:                          # Claim name and labels
  name: node-service-pv-claim
  labels:
    app.kubernetes.io/name: node-service
    app.kubernetes.io/version: 0.10.0-SNAPSHOT
spec:                              # Access mode and resource limits
  storageClassName: local-node-storage       # Request a certain storage class
  accessModes:
    - ReadWriteOnce                # ReadWriteOnce means the volume can be mounted as read-write by a single Node
  resources:
    requests:
      storage: 1000Mi