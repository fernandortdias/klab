/**
 * 
 */
package org.integratedmodelling.klab.test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.integratedmodelling.kim.api.IServiceCall;
import org.integratedmodelling.kim.model.KimServiceCall;
import org.integratedmodelling.klab.Extensions;
import org.integratedmodelling.klab.Klab;
import org.integratedmodelling.klab.api.observations.scale.IExtent;
import org.integratedmodelling.klab.components.geospace.api.IGrid;
import org.integratedmodelling.klab.components.geospace.api.IGrid.Cell;
import org.integratedmodelling.klab.components.geospace.extents.Grid;
import org.integratedmodelling.klab.components.geospace.extents.Shape;
import org.integratedmodelling.klab.components.geospace.extents.Space;
import org.integratedmodelling.klab.components.geospace.extents.mediators.Subgrid;
import org.integratedmodelling.klab.components.geospace.utils.SpatialDisplay;
import org.integratedmodelling.klab.engine.Engine;
import org.integratedmodelling.klab.scale.Scale;
import org.integratedmodelling.klab.utils.NumberUtils;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Runs various scale subsetting and indexing tests using regular and irregular
 * space and time extents.
 * 
 * @author ferdinando.villa
 *
 */
public class GeospaceTests {

	static String tzShape = "EPSG:4326 POLYGON((33.796 -7.086, 35.946 -7.086, 35.946 -9.41, 33.796 -9.41, 33.796 -7.086))";
	static String tzShapeTop = "EPSG:4326 POLYGON((33.796 -7.086, 35.946 -7.086, 35.946 -8.00, 33.796 -8.00, 33.796 -7.086))";
	static String tzShapeBottom = "EPSG:4326 POLYGON((33.796 -8.00, 35.946 -8.00, 35.946 -9.41, 33.796 -9.41, 33.796 -8.00))";

	// near-random contiguous subshapes of tzShape
	String[] subshapes = new String[] {
			"EPSG:4326 POLYGON ((33.864326271186435 -8.535135135135135, 33.864326271186435 -8.544108108108109, 33.87343644067796 -8.55308108108108, 33.864326271186435 -8.55308108108108, 33.855216101694914 -8.562054054054054, 33.855216101694914 -8.571027027027027, 33.846105932203386 -8.562054054054054, 33.846105932203386 -8.55308108108108, 33.855216101694914 -8.544108108108109, 33.864326271186435 -8.535135135135135))",
			"EPSG:4326 POLYGON ((33.955427966101695 -8.571027027027027, 33.964538135593216 -8.58, 33.955427966101695 -8.588972972972973, 33.955427966101695 -8.58, 33.955427966101695 -8.571027027027027))",
			"EPSG:4326 POLYGON ((33.93720762711864 -8.633837837837838, 33.94631779661017 -8.633837837837838, 33.94631779661017 -8.642810810810811, 33.93720762711864 -8.642810810810811, 33.93720762711864 -8.633837837837838))",
			"EPSG:4326 POLYGON ((33.80055508474576 -8.66972972972973, 33.80055508474576 -8.660756756756756, 33.80966525423729 -8.651783783783785, 33.81877542372881 -8.660756756756756, 33.82788559322034 -8.66972972972973, 33.82788559322034 -8.678702702702703, 33.81877542372881 -8.66972972972973, 33.80966525423729 -8.660756756756756, 33.80055508474576 -8.66972972972973))",
			"EPSG:4326 POLYGON ((33.955427966101695 -8.777405405405405, 33.964538135593216 -8.777405405405405, 33.964538135593216 -8.786378378378378, 33.955427966101695 -8.777405405405405))",
			"EPSG:4326 MULTIPOLYGON (((33.94631779661017 -8.867135135135134, 33.955427966101695 -8.876108108108108, 33.964538135593216 -8.885081081081081, 33.973648305084744 -8.885081081081081, 33.973648305084744 -8.894054054054054, 33.982758474576265 -8.903027027027028, 33.99186864406779 -8.894054054054054, 33.99186864406779 -8.885081081081081, 34.00097881355932 -8.885081081081081, 34.01008898305084 -8.876108108108108, 34.00097881355932 -8.867135135135134, 34.01008898305084 -8.867135135135134, 34.01919915254237 -8.858162162162163, 34.0283093220339 -8.858162162162163, 34.03741949152542 -8.867135135135134, 34.04652966101695 -8.867135135135134, 34.03741949152542 -8.876108108108108, 34.03741949152542 -8.885081081081081, 34.03741949152542 -8.894054054054054, 34.04652966101695 -8.903027027027028, 34.05563983050847 -8.894054054054054, 34.06475 -8.894054054054054, 34.073860169491525 -8.903027027027028, 34.06475 -8.912, 34.073860169491525 -8.920972972972972, 34.082970338983046 -8.920972972972972, 34.092080508474574 -8.920972972972972, 34.082970338983046 -8.929945945945946, 34.082970338983046 -8.938918918918919, 34.073860169491525 -8.929945945945946, 34.06475 -8.920972972972972, 34.05563983050847 -8.929945945945946, 34.05563983050847 -8.938918918918919, 34.04652966101695 -8.929945945945946, 34.03741949152542 -8.929945945945946, 34.0283093220339 -8.920972972972972, 34.01919915254237 -8.920972972972972, 34.01008898305084 -8.929945945945946, 34.01008898305084 -8.938918918918919, 34.00097881355932 -8.929945945945946, 33.99186864406779 -8.938918918918919, 33.982758474576265 -8.929945945945946, 33.973648305084744 -8.929945945945946, 33.964538135593216 -8.920972972972972, 33.955427966101695 -8.929945945945946, 33.955427966101695 -8.938918918918919, 33.964538135593216 -8.947891891891892, 33.955427966101695 -8.956864864864865, 33.955427966101695 -8.947891891891892, 33.94631779661017 -8.938918918918919, 33.93720762711864 -8.938918918918919, 33.94631779661017 -8.929945945945946, 33.955427966101695 -8.920972972972972, 33.94631779661017 -8.912, 33.93720762711864 -8.912, 33.92809745762712 -8.920972972972972, 33.92809745762712 -8.929945945945946, 33.91898728813559 -8.920972972972972, 33.92809745762712 -8.912, 33.91898728813559 -8.903027027027028, 33.90987711864406 -8.912, 33.90076694915254 -8.903027027027028, 33.90987711864406 -8.894054054054054, 33.91898728813559 -8.894054054054054, 33.92809745762712 -8.885081081081081, 33.92809745762712 -8.876108108108108, 33.93720762711864 -8.876108108108108, 33.94631779661017 -8.867135135135134), (34.00097881355932 -8.894054054054054, 33.99186864406779 -8.903027027027028, 34.00097881355932 -8.912, 34.01008898305084 -8.912, 34.01919915254237 -8.903027027027028, 34.01008898305084 -8.894054054054054, 34.00097881355932 -8.894054054054054), (33.99186864406779 -8.912, 33.982758474576265 -8.920972972972972, 33.99186864406779 -8.929945945945946, 34.00097881355932 -8.920972972972972, 33.99186864406779 -8.912)), ((34.01008898305084 -8.947891891891892, 34.01008898305084 -8.956864864864865, 34.01008898305084 -8.965837837837839, 34.00097881355932 -8.956864864864865, 34.01008898305084 -8.947891891891892)), ((34.00097881355932 -8.956864864864865, 33.99186864406779 -8.956864864864865, 33.982758474576265 -8.956864864864865, 33.99186864406779 -8.947891891891892, 34.00097881355932 -8.956864864864865)), ((33.955427966101695 -8.956864864864865, 33.964538135593216 -8.965837837837839, 33.955427966101695 -8.965837837837839, 33.94631779661017 -8.965837837837839, 33.955427966101695 -8.956864864864865)), ((33.94631779661017 -8.965837837837839, 33.93720762711864 -8.97481081081081, 33.93720762711864 -8.965837837837839, 33.92809745762712 -8.956864864864865, 33.93720762711864 -8.956864864864865, 33.94631779661017 -8.965837837837839)), ((33.91898728813559 -8.947891891891892, 33.90987711864406 -8.956864864864865, 33.90987711864406 -8.947891891891892, 33.91898728813559 -8.938918918918919, 33.91898728813559 -8.947891891891892)), ((33.93720762711864 -8.84918918918919, 33.92809745762712 -8.840216216216216, 33.91898728813559 -8.840216216216216, 33.90987711864406 -8.840216216216216, 33.91898728813559 -8.831243243243243, 33.92809745762712 -8.831243243243243, 33.93720762711864 -8.82227027027027, 33.94631779661017 -8.831243243243243, 33.94631779661017 -8.840216216216216, 33.94631779661017 -8.84918918918919, 33.955427966101695 -8.858162162162163, 33.94631779661017 -8.867135135135134, 33.94631779661017 -8.858162162162163, 33.93720762711864 -8.84918918918919)), ((33.91898728813559 -8.920972972972972, 33.90987711864406 -8.920972972972972, 33.90987711864406 -8.912, 33.91898728813559 -8.920972972972972)), ((34.01008898305084 -8.84918918918919, 34.00097881355932 -8.84918918918919, 33.99186864406779 -8.84918918918919, 34.00097881355932 -8.840216216216216, 34.01008898305084 -8.84918918918919)), ((34.092080508474574 -8.920972972972972, 34.1011906779661 -8.912, 34.1011906779661 -8.920972972972972, 34.092080508474574 -8.920972972972972)), ((34.0283093220339 -8.938918918918919, 34.03741949152542 -8.947891891891892, 34.0283093220339 -8.947891891891892, 34.0283093220339 -8.938918918918919)), ((33.93720762711864 -8.992756756756757, 33.94631779661017 -9.00172972972973, 33.94631779661017 -9.010702702702703, 33.955427966101695 -9.019675675675675, 33.964538135593216 -9.010702702702703, 33.973648305084744 -9.019675675675675, 33.982758474576265 -9.010702702702703, 33.982758474576265 -9.019675675675675, 33.973648305084744 -9.028648648648648, 33.964538135593216 -9.019675675675675, 33.955427966101695 -9.028648648648648, 33.94631779661017 -9.037621621621621, 33.93720762711864 -9.046594594594595, 33.93720762711864 -9.055567567567568, 33.92809745762712 -9.046594594594595, 33.93720762711864 -9.037621621621621, 33.92809745762712 -9.028648648648648, 33.92809745762712 -9.019675675675675, 33.91898728813559 -9.010702702702703, 33.90987711864406 -9.019675675675675, 33.90076694915254 -9.019675675675675, 33.90987711864406 -9.010702702702703, 33.91898728813559 -9.00172972972973, 33.91898728813559 -8.992756756756757, 33.92809745762712 -9.00172972972973, 33.93720762711864 -8.992756756756757)), ((33.92809745762712 -9.046594594594595, 33.91898728813559 -9.046594594594595, 33.91898728813559 -9.037621621621621, 33.92809745762712 -9.046594594594595)))",
			"EPSG:4326 POLYGON ((33.90076694915254 -8.867135135135134, 33.90987711864406 -8.876108108108108, 33.90076694915254 -8.876108108108108, 33.90076694915254 -8.867135135135134))",
			"EPSG:4326 POLYGON ((33.80055508474576 -8.920972972972972, 33.80966525423729 -8.920972972972972, 33.80055508474576 -8.929945945945946, 33.80055508474576 -8.920972972972972))",
			"EPSG:4326 POLYGON ((33.90076694915254 -9.055567567567568, 33.90987711864406 -9.064540540540541, 33.91898728813559 -9.073513513513513, 33.91898728813559 -9.082486486486486, 33.90987711864406 -9.073513513513513, 33.90076694915254 -9.064540540540541, 33.89165677966101 -9.064540540540541, 33.90076694915254 -9.055567567567568))",
			"EPSG:4326 POLYGON ((34.23784322033898 -9.11837837837838, 34.24695338983051 -9.12735135135135, 34.23784322033898 -9.12735135135135, 34.23784322033898 -9.11837837837838))",
			"EPSG:4326 POLYGON ((33.973648305084744 -9.12735135135135, 33.973648305084744 -9.11837837837838, 33.973648305084744 -9.109405405405406, 33.982758474576265 -9.109405405405406, 33.982758474576265 -9.11837837837838, 33.99186864406779 -9.12735135135135, 33.982758474576265 -9.12735135135135, 33.973648305084744 -9.12735135135135))",
			"EPSG:4326 POLYGON ((34.2105127118644 -9.109405405405406, 34.2105127118644 -9.11837837837838, 34.201402542372875 -9.12735135135135, 34.201402542372875 -9.136324324324324, 34.2105127118644 -9.145297297297297, 34.2105127118644 -9.15427027027027, 34.201402542372875 -9.163243243243244, 34.201402542372875 -9.15427027027027, 34.201402542372875 -9.145297297297297, 34.192292372881354 -9.136324324324324, 34.183182203389826 -9.12735135135135, 34.192292372881354 -9.12735135135135, 34.201402542372875 -9.11837837837838, 34.2105127118644 -9.109405405405406))",
			"EPSG:4326 POLYGON ((34.082970338983046 -9.181189189189189, 34.092080508474574 -9.190162162162162, 34.092080508474574 -9.199135135135135, 34.082970338983046 -9.199135135135135, 34.073860169491525 -9.190162162162162, 34.082970338983046 -9.181189189189189))" };

	IServiceCall tzcall = KimServiceCall.create("space", "grid", "10 km", "shape", tzShape);
	IServiceCall tztopcall = KimServiceCall.create("space", "grid", "10 km", "shape", tzShapeTop);
	IServiceCall tzbotcall = KimServiceCall.create("space", "grid", "10 km", "shape", tzShapeBottom);

	static Engine engine;
	List<Scale> scales = new ArrayList<>();

	@BeforeClass
	public static void setUp() throws Exception {
		engine = Engine.start();
	}

	@AfterClass
	public static void tearDown() throws Exception {
		engine.stop();
	}

	@Test
	public void testConformantSubgrids() throws IOException {

		Scale tzScale = Scale
				.create((IExtent) Extensions.INSTANCE.callFunction(tzcall, Klab.INSTANCE.getRootMonitor()));
		Shape tzShapeUp = Shape.create(tzShapeTop);
		Shape tzShapeDown = Shape.create(tzShapeBottom);

		Grid grid = (Grid) ((Space) tzScale.getSpace()).getGrid().get();
		IGrid gridUp = Subgrid.create(grid, tzShapeUp);
		IGrid gridDown = Subgrid.create(grid, tzShapeDown);

		if (System.getProperty("visualize", "false").equals("true")) {

			SpatialDisplay display = new SpatialDisplay(tzScale.getSpace());

			display.add(((Space) tzScale.getSpace()).getGrid().get(), "original");
			display.add(gridUp, "up");
			display.add(gridDown, "down");

			display.show();
			// block to see the display
			System.out.print("Press a key to continue...");
			System.in.read();
		}

		assert (NumberUtils.equal(gridUp.getCellWidth(), grid.getCellWidth()));
		assert (NumberUtils.equal(gridDown.getCellWidth(), grid.getCellWidth()));
		assert (NumberUtils.equal(gridUp.getCellHeight(), grid.getCellHeight()));
		assert (NumberUtils.equal(gridDown.getCellHeight(), grid.getCellHeight()));
		assert (gridUp.getXCells() == grid.getXCells());
		// allow 1-cell overlap on the Y axis
		assert (gridUp.getYCells() + gridDown.getYCells() - grid.getYCells() <= 1);
	}

	@Test
	public void testNonconformantSubgrids() throws IOException {

		Scale tzScale = Scale.create((IExtent) Extensions.INSTANCE.callFunction(
				KimServiceCall.create("space", "grid", "1 km", "shape", tzShape), Klab.INSTANCE.getRootMonitor()));

		Grid grid = (Grid) ((Space) tzScale.getSpace()).getGrid().get();

		// Just visual check for now
		for (String shape : subshapes) {

			Shape subshape = Shape.create(shape);
			Subgrid subgrid = Subgrid.create(grid, subshape);

			if (System.getProperty("visualize", "false").equals("true")) {
				
				SpatialDisplay display = new SpatialDisplay(tzScale.getSpace());

				display.add(grid.getShape(), "original context " + grid.getXCells() + "," + grid.getYCells());
				
				for (Cell cell : grid) {
					display.add(cell.getShape(), "cell #" + cell.getOffsetInGrid() + "@" + cell.getX() + "," + cell.getY());
					break;
				}

				display.add(subshape, "subshape");
				display.add(subgrid.getShape(), "subgrid snapped extent");
				
				for (Cell cell : subgrid) {
					display.add(subgrid.getOriginalCell(cell), "original covered cell");
				}

				display.show();
				// block to see the display
				System.out.print("Press a key to continue...");
				System.in.read();
				System.out.println();
			}

		}

	}

}
