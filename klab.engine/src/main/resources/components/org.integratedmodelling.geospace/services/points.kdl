@namespace gis.points
@klab 0.10.0
@version 0.10.0

export object extract 
	"Extract polygonal features from a raster map based on clumping of its values."
	label 'Vectorize into features'
{
	optional boolean expression select
		"Pass an expression that will return true or false per each point in the spatial context, 
		 producing a mask that will be vectorized into spatial contexts for the objects. Use quality
		 dependency names to refer to their state in each point."
	    default ""
	
	geometry #s2
	
	class org.integratedmodelling.klab.components.geospace.processing.PointInstantiator

}

export object cluster 
	"Extract polygonal features from a raster map based on clustering point values. The resulting polygons are the concave
	 or (optionally) the convex hull of the points in each cluster. Uses the DBSCAN algorithm."
	label 'Cluster points'
{
	boolean expression select
		"An expression that will return true or false per each point in the spatial context, 
		 producing a mask that will be vectorized into spatial contexts for the objects. Use quality
		 dependency names to refer to their state in each point."
	
	optional number radius
		"Radius in m of the neighborhood to consider. Default is defined in grid contexts to allow near-contiguous 
		 cells to be clustered."
		default 0.0
		
	optional number cellradius
		"Radius in cells of the neighborhood to consider. Default is defined in grid contexts to allow 
		 near-contiguous cells to be clustered."
		default 0
	
	optional number minpoints
		"Minumum number of density-connected points that can form a cluster. Default is 10."
		default 10
		
	optional boolean convex
		"Use convex hull to build polygons after clustering. Default true. False will use a concave
		 hull, which tends to give artifacts due to the non-exhausting nature of the clustering process."
		default true
	
	geometry #s2
	
	class org.integratedmodelling.klab.components.geospace.processing.PointClusterInstantiator

}

export number collect 
	"Collect values in the neighborhood of each point and set the value at the location 
	 based on the values in the neighborhood. Uses a moving window of configurable size and shape."
	label 'Collect neighbors'
{
	value expression aggregate
		"An expression producing the value to compute. The current cell in the neighborhood will be 
         available as 'space', the one being computed (focal) will be available as 'origin'. The 
         value of the focal cell will be available as 'self'. Note: using 'origin' will greatly
         increase the number of evaluations and consequently the run time."
		
	optional boolean expression select
		"An expression that will return true or false per each point in the selected neighborhood, 
		 choosing whether the point should be considered in the aggregation or not. All dependencies
		 will be available with their own name; the current cell will be available as 'space', the
	     focal cell being computed will be available as 'origin'.  Note: using 'origin' will greatly
         increase the number of evaluations and consequently the run time."
		default ""
	
	optional text radius
		"Radius of the neighborhood to consider in meters. Default is the distance spanning one cell at the current
		 resolution, producing a Moore neighborhood."
		default 0.0
		
	optional number cellradius
		"Radius in cells of the neighborhood to consider. Default is 1. Pass 0 for local operations."
		default 1
	
	optional enum aggregation
		"The type of aggregation requested for the values produced at each location. One of sum, mean, std, 
		 max, min, count, dominant or any. Default is count if the value expression produces a boolean the 
		 first time it's evaluated, dominant if it produces a concept, or mean if it produces a number."
		values sum, mean, std, max, min, count, dominant, any
		
	optional boolean skipedges
		"If true, the cells that do not have a complete neighborhood due to edge effects will be skipped. Default
		 is false."
		default false
	
	optional boolean circular
		"If true, an approximately round neighborhood is used. Default is a square neighborhood."
		default false

	geometry S2
	
	class org.integratedmodelling.klab.components.geospace.processing.NeighborhoodResolver

}