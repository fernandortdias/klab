@namespace gis.points
@klab 0.10.0
@version 0.10.0

export object extract 
	"Extract polygonal features from a raster map based on clumping of its values."
	label 'Vectorize into features'
{
	optional input select
		"Pass an expression that will return true or false per each point in the spatial context, 
		 producing a mask that will be vectorized into spatial contexts for the objects. Use quality
		 dependency names to refer to their state in each point."
	    default ""
	
	geometry #s0
	
	class org.integratedmodelling.klab.components.geospace.processing.PointInstantiator

}

export object cluster 
	"Extract polygonal features from a raster map based on clustering point values. The resulting polygons are the concave
	 or (optionally) the convex hull of the points in each cluster. Uses the DBSCAN algorithm."
	label 'Cluster points'
{
	text select
		"An expression that will return true or false per each point in the spatial context, 
		 producing a mask that will be vectorized into spatial contexts for the objects. Use quality
		 dependency names to refer to their state in each point."
	
	optional input radius
		"Radius in m of the neighborhood to consider. Default is defined in grid contexts to allow near-contiguous 
		 cells to be clustered."
		default 0.0
		
	optional input cellradius
		"Radius in cells of the neighborhood to consider. Default is defined in grid contexts to allow 
		 near-contiguous cells to be clustered."
		default 0
	
	optional input minpoints
		"Minumum number of density-connected points that can form a cluster. Default is 10."
		default 10
		
	optional input convex
		"Use convex hull to build polygons after clustering. Default true. False will use a concave
		 hull, which tends to give artifacts due to the non-exhausting nature of the clustering process."
		default true
	
	geometry #s0
	
	class org.integratedmodelling.klab.components.geospace.processing.ClusterInstantiator

}

export number collect 
	"Collect values in a configurable neighborhood of each location and set the value at the location based on the values
	 in the neighborhood. Optionally modify other values in the neighborhood as well."
	label 'Collect neighbors'
{
	text aggregate
		"An expression producing the value to compute. The current cell in the neighborhood will be 
         available as 'space', the one being computed (focal) will be available as 'origin'. The 
         value of the focal cell will be available as 'self'."
		
	optional input select
		"An expression that will return true or false per each point in the selected neighborhood, 
		 choosing whether the point should be considered in the aggregation or not. All dependencies
		 will be available with their own name; the current cell will be available as 'space', the
	     focal cell being computed will be available as 'origin'."
		default ""
	
	optional input radius
		"Radius in m of the neighborhood to consider. Default is the distance spanning one cell at the current
		 resolution, producing a Moore neighborhood."
		default 0.0
		
	optional input cellradius
		"Radius in cells of the neighborhood to consider. Default is 1. Pass 0 for local operations (which 
		 may be useful if the update feature is used)."
		default 1
	
	optional input aggregation
		"The type of aggregation requested for the values produced at each location. Default is count if
		 the value expression produces a boolean the first time it's evaluated, or mean if it produces a
		 number."
		default "" // TODO this should be enum mean, std, sum, min, max, count (maybe shannon etc)
		
	optional input skipedges
		"If true, the cells that do not have a complete neighborhood due to edge effects will be skipped. Default
		 is false."
		default false
	
	optional input circular
		"If true, an approximately round neighborhood is used. Default is a square neighborhood."
		default false
	
	optional input update
		"An optional list containing (artifactname, expression [,....]) pairs, with the expressions producing 
		 a value to update the named artifact in the neighborhood cells after the value for the
		 focal cell has been computed. The value of the focal cell will be available as 'self' while the 
		 current values of all other states will be available as their own names."
		default ()
	
	geometry S2
	
	class org.integratedmodelling.klab.components.geospace.processing.NeighborhoodResolver

}