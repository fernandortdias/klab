@klab 0.10.0
@version 0.10.0
@namespace klab.data

filter number normalize 
	"" 
	label "Normalize"
{
	optional import number artifact 
		"The artifact to normalize. Defaults to the target artifact."

	optional boolean invert
		"If true, invert the results by computing x = max - x + min"
		default false
				
	class org.integratedmodelling.klab.data.transformations.NormalizingResolver
}

filter number standardize 
	"" 
	label "Standardize"
{
	optional import number artifact 
		"The artifact to standardize. Defaults to the target artifact."
		
	optional boolean invert
		"If true, invert the results by computing x = max - x + min"
		default false
		
	class org.integratedmodelling.klab.data.transformations.StandardizingResolver
}

//filter object merge 
//	"Merges two or more object observations into one. For states, the aggregation strategy will be chosen based on the 
//	 target semantics unless an aggregation is explicitly specified. Objects will simply be merged into one observation
//	 and recast to the passed semantics, adding attributes or roles if compatible, or reidentifying them anew. The 
//	 original objects will remain in the source observation groups unless remove=true." 
//	label "Aggregate"
//{
//	optional import concept semantics 
//		"The semantics that identifies the states to aggregate. Can be abstract or general: all observations that resolve it will be aggregated"
//		
//	optional boolean remove
//		"If passed and the contextualizer is aggregating objects, the original observations will be deactivated."	
//		
//	class org.integratedmodelling.klab.data.transformations.MergingInstantiator
//}


filter value aggregate 
	"Aggregates two or more observations into one. The aggregation strategy will be chosen based on the 
	 target semantics unless an aggregation is explicitly specified. Objects will simply be merged into one observation
	 and recast to the passed semantics, adding attributes or roles if compatible, or reidentifying them anew. The 
	 original objects will remain in the source observation groups unless remove=true." 
	label "Aggregate"
{
	optional import concept semantics 
		"The semantics that identifies the states to aggregate. Can be abstract or general: all observations that resolve it will be aggregated"
		
	// TODO unimplemented: make this an enum when implementing
	optional text aggregation
		"The aggregation method"	
		
	class org.integratedmodelling.klab.data.transformations.AggregatingResolver
}

filter number euclideandistance 
	"Compute a family of Euclidean distance-based metrics and indicators." 
	label "Distance indicator"
{
	optional import number artifact 
		"The artifact to standardize. Defaults to the target artifact."
		
	optional value weights
		"Weighting scheme for the observations: either a number (equal for all) or a map of concept -> weight. If no weight is specified, equal 
		 weights summing to 1 are used."
		
	optional import value source
		"What to aggregate as distance source: a role, attribute, observable, or list thereof. All dependencies will be matched."

	optional value target
		"What to aggregate as distance target: a role, attribute, observable, or list thereof. All dependencies will be matched. If only
		this is passed, must match one of those indicators that compute implicit distances."
		
	optional text indicator
		"The indicator we compute. Default value is distance calculating the Euclidean distance from the vector to the origin. 
		Use similarity to calculate the similarity between the vector and the origin. "	
		
	class org.integratedmodelling.klab.data.transformations.EuclideanDistanceResolver
}
