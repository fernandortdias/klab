/**
 * This file defines the contract for functions compiled by the runtime into dataflow calls. These
 * are normally not seen by users.
 */
@klab 0.10.0
@version 0.10.0
@namespace klab.runtime

export value exec
	"Return an appropriate contextualizer for an expression."
{
	
	text code
		"The code to be executed"
		
	optional input ifcondition 
		"A condition to check before executing the code" 
		default ""

	optional input unlesscondition 
		"A negative conditions to check before executing the code" 
		default ""

	optional input language 
		"The language of the expression" 
		default "groovy"
		
	class org.integratedmodelling.klab.components.runtime.contextualizers.ExpressionResolver

}

export value literal
	"Return a mediating resolver that wraps a state into another with compatible, but 
	 different value semantics"
{
	
	object val
		"The value to be contextualized"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.LiteralStateResolver

}

export number convert
	"Return a contextualizer for a literal value"
{
	
	object 'from'
		"The value mediator (unit, range, currency) describing the source values"

	object 'to'
		"The value mediator (unit, range, currency) describing the target values"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.ConversionResolver

}

export concept classify
	"Return a state contextualizer that classifies its input into a concept"
{
	
	object classification
		"A classification stated in k.IM or built from a trait, class or metadata property"

	class org.integratedmodelling.klab.components.runtime.contextualizers.ClassifyingStateResolver

}

export value lookup
	"Return a state contextualizer that classifies its inputs using a lookup table"
{
	
	object table
		"A table stated in k.IM"

	value arguments 
		"A set of arguments to match to the columns of the table"

	class org.integratedmodelling.klab.components.runtime.contextualizers.LookupStateResolver

}

export value resolve
	"Return a resolver for a URN-specified resource"
{
	
	text urn
		"The URN pointing to the resource to be resolved and retrieved"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.UrnResolver
}

export object instantiate
	"Return an instantiator for a URN-specified resource"
{
	
	text urn
		"The URN pointing to the resource to be resolved and retrieved"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.UrnInstantiator

}

export value cast
	"Return a state resolver that will convert a value from a type to another"
{
	
	// TODO make this an enum
	text source
		"The source type of the value"

	// TODO make this an enum
	text destination
		"The destination type of the value"
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.CastingStateResolver
}

export value conditional
	"Wrap a function call that produces a contextualizer, created only if the passed condition evaluates to true."
{
	
	text condition
		"The condition for the contextualizer to be returned."
				
	class org.integratedmodelling.klab.components.runtime.contextualizers.wrappers.ConditionalContextualizer
}