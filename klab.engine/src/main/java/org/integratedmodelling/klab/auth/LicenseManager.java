///*******************************************************************************
// * Copyright (C) 2007, 2015:
// * 
// * - Ferdinando Villa <ferdinando.villa@bc3research.org> - integratedmodelling.org - any other
// * authors listed in @author annotations
// *
// * All rights reserved. This file is part of the k.LAB software suite, meant to enable modular,
// * collaborative, integrated development of interoperable data and model components. For details,
// * see http://integratedmodelling.org.
// * 
// * This program is free software; you can redistribute it and/or modify it under the terms of the
// * Affero General Public License Version 3 or any later version.
// *
// * This program is distributed in the hope that it will be useful, but without any warranty; without
// * even the implied warranty of merchantability or fitness for a particular purpose. See the Affero
// * General Public License for more details.
// * 
// * You should have received a copy of the Affero General Public License along with this program; if
// * not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
// * 02111-1307, USA. The license is also available at: https://www.gnu.org/licenses/agpl.html
// *******************************************************************************/
//package org.integratedmodelling.klab.auth;
//
//import java.io.File;
//import java.io.FileOutputStream;
//import java.io.IOException;
//import java.io.InputStream;
//import java.io.OutputStream;
//import java.io.StringReader;
//import java.net.MalformedURLException;
//import java.net.URL;
//import java.util.Date;
//import java.util.HashMap;
//import java.util.Map;
//import java.util.Properties;
//import org.integratedmodelling.klab.Auth;
//import org.integratedmodelling.klab.exceptions.KlabIOException;
//import org.integratedmodelling.klab.utils.FileUtils;
//import com.verhas.licensor.License;
//
///**
// * Handles generation of licenses from user data.
// * 
// * @author Ferd
// *
// */
//public class LicenseManager {
//
//  static LicenseManager      _this         = null;
//  static Map<String, String> translateUrls = new HashMap<>();
//  static {
//
//    /*
//     * Legacy certificate support: obsolete URLs to be remapped TODO remove these (and the hackable
//     * translation mechanism) when the new infrastructure is operational.
//     */
//    translateUrls.put("http://150.241.131.4/tl0", "https://integratedmodelling.org/collaboration");
//    translateUrls.put("http://integratedmodelling.org/tl0/",
//        "https://integratedmodelling.org/collaboration");
//  }
//
//  private static byte[] digest = new byte[] {(byte) 0x27, (byte) 0x6E, (byte) 0x68, (byte) 0x40,
//      (byte) 0xB7, (byte) 0x35, (byte) 0xDC, (byte) 0x0D, (byte) 0x51, (byte) 0x1C, (byte) 0x81,
//      (byte) 0xBF, (byte) 0xF1, (byte) 0x54, (byte) 0x15, (byte) 0x9C, (byte) 0xC9, (byte) 0xE4,
//      (byte) 0x2F, (byte) 0x77, (byte) 0xF1, (byte) 0x40, (byte) 0x42, (byte) 0x7F, (byte) 0x9B,
//      (byte) 0x1D, (byte) 0x14, (byte) 0x17, (byte) 0x5B, (byte) 0xAD, (byte) 0xDB, (byte) 0x1D,
//      (byte) 0x6C, (byte) 0x81, (byte) 0x73, (byte) 0xAD, (byte) 0xF8, (byte) 0x5E, (byte) 0x25,
//      (byte) 0xBA, (byte) 0x20, (byte) 0xB2, (byte) 0x70, (byte) 0xCE, (byte) 0xE4, (byte) 0xEE,
//      (byte) 0xBB, (byte) 0xFF, (byte) 0x1D, (byte) 0xCC, (byte) 0xA5, (byte) 0x2F, (byte) 0x63,
//      (byte) 0x93, (byte) 0x78, (byte) 0x98, (byte) 0x30, (byte) 0xDB, (byte) 0xEB, (byte) 0xB5,
//      (byte) 0xBB, (byte) 0xA1, (byte) 0x1C, (byte) 0x2E,};
//
//  /**
//   * Create an encrypted certificate containing arbitrary properties.
//   * 
//   * @param properties properties to encrypt
//   * @param outputFile file to write certificate on
//   * @throws Exception any error
//   */
//  public static void createCertificate(Properties properties, File outputFile) throws Exception {
//
//    String keyring = Auth.INSTANCE.getKeyring();
//    String password = Auth.INSTANCE.getPassword();
//    String key = Auth.INSTANCE.getKey();
//
//    File oprop = File.createTempFile("uprop", "prop");
//    OutputStream fos = new FileOutputStream(oprop);
//    properties.store(fos, "Generated by integratedmodelling.org on " + new Date());
//    fos.close();
//
//    /*
//     * encode the license
//     */
//    try {
//      OutputStream os = new FileOutputStream(outputFile);
//      os.write((new License().setLicense(oprop).loadKey(keyring, key).encodeLicense(password))
//          .getBytes("utf-8"));
//      os.close();
//    } catch (Exception e) {
//      throw e;
//    }
//  }
//
//  /**
//   * Read keys from a certificate with the passed public key and return properties that include
//   * those keys.
//   * 
//   * @param certFile
//   * @param publicKey
//   * @param keys
//   * @return properties read from certificate
//   */
//  public static Properties readCertificate(File certFile, File publicKey, String... keys) {
//
//    URL url = null;
//    Properties ret = new Properties();
//    try {
//      url = publicKey.toURI().toURL();
//    } catch (MalformedURLException e1) {
//      return null;
//    }
//
//    try (InputStream in = url.openConnection().getInputStream()) {
//      License license = new License();
//      license.loadKeyRing(in, digest);
//      license.setLicenseEncodedFromFile(certFile.toString());
//      if (!license.isVerified()) {
//        System.out.println("ZIO CANE");
//      }
//      if (keys != null && keys.length > 0) {
//        for (String s : keys) {
//          ret.setProperty(s, license.getFeature(s));
//        }
//      } else {
//        String lic = license.getLicenseString();
//        ret.load(new StringReader(lic));
//      }
//    } catch (Throwable e) {
//      throw new KlabIOException(e);
//    }
//
//    if (ret.getProperty("primary.server") != null
//        && translateUrls.containsKey(ret.getProperty("primary.server"))) {
//      ret.setProperty("primary.server", translateUrls.get(ret.getProperty("primary.server")));
//    }
//
//    /*
//     * support for test certificates: if test.port is there, switch primary server to local server
//     * on specified port.
//     */
//    if (ret.getProperty("test.port") != null) {
//      int port = Integer.parseInt(ret.getProperty("test.port"));
//      ret.setProperty("primary.server", "http://127.0.0.1:" + port + "/knode");
//    }
//
//    return ret;
//  }
//
//  /**
//   * @param certificate
//   * @param publicKey
//   * @param keys
//   * @return the properties read from the certificate.
//   */
//  public static Properties readCertificate(final File certificate, final URL publicKey,
//      final String... keys) {
//    try {
//      return readCertificate(FileUtils.readFileToString(certificate), publicKey, keys);
//    } catch (IOException e) {
//      throw new KlabIOException(e);
//    }
//  }
//
//  /**
//   * Read keys from a certificate with the passed public key and return properties that include
//   * those keys.
//   * 
//   * @param certificate
//   * @param publicKey
//   * @param keys
//   * @return properties read from the certificate
//   */
//  public static Properties readCertificate(String certificate, URL publicKey, String... keys) {
//
//    Properties ret = new Properties();
//
//    try (InputStream in = publicKey.openConnection().getInputStream()) {
//      License license = new License();
//      license.loadKeyRing(in, digest);
//      license.setLicenseEncoded(certificate);
//      if (keys != null && keys.length > 0) {
//        for (String s : keys) {
//          ret.setProperty(s, license.getFeature(s));
//        }
//      } else {
//        ret.load(new StringReader(license.getLicenseString()));
//      }
//    } catch (Exception e) {
//      throw new KlabIOException(e);
//    }
//
//    /*
//     * translate obsolete IP-based URLs into new (soon redundant) auth servers
//     */
//
//    if (ret.getProperty("primary.server") != null
//        && translateUrls.containsKey(ret.getProperty("primary.server"))) {
//      ret.setProperty("primary.server", translateUrls.get(ret.getProperty("primary.server")));
//    }
//
//    /*
//     * support for test certificates: if test.port is there, switch primary server to local server
//     * on specified port.
//     */
//    if (ret.getProperty("test.port") != null) {
//      int port = Integer.parseInt(ret.getProperty("test.port"));
//      ret.setProperty("primary.server", "http://127.0.0.1:" + port + "/knode");
//    }
//    return ret;
//  }
//
//  // /**
//  // * Create encrypted license for given user data.
//  // *
//  // * @param user
//  // * @return
//  // * @throws Exception
//  // */
//  // public File getLicense(IUser user, boolean email) throws Exception {
//  //
//  // File output = File.createTempFile("certificate", "crt");
//  // String keyringFile = Config.getKeyringFile();
//  // String password = Config.getPassword();
//  // String key = Config.getKey();
//  // File licenseFile = File.createTempFile("certificate", "properties");
//  //
//  // /**
//  // * Ensure we have all the info
//  // */
//  // ((User) user).synchronize();
//  //
//  // /*
//  // * create property file from user data
//  // */
//  // Properties up = new Properties();
//  // store(user, up);
//  // OutputStream fos = new FileOutputStream(licenseFile);
//  // up.store(fos, "Generated by integratedmodelling.org on " + new Date());
//  // fos.close();
//  //
//  // /*
//  // * encode the license
//  // */
//  // try {
//  // OutputStream os = new FileOutputStream(output);
//  // os.write((
//  // new License().
//  // setLicense(licenseFile).
//  // loadKey(keyringFile, key).
//  // encodeLicense(password)).
//  // getBytes("utf-8"));
//  // os.close();
//  // } catch (Exception e) {
//  // throw e;
//  // }
//  //
//  // if (email) {
//  // EmailManager
//  // .get()
//  // .sendSSLMessage(
//  // Collections.singletonList(user.getEmailAddress()),
//  // "Your integratedmodelling.org certificate",
//  // "Thank you for requesting a certificate. The attached reflects your settings as of "
//  // +
//  // new Date()
//  // +
//  // " and is valid for one year. Please activate it by placing the attached file in your "
//  // +
//  // "<home>/.thinklab directory, replacing the previous file if you had one.\n\r\n\r"
//  // +
//  // "Sincerely,\n\r\nwww.integratedmodelling.org",
//  // "integrated.modelling@gmail.com",
//  // new String[] { output.toString(), ICertificate.DEFAULT_CERTIFICATE_FILENAME });
//  //
//  // }
//  //
//  // return output;
//  // }
//
//  // private String serializeSet(Set<String> groups) {
//  // String ret = "";
//  // int i = 0;
//  // if (groups != null) {
//  // for (String s : groups) {
//  // ret += s + (i == (groups.size() - 1) ? "" : ",");
//  // }
//  // }
//  // return ret;
//  // }
//
//  // private void store(IUser ud, Properties up) throws Exception {
//  //
//  // setProperty(up, IUser.USER, ud.getUsername());
//  // setProperty(up, IUser.EMAIL, ud.getEmailAddress());
//  // setProperty(up, IUser.FIRSTNAME, ud.getFirstName());
//  // setProperty(up, IUser.LASTNAME, ud.getLastName());
//  // setProperty(up, IUser.INITIALS, ud.getInitials());
//  // setProperty(up, IUser.AFFILIATION, ud.getAffiliation());
//  // setProperty(up, IUser.SERVER, ud.getServerURL());
//  // setProperty(up, IUser.ROLES, serializeSet(ud.getRoles()));
//  // setProperty(up, IUser.SKEY, ud.getSecurityKey());
//  // //
//  // // User.store(ud);
//  // }
//
//  // private void setProperty(Properties up, String key, String value) {
//  // if (value != null) {
//  // up.setProperty(key, value);
//  // }
//  // }
//}
